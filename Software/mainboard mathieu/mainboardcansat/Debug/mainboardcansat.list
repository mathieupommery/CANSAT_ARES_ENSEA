
mainboardcansat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010780  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000538  08010960  08010960  00011960  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010e98  08010e98  000121f4  2**0
                  CONTENTS
  4 .ARM          00000008  08010e98  08010e98  00011e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ea0  08010ea0  000121f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ea0  08010ea0  00011ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08010ea4  08010ea4  00011ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  20000000  08010ea8  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011ac  200001f4  0801109c  000121f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013a0  0801109c  000123a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000121f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027731  00000000  00000000  00012224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005391  00000000  00000000  00039955  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002160  00000000  00000000  0003ece8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019d9  00000000  00000000  00040e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000260db  00000000  00000000  00042821  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002c4c6  00000000  00000000  000688fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e79d9  00000000  00000000  00094dc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c79b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a290  00000000  00000000  0017c7e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  00186a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001f4 	.word	0x200001f4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010948 	.word	0x08010948

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001f8 	.word	0x200001f8
 800021c:	08010948 	.word	0x08010948

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cec:	f000 b9a0 	b.w	8001030 <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	@ (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9d08      	ldr	r5, [sp, #32]
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d14e      	bne.n	8000e1e <__udivmoddi4+0xaa>
 8000d80:	4694      	mov	ip, r2
 8000d82:	458c      	cmp	ip, r1
 8000d84:	4686      	mov	lr, r0
 8000d86:	fab2 f282 	clz	r2, r2
 8000d8a:	d962      	bls.n	8000e52 <__udivmoddi4+0xde>
 8000d8c:	b14a      	cbz	r2, 8000da2 <__udivmoddi4+0x2e>
 8000d8e:	f1c2 0320 	rsb	r3, r2, #32
 8000d92:	4091      	lsls	r1, r2
 8000d94:	fa20 f303 	lsr.w	r3, r0, r3
 8000d98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d9c:	4319      	orrs	r1, r3
 8000d9e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000da2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000da6:	fa1f f68c 	uxth.w	r6, ip
 8000daa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb07 1114 	mls	r1, r7, r4, r1
 8000db6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dba:	fb04 f106 	mul.w	r1, r4, r6
 8000dbe:	4299      	cmp	r1, r3
 8000dc0:	d90a      	bls.n	8000dd8 <__udivmoddi4+0x64>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000dca:	f080 8112 	bcs.w	8000ff2 <__udivmoddi4+0x27e>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 810f 	bls.w	8000ff2 <__udivmoddi4+0x27e>
 8000dd4:	3c02      	subs	r4, #2
 8000dd6:	4463      	add	r3, ip
 8000dd8:	1a59      	subs	r1, r3, r1
 8000dda:	fa1f f38e 	uxth.w	r3, lr
 8000dde:	fbb1 f0f7 	udiv	r0, r1, r7
 8000de2:	fb07 1110 	mls	r1, r7, r0, r1
 8000de6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dea:	fb00 f606 	mul.w	r6, r0, r6
 8000dee:	429e      	cmp	r6, r3
 8000df0:	d90a      	bls.n	8000e08 <__udivmoddi4+0x94>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000dfa:	f080 80fc 	bcs.w	8000ff6 <__udivmoddi4+0x282>
 8000dfe:	429e      	cmp	r6, r3
 8000e00:	f240 80f9 	bls.w	8000ff6 <__udivmoddi4+0x282>
 8000e04:	4463      	add	r3, ip
 8000e06:	3802      	subs	r0, #2
 8000e08:	1b9b      	subs	r3, r3, r6
 8000e0a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e0e:	2100      	movs	r1, #0
 8000e10:	b11d      	cbz	r5, 8000e1a <__udivmoddi4+0xa6>
 8000e12:	40d3      	lsrs	r3, r2
 8000e14:	2200      	movs	r2, #0
 8000e16:	e9c5 3200 	strd	r3, r2, [r5]
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d905      	bls.n	8000e2e <__udivmoddi4+0xba>
 8000e22:	b10d      	cbz	r5, 8000e28 <__udivmoddi4+0xb4>
 8000e24:	e9c5 0100 	strd	r0, r1, [r5]
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e7f5      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e2e:	fab3 f183 	clz	r1, r3
 8000e32:	2900      	cmp	r1, #0
 8000e34:	d146      	bne.n	8000ec4 <__udivmoddi4+0x150>
 8000e36:	42a3      	cmp	r3, r4
 8000e38:	d302      	bcc.n	8000e40 <__udivmoddi4+0xcc>
 8000e3a:	4290      	cmp	r0, r2
 8000e3c:	f0c0 80f0 	bcc.w	8001020 <__udivmoddi4+0x2ac>
 8000e40:	1a86      	subs	r6, r0, r2
 8000e42:	eb64 0303 	sbc.w	r3, r4, r3
 8000e46:	2001      	movs	r0, #1
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d0e6      	beq.n	8000e1a <__udivmoddi4+0xa6>
 8000e4c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e50:	e7e3      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000e52:	2a00      	cmp	r2, #0
 8000e54:	f040 8090 	bne.w	8000f78 <__udivmoddi4+0x204>
 8000e58:	eba1 040c 	sub.w	r4, r1, ip
 8000e5c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e60:	fa1f f78c 	uxth.w	r7, ip
 8000e64:	2101      	movs	r1, #1
 8000e66:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e6a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e6e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e72:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e76:	fb07 f006 	mul.w	r0, r7, r6
 8000e7a:	4298      	cmp	r0, r3
 8000e7c:	d908      	bls.n	8000e90 <__udivmoddi4+0x11c>
 8000e7e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e82:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e86:	d202      	bcs.n	8000e8e <__udivmoddi4+0x11a>
 8000e88:	4298      	cmp	r0, r3
 8000e8a:	f200 80cd 	bhi.w	8001028 <__udivmoddi4+0x2b4>
 8000e8e:	4626      	mov	r6, r4
 8000e90:	1a1c      	subs	r4, r3, r0
 8000e92:	fa1f f38e 	uxth.w	r3, lr
 8000e96:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e9a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e9e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ea2:	fb00 f707 	mul.w	r7, r0, r7
 8000ea6:	429f      	cmp	r7, r3
 8000ea8:	d908      	bls.n	8000ebc <__udivmoddi4+0x148>
 8000eaa:	eb1c 0303 	adds.w	r3, ip, r3
 8000eae:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000eb2:	d202      	bcs.n	8000eba <__udivmoddi4+0x146>
 8000eb4:	429f      	cmp	r7, r3
 8000eb6:	f200 80b0 	bhi.w	800101a <__udivmoddi4+0x2a6>
 8000eba:	4620      	mov	r0, r4
 8000ebc:	1bdb      	subs	r3, r3, r7
 8000ebe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ec2:	e7a5      	b.n	8000e10 <__udivmoddi4+0x9c>
 8000ec4:	f1c1 0620 	rsb	r6, r1, #32
 8000ec8:	408b      	lsls	r3, r1
 8000eca:	fa22 f706 	lsr.w	r7, r2, r6
 8000ece:	431f      	orrs	r7, r3
 8000ed0:	fa20 fc06 	lsr.w	ip, r0, r6
 8000ed4:	fa04 f301 	lsl.w	r3, r4, r1
 8000ed8:	ea43 030c 	orr.w	r3, r3, ip
 8000edc:	40f4      	lsrs	r4, r6
 8000ede:	fa00 f801 	lsl.w	r8, r0, r1
 8000ee2:	0c38      	lsrs	r0, r7, #16
 8000ee4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ee8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eec:	fa1f fc87 	uxth.w	ip, r7
 8000ef0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ef4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ef8:	fb0e f90c 	mul.w	r9, lr, ip
 8000efc:	45a1      	cmp	r9, r4
 8000efe:	fa02 f201 	lsl.w	r2, r2, r1
 8000f02:	d90a      	bls.n	8000f1a <__udivmoddi4+0x1a6>
 8000f04:	193c      	adds	r4, r7, r4
 8000f06:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f0a:	f080 8084 	bcs.w	8001016 <__udivmoddi4+0x2a2>
 8000f0e:	45a1      	cmp	r9, r4
 8000f10:	f240 8081 	bls.w	8001016 <__udivmoddi4+0x2a2>
 8000f14:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f18:	443c      	add	r4, r7
 8000f1a:	eba4 0409 	sub.w	r4, r4, r9
 8000f1e:	fa1f f983 	uxth.w	r9, r3
 8000f22:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f26:	fb00 4413 	mls	r4, r0, r3, r4
 8000f2a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f2e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f32:	45a4      	cmp	ip, r4
 8000f34:	d907      	bls.n	8000f46 <__udivmoddi4+0x1d2>
 8000f36:	193c      	adds	r4, r7, r4
 8000f38:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f3c:	d267      	bcs.n	800100e <__udivmoddi4+0x29a>
 8000f3e:	45a4      	cmp	ip, r4
 8000f40:	d965      	bls.n	800100e <__udivmoddi4+0x29a>
 8000f42:	3b02      	subs	r3, #2
 8000f44:	443c      	add	r4, r7
 8000f46:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f4a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f4e:	eba4 040c 	sub.w	r4, r4, ip
 8000f52:	429c      	cmp	r4, r3
 8000f54:	46ce      	mov	lr, r9
 8000f56:	469c      	mov	ip, r3
 8000f58:	d351      	bcc.n	8000ffe <__udivmoddi4+0x28a>
 8000f5a:	d04e      	beq.n	8000ffa <__udivmoddi4+0x286>
 8000f5c:	b155      	cbz	r5, 8000f74 <__udivmoddi4+0x200>
 8000f5e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f62:	eb64 040c 	sbc.w	r4, r4, ip
 8000f66:	fa04 f606 	lsl.w	r6, r4, r6
 8000f6a:	40cb      	lsrs	r3, r1
 8000f6c:	431e      	orrs	r6, r3
 8000f6e:	40cc      	lsrs	r4, r1
 8000f70:	e9c5 6400 	strd	r6, r4, [r5]
 8000f74:	2100      	movs	r1, #0
 8000f76:	e750      	b.n	8000e1a <__udivmoddi4+0xa6>
 8000f78:	f1c2 0320 	rsb	r3, r2, #32
 8000f7c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f84:	fa24 f303 	lsr.w	r3, r4, r3
 8000f88:	4094      	lsls	r4, r2
 8000f8a:	430c      	orrs	r4, r1
 8000f8c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f90:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f94:	fa1f f78c 	uxth.w	r7, ip
 8000f98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f9c:	fb08 3110 	mls	r1, r8, r0, r3
 8000fa0:	0c23      	lsrs	r3, r4, #16
 8000fa2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fa6:	fb00 f107 	mul.w	r1, r0, r7
 8000faa:	4299      	cmp	r1, r3
 8000fac:	d908      	bls.n	8000fc0 <__udivmoddi4+0x24c>
 8000fae:	eb1c 0303 	adds.w	r3, ip, r3
 8000fb2:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000fb6:	d22c      	bcs.n	8001012 <__udivmoddi4+0x29e>
 8000fb8:	4299      	cmp	r1, r3
 8000fba:	d92a      	bls.n	8001012 <__udivmoddi4+0x29e>
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	4463      	add	r3, ip
 8000fc0:	1a5b      	subs	r3, r3, r1
 8000fc2:	b2a4      	uxth	r4, r4
 8000fc4:	fbb3 f1f8 	udiv	r1, r3, r8
 8000fc8:	fb08 3311 	mls	r3, r8, r1, r3
 8000fcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000fd0:	fb01 f307 	mul.w	r3, r1, r7
 8000fd4:	42a3      	cmp	r3, r4
 8000fd6:	d908      	bls.n	8000fea <__udivmoddi4+0x276>
 8000fd8:	eb1c 0404 	adds.w	r4, ip, r4
 8000fdc:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000fe0:	d213      	bcs.n	800100a <__udivmoddi4+0x296>
 8000fe2:	42a3      	cmp	r3, r4
 8000fe4:	d911      	bls.n	800100a <__udivmoddi4+0x296>
 8000fe6:	3902      	subs	r1, #2
 8000fe8:	4464      	add	r4, ip
 8000fea:	1ae4      	subs	r4, r4, r3
 8000fec:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ff0:	e739      	b.n	8000e66 <__udivmoddi4+0xf2>
 8000ff2:	4604      	mov	r4, r0
 8000ff4:	e6f0      	b.n	8000dd8 <__udivmoddi4+0x64>
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e706      	b.n	8000e08 <__udivmoddi4+0x94>
 8000ffa:	45c8      	cmp	r8, r9
 8000ffc:	d2ae      	bcs.n	8000f5c <__udivmoddi4+0x1e8>
 8000ffe:	ebb9 0e02 	subs.w	lr, r9, r2
 8001002:	eb63 0c07 	sbc.w	ip, r3, r7
 8001006:	3801      	subs	r0, #1
 8001008:	e7a8      	b.n	8000f5c <__udivmoddi4+0x1e8>
 800100a:	4631      	mov	r1, r6
 800100c:	e7ed      	b.n	8000fea <__udivmoddi4+0x276>
 800100e:	4603      	mov	r3, r0
 8001010:	e799      	b.n	8000f46 <__udivmoddi4+0x1d2>
 8001012:	4630      	mov	r0, r6
 8001014:	e7d4      	b.n	8000fc0 <__udivmoddi4+0x24c>
 8001016:	46d6      	mov	lr, sl
 8001018:	e77f      	b.n	8000f1a <__udivmoddi4+0x1a6>
 800101a:	4463      	add	r3, ip
 800101c:	3802      	subs	r0, #2
 800101e:	e74d      	b.n	8000ebc <__udivmoddi4+0x148>
 8001020:	4606      	mov	r6, r0
 8001022:	4623      	mov	r3, r4
 8001024:	4608      	mov	r0, r1
 8001026:	e70f      	b.n	8000e48 <__udivmoddi4+0xd4>
 8001028:	3e02      	subs	r6, #2
 800102a:	4463      	add	r3, ip
 800102c:	e730      	b.n	8000e90 <__udivmoddi4+0x11c>
 800102e:	bf00      	nop

08001030 <__aeabi_idiv0>:
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop

08001034 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08c      	sub	sp, #48	@ 0x30
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800103a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800103e:	2200      	movs	r2, #0
 8001040:	601a      	str	r2, [r3, #0]
 8001042:	605a      	str	r2, [r3, #4]
 8001044:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001046:	1d3b      	adds	r3, r7, #4
 8001048:	2220      	movs	r2, #32
 800104a:	2100      	movs	r1, #0
 800104c:	4618      	mov	r0, r3
 800104e:	f00c ffad 	bl	800dfac <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001052:	4b48      	ldr	r3, [pc, #288]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001054:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001058:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800105a:	4b46      	ldr	r3, [pc, #280]	@ (8001174 <MX_ADC1_Init+0x140>)
 800105c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001060:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001062:	4b44      	ldr	r3, [pc, #272]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001064:	2200      	movs	r2, #0
 8001066:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001068:	4b42      	ldr	r3, [pc, #264]	@ (8001174 <MX_ADC1_Init+0x140>)
 800106a:	2200      	movs	r2, #0
 800106c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800106e:	4b41      	ldr	r3, [pc, #260]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001074:	4b3f      	ldr	r3, [pc, #252]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001076:	2201      	movs	r2, #1
 8001078:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800107a:	4b3e      	ldr	r3, [pc, #248]	@ (8001174 <MX_ADC1_Init+0x140>)
 800107c:	2208      	movs	r2, #8
 800107e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001080:	4b3c      	ldr	r3, [pc, #240]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001082:	2200      	movs	r2, #0
 8001084:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001086:	4b3b      	ldr	r3, [pc, #236]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001088:	2201      	movs	r2, #1
 800108a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 4;
 800108c:	4b39      	ldr	r3, [pc, #228]	@ (8001174 <MX_ADC1_Init+0x140>)
 800108e:	2204      	movs	r2, #4
 8001090:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001092:	4b38      	ldr	r3, [pc, #224]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 800109a:	4b36      	ldr	r3, [pc, #216]	@ (8001174 <MX_ADC1_Init+0x140>)
 800109c:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80010a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80010a2:	4b34      	ldr	r3, [pc, #208]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010a8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80010aa:	4b32      	ldr	r3, [pc, #200]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80010b2:	4b30      	ldr	r3, [pc, #192]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80010b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010c0:	482c      	ldr	r0, [pc, #176]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010c2:	f002 fb9b 	bl	80037fc <HAL_ADC_Init>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80010cc:	f001 fa3c 	bl	8002548 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80010d0:	2300      	movs	r3, #0
 80010d2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80010d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d8:	4619      	mov	r1, r3
 80010da:	4826      	ldr	r0, [pc, #152]	@ (8001174 <MX_ADC1_Init+0x140>)
 80010dc:	f003 fb0a 	bl	80046f4 <HAL_ADCEx_MultiModeConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80010e6:	f001 fa2f 	bl	8002548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80010ea:	4b23      	ldr	r3, [pc, #140]	@ (8001178 <MX_ADC1_Init+0x144>)
 80010ec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80010ee:	2306      	movs	r3, #6
 80010f0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80010f2:	2307      	movs	r3, #7
 80010f4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010f6:	237f      	movs	r3, #127	@ 0x7f
 80010f8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010fa:	2304      	movs	r3, #4
 80010fc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	4619      	mov	r1, r3
 8001106:	481b      	ldr	r0, [pc, #108]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001108:	f002 fdc4 	bl	8003c94 <HAL_ADC_ConfigChannel>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001112:	f001 fa19 	bl	8002548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR_ADC1;
 8001116:	4b19      	ldr	r3, [pc, #100]	@ (800117c <MX_ADC1_Init+0x148>)
 8001118:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800111a:	230c      	movs	r3, #12
 800111c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800111e:	1d3b      	adds	r3, r7, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4814      	ldr	r0, [pc, #80]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001124:	f002 fdb6 	bl	8003c94 <HAL_ADC_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 800112e:	f001 fa0b 	bl	8002548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001132:	4b13      	ldr	r3, [pc, #76]	@ (8001180 <MX_ADC1_Init+0x14c>)
 8001134:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001136:	2312      	movs	r3, #18
 8001138:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	@ (8001174 <MX_ADC1_Init+0x140>)
 8001140:	f002 fda8 	bl	8003c94 <HAL_ADC_ConfigChannel>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800114a:	f001 f9fd 	bl	8002548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_ADC1_Init+0x150>)
 8001150:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001152:	2318      	movs	r3, #24
 8001154:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	@ (8001174 <MX_ADC1_Init+0x140>)
 800115c:	f002 fd9a 	bl	8003c94 <HAL_ADC_ConfigChannel>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_ADC1_Init+0x136>
  {
    Error_Handler();
 8001166:	f001 f9ef 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3730      	adds	r7, #48	@ 0x30
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000210 	.word	0x20000210
 8001178:	cb840000 	.word	0xcb840000
 800117c:	c3210000 	.word	0xc3210000
 8001180:	08600004 	.word	0x08600004
 8001184:	0c900008 	.word	0x0c900008

08001188 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b088      	sub	sp, #32
 800118c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800118e:	463b      	mov	r3, r7
 8001190:	2220      	movs	r2, #32
 8001192:	2100      	movs	r1, #0
 8001194:	4618      	mov	r0, r3
 8001196:	f00c ff09 	bl	800dfac <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800119a:	4b2c      	ldr	r3, [pc, #176]	@ (800124c <MX_ADC2_Init+0xc4>)
 800119c:	4a2c      	ldr	r2, [pc, #176]	@ (8001250 <MX_ADC2_Init+0xc8>)
 800119e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011a0:	4b2a      	ldr	r3, [pc, #168]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011a2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80011a6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011a8:	4b28      	ldr	r3, [pc, #160]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011ae:	4b27      	ldr	r3, [pc, #156]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80011ba:	4b24      	ldr	r3, [pc, #144]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c0:	4b22      	ldr	r3, [pc, #136]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011c2:	2204      	movs	r2, #4
 80011c4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011c6:	4b21      	ldr	r3, [pc, #132]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 80011d2:	4b1e      	ldr	r3, [pc, #120]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011d8:	4b1c      	ldr	r3, [pc, #112]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011da:	2200      	movs	r2, #0
 80011dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T4_TRGO;
 80011e0:	4b1a      	ldr	r3, [pc, #104]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011e2:	f44f 62b0 	mov.w	r2, #1408	@ 0x580
 80011e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80011e8:	4b18      	ldr	r3, [pc, #96]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011ea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80011ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011f0:	4b16      	ldr	r3, [pc, #88]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011f8:	4b14      	ldr	r3, [pc, #80]	@ (800124c <MX_ADC2_Init+0xc4>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80011fe:	4b13      	ldr	r3, [pc, #76]	@ (800124c <MX_ADC2_Init+0xc4>)
 8001200:	2200      	movs	r2, #0
 8001202:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001206:	4811      	ldr	r0, [pc, #68]	@ (800124c <MX_ADC2_Init+0xc4>)
 8001208:	f002 faf8 	bl	80037fc <HAL_ADC_Init>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001212:	f001 f999 	bl	8002548 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8001216:	4b0f      	ldr	r3, [pc, #60]	@ (8001254 <MX_ADC2_Init+0xcc>)
 8001218:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121a:	2306      	movs	r3, #6
 800121c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800121e:	2307      	movs	r3, #7
 8001220:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001222:	237f      	movs	r3, #127	@ 0x7f
 8001224:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001226:	2304      	movs	r3, #4
 8001228:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800122e:	463b      	mov	r3, r7
 8001230:	4619      	mov	r1, r3
 8001232:	4806      	ldr	r0, [pc, #24]	@ (800124c <MX_ADC2_Init+0xc4>)
 8001234:	f002 fd2e 	bl	8003c94 <HAL_ADC_ConfigChannel>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800123e:	f001 f983 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001242:	bf00      	nop
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	2000027c 	.word	0x2000027c
 8001250:	50000100 	.word	0x50000100
 8001254:	47520000 	.word	0x47520000

08001258 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b09c      	sub	sp, #112	@ 0x70
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001260:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001264:	2200      	movs	r2, #0
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	605a      	str	r2, [r3, #4]
 800126a:	609a      	str	r2, [r3, #8]
 800126c:	60da      	str	r2, [r3, #12]
 800126e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001270:	f107 0318 	add.w	r3, r7, #24
 8001274:	2244      	movs	r2, #68	@ 0x44
 8001276:	2100      	movs	r1, #0
 8001278:	4618      	mov	r0, r3
 800127a:	f00c fe97 	bl	800dfac <memset>
  if(adcHandle->Instance==ADC1)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001286:	d169      	bne.n	800135c <HAL_ADC_MspInit+0x104>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001288:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800128c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800128e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001292:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001294:	f107 0318 	add.w	r3, r7, #24
 8001298:	4618      	mov	r0, r3
 800129a:	f005 f8e3 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d001      	beq.n	80012a8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80012a4:	f001 f950 	bl	8002548 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80012a8:	4b65      	ldr	r3, [pc, #404]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	3301      	adds	r3, #1
 80012ae:	4a64      	ldr	r2, [pc, #400]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 80012b0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012b2:	4b63      	ldr	r3, [pc, #396]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d10b      	bne.n	80012d2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012ba:	4b62      	ldr	r3, [pc, #392]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012be:	4a61      	ldr	r2, [pc, #388]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012c0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80012c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012c6:	4b5f      	ldr	r3, [pc, #380]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80012ce:	617b      	str	r3, [r7, #20]
 80012d0:	697b      	ldr	r3, [r7, #20]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d2:	4b5c      	ldr	r3, [pc, #368]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012d6:	4a5b      	ldr	r2, [pc, #364]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80012de:	4b59      	ldr	r3, [pc, #356]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80012e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	613b      	str	r3, [r7, #16]
 80012e8:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN2
    PA2     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012ea:	2306      	movs	r3, #6
 80012ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012ee:	2303      	movs	r3, #3
 80012f0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f2:	2300      	movs	r3, #0
 80012f4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80012fa:	4619      	mov	r1, r3
 80012fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001300:	f003 feea 	bl	80050d8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel3;
 8001304:	4b50      	ldr	r3, [pc, #320]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001306:	4a51      	ldr	r2, [pc, #324]	@ (800144c <HAL_ADC_MspInit+0x1f4>)
 8001308:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800130a:	4b4f      	ldr	r3, [pc, #316]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 800130c:	2205      	movs	r2, #5
 800130e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001310:	4b4d      	ldr	r3, [pc, #308]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001312:	2200      	movs	r2, #0
 8001314:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001316:	4b4c      	ldr	r3, [pc, #304]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001318:	2200      	movs	r2, #0
 800131a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800131c:	4b4a      	ldr	r3, [pc, #296]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 800131e:	2280      	movs	r2, #128	@ 0x80
 8001320:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001322:	4b49      	ldr	r3, [pc, #292]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001324:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001328:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800132a:	4b47      	ldr	r3, [pc, #284]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 800132c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001330:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001332:	4b45      	ldr	r3, [pc, #276]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001334:	2220      	movs	r2, #32
 8001336:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001338:	4b43      	ldr	r3, [pc, #268]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 800133a:	2200      	movs	r2, #0
 800133c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800133e:	4842      	ldr	r0, [pc, #264]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001340:	f003 fb8c 	bl	8004a5c <HAL_DMA_Init>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_ADC_MspInit+0xf6>
    {
      Error_Handler();
 800134a:	f001 f8fd 	bl	8002548 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a3d      	ldr	r2, [pc, #244]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001352:	655a      	str	r2, [r3, #84]	@ 0x54
 8001354:	4a3c      	ldr	r2, [pc, #240]	@ (8001448 <HAL_ADC_MspInit+0x1f0>)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 800135a:	e06d      	b.n	8001438 <HAL_ADC_MspInit+0x1e0>
  else if(adcHandle->Instance==ADC2)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a3b      	ldr	r2, [pc, #236]	@ (8001450 <HAL_ADC_MspInit+0x1f8>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d168      	bne.n	8001438 <HAL_ADC_MspInit+0x1e0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001366:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800136a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800136c:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001370:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	4618      	mov	r0, r3
 8001378:	f005 f874 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8001382:	f001 f8e1 	bl	8002548 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001386:	4b2e      	ldr	r3, [pc, #184]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	3301      	adds	r3, #1
 800138c:	4a2c      	ldr	r2, [pc, #176]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 800138e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001390:	4b2b      	ldr	r3, [pc, #172]	@ (8001440 <HAL_ADC_MspInit+0x1e8>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d10b      	bne.n	80013b0 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001398:	4b2a      	ldr	r3, [pc, #168]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 800139a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800139c:	4a29      	ldr	r2, [pc, #164]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 800139e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80013a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013a4:	4b27      	ldr	r3, [pc, #156]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80013a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013a8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b0:	4b24      	ldr	r3, [pc, #144]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80013b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013b4:	4a23      	ldr	r2, [pc, #140]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80013b6:	f043 0301 	orr.w	r3, r3, #1
 80013ba:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013bc:	4b21      	ldr	r3, [pc, #132]	@ (8001444 <HAL_ADC_MspInit+0x1ec>)
 80013be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013c0:	f003 0301 	and.w	r3, r3, #1
 80013c4:	60bb      	str	r3, [r7, #8]
 80013c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80013c8:	2310      	movs	r3, #16
 80013ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013cc:	2303      	movs	r3, #3
 80013ce:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013de:	f003 fe7b 	bl	80050d8 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel5;
 80013e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 80013e4:	4a1c      	ldr	r2, [pc, #112]	@ (8001458 <HAL_ADC_MspInit+0x200>)
 80013e6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 80013e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 80013ea:	2224      	movs	r2, #36	@ 0x24
 80013ec:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013ee:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f4:	4b17      	ldr	r3, [pc, #92]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 80013fa:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 80013fc:	2280      	movs	r2, #128	@ 0x80
 80013fe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001400:	4b14      	ldr	r3, [pc, #80]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 8001402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001406:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001408:	4b12      	ldr	r3, [pc, #72]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 800140a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800140e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8001410:	4b10      	ldr	r3, [pc, #64]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 8001412:	2220      	movs	r2, #32
 8001414:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001416:	4b0f      	ldr	r3, [pc, #60]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 8001418:	2200      	movs	r2, #0
 800141a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 800141c:	480d      	ldr	r0, [pc, #52]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 800141e:	f003 fb1d 	bl	8004a5c <HAL_DMA_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <HAL_ADC_MspInit+0x1d4>
      Error_Handler();
 8001428:	f001 f88e 	bl	8002548 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a09      	ldr	r2, [pc, #36]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 8001430:	655a      	str	r2, [r3, #84]	@ 0x54
 8001432:	4a08      	ldr	r2, [pc, #32]	@ (8001454 <HAL_ADC_MspInit+0x1fc>)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001438:	bf00      	nop
 800143a:	3770      	adds	r7, #112	@ 0x70
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	200003a8 	.word	0x200003a8
 8001444:	40021000 	.word	0x40021000
 8001448:	200002e8 	.word	0x200002e8
 800144c:	40020030 	.word	0x40020030
 8001450:	50000100 	.word	0x50000100
 8001454:	20000348 	.word	0x20000348
 8001458:	40020058 	.word	0x40020058
 800145c:	00000000 	.word	0x00000000

08001460 <HAL_ADC_ConvCpltCallback>:
  /* USER CODE END ADC2_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001460:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001464:	b082      	sub	sp, #8
 8001466:	af00      	add	r7, sp, #0
 8001468:	6078      	str	r0, [r7, #4]

	if(hadc->Instance==ADC1){
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001472:	f040 80cd 	bne.w	8001610 <HAL_ADC_ConvCpltCallback+0x1b0>
		vrefint=(float) ((4095.0*1.212)/rawADCdata[0]);
 8001476:	4b80      	ldr	r3, [pc, #512]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff f87a 	bl	8000574 <__aeabi_i2d>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	a178      	add	r1, pc, #480	@ (adr r1, 8001668 <HAL_ADC_ConvCpltCallback+0x208>)
 8001486:	e9d1 0100 	ldrd	r0, r1, [r1]
 800148a:	f7ff fa07 	bl	800089c <__aeabi_ddiv>
 800148e:	4602      	mov	r2, r0
 8001490:	460b      	mov	r3, r1
 8001492:	4610      	mov	r0, r2
 8001494:	4619      	mov	r1, r3
 8001496:	f7ff fbcf 	bl	8000c38 <__aeabi_d2f>
 800149a:	4603      	mov	r3, r0
 800149c:	4a77      	ldr	r2, [pc, #476]	@ (800167c <HAL_ADC_ConvCpltCallback+0x21c>)
 800149e:	6013      	str	r3, [r2, #0]
		temp=(float) (((100.0)/(tscal2-tscal1))*(rawADCdata[1]*(vrefint/3.0)-tscal1))+30.0;
 80014a0:	4b77      	ldr	r3, [pc, #476]	@ (8001680 <HAL_ADC_ConvCpltCallback+0x220>)
 80014a2:	ed93 7a00 	vldr	s14, [r3]
 80014a6:	4b77      	ldr	r3, [pc, #476]	@ (8001684 <HAL_ADC_ConvCpltCallback+0x224>)
 80014a8:	edd3 7a00 	vldr	s15, [r3]
 80014ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014b0:	ee17 0a90 	vmov	r0, s15
 80014b4:	f7ff f870 	bl	8000598 <__aeabi_f2d>
 80014b8:	4602      	mov	r2, r0
 80014ba:	460b      	mov	r3, r1
 80014bc:	f04f 0000 	mov.w	r0, #0
 80014c0:	4971      	ldr	r1, [pc, #452]	@ (8001688 <HAL_ADC_ConvCpltCallback+0x228>)
 80014c2:	f7ff f9eb 	bl	800089c <__aeabi_ddiv>
 80014c6:	4602      	mov	r2, r0
 80014c8:	460b      	mov	r3, r1
 80014ca:	4690      	mov	r8, r2
 80014cc:	4699      	mov	r9, r3
 80014ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 80014d0:	885b      	ldrh	r3, [r3, #2]
 80014d2:	4618      	mov	r0, r3
 80014d4:	f7ff f84e 	bl	8000574 <__aeabi_i2d>
 80014d8:	4604      	mov	r4, r0
 80014da:	460d      	mov	r5, r1
 80014dc:	4b67      	ldr	r3, [pc, #412]	@ (800167c <HAL_ADC_ConvCpltCallback+0x21c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff f859 	bl	8000598 <__aeabi_f2d>
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	4b68      	ldr	r3, [pc, #416]	@ (800168c <HAL_ADC_ConvCpltCallback+0x22c>)
 80014ec:	f7ff f9d6 	bl	800089c <__aeabi_ddiv>
 80014f0:	4602      	mov	r2, r0
 80014f2:	460b      	mov	r3, r1
 80014f4:	4620      	mov	r0, r4
 80014f6:	4629      	mov	r1, r5
 80014f8:	f7ff f8a6 	bl	8000648 <__aeabi_dmul>
 80014fc:	4602      	mov	r2, r0
 80014fe:	460b      	mov	r3, r1
 8001500:	4614      	mov	r4, r2
 8001502:	461d      	mov	r5, r3
 8001504:	4b5f      	ldr	r3, [pc, #380]	@ (8001684 <HAL_ADC_ConvCpltCallback+0x224>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff f845 	bl	8000598 <__aeabi_f2d>
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4620      	mov	r0, r4
 8001514:	4629      	mov	r1, r5
 8001516:	f7fe fedf 	bl	80002d8 <__aeabi_dsub>
 800151a:	4602      	mov	r2, r0
 800151c:	460b      	mov	r3, r1
 800151e:	4640      	mov	r0, r8
 8001520:	4649      	mov	r1, r9
 8001522:	f7ff f891 	bl	8000648 <__aeabi_dmul>
 8001526:	4602      	mov	r2, r0
 8001528:	460b      	mov	r3, r1
 800152a:	4610      	mov	r0, r2
 800152c:	4619      	mov	r1, r3
 800152e:	f7ff fb83 	bl	8000c38 <__aeabi_d2f>
 8001532:	ee07 0a10 	vmov	s14, r0
 8001536:	eef3 7a0e 	vmov.f32	s15, #62	@ 0x41f00000  30.0
 800153a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800153e:	4b54      	ldr	r3, [pc, #336]	@ (8001690 <HAL_ADC_ConvCpltCallback+0x230>)
 8001540:	edc3 7a00 	vstr	s15, [r3]
		vbat=(float) 3*(rawADCdata[3]/4095.0)*vrefint;
 8001544:	4b4c      	ldr	r3, [pc, #304]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 8001546:	88db      	ldrh	r3, [r3, #6]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff f813 	bl	8000574 <__aeabi_i2d>
 800154e:	a348      	add	r3, pc, #288	@ (adr r3, 8001670 <HAL_ADC_ConvCpltCallback+0x210>)
 8001550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001554:	f7ff f9a2 	bl	800089c <__aeabi_ddiv>
 8001558:	4602      	mov	r2, r0
 800155a:	460b      	mov	r3, r1
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b49      	ldr	r3, [pc, #292]	@ (800168c <HAL_ADC_ConvCpltCallback+0x22c>)
 8001566:	f7ff f86f 	bl	8000648 <__aeabi_dmul>
 800156a:	4602      	mov	r2, r0
 800156c:	460b      	mov	r3, r1
 800156e:	4614      	mov	r4, r2
 8001570:	461d      	mov	r5, r3
 8001572:	4b42      	ldr	r3, [pc, #264]	@ (800167c <HAL_ADC_ConvCpltCallback+0x21c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f80e 	bl	8000598 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4620      	mov	r0, r4
 8001582:	4629      	mov	r1, r5
 8001584:	f7ff f860 	bl	8000648 <__aeabi_dmul>
 8001588:	4602      	mov	r2, r0
 800158a:	460b      	mov	r3, r1
 800158c:	4610      	mov	r0, r2
 800158e:	4619      	mov	r1, r3
 8001590:	f7ff fb52 	bl	8000c38 <__aeabi_d2f>
 8001594:	4603      	mov	r3, r0
 8001596:	4a3f      	ldr	r2, [pc, #252]	@ (8001694 <HAL_ADC_ConvCpltCallback+0x234>)
 8001598:	6013      	str	r3, [r2, #0]
		current=(float) 60.0*(rawADCdata[2]/4095.0)*vrefint;
 800159a:	4b37      	ldr	r3, [pc, #220]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 800159c:	889b      	ldrh	r3, [r3, #4]
 800159e:	4618      	mov	r0, r3
 80015a0:	f7fe ffe8 	bl	8000574 <__aeabi_i2d>
 80015a4:	a332      	add	r3, pc, #200	@ (adr r3, 8001670 <HAL_ADC_ConvCpltCallback+0x210>)
 80015a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015aa:	f7ff f977 	bl	800089c <__aeabi_ddiv>
 80015ae:	4602      	mov	r2, r0
 80015b0:	460b      	mov	r3, r1
 80015b2:	4610      	mov	r0, r2
 80015b4:	4619      	mov	r1, r3
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	4b37      	ldr	r3, [pc, #220]	@ (8001698 <HAL_ADC_ConvCpltCallback+0x238>)
 80015bc:	f7ff f844 	bl	8000648 <__aeabi_dmul>
 80015c0:	4602      	mov	r2, r0
 80015c2:	460b      	mov	r3, r1
 80015c4:	4614      	mov	r4, r2
 80015c6:	461d      	mov	r5, r3
 80015c8:	4b2c      	ldr	r3, [pc, #176]	@ (800167c <HAL_ADC_ConvCpltCallback+0x21c>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4618      	mov	r0, r3
 80015ce:	f7fe ffe3 	bl	8000598 <__aeabi_f2d>
 80015d2:	4602      	mov	r2, r0
 80015d4:	460b      	mov	r3, r1
 80015d6:	4620      	mov	r0, r4
 80015d8:	4629      	mov	r1, r5
 80015da:	f7ff f835 	bl	8000648 <__aeabi_dmul>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4610      	mov	r0, r2
 80015e4:	4619      	mov	r1, r3
 80015e6:	f7ff fb27 	bl	8000c38 <__aeabi_d2f>
 80015ea:	4603      	mov	r3, r0
 80015ec:	4a2b      	ldr	r2, [pc, #172]	@ (800169c <HAL_ADC_ConvCpltCallback+0x23c>)
 80015ee:	6013      	str	r3, [r2, #0]
		power=(float) vbat*current;
 80015f0:	4b28      	ldr	r3, [pc, #160]	@ (8001694 <HAL_ADC_ConvCpltCallback+0x234>)
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	4b29      	ldr	r3, [pc, #164]	@ (800169c <HAL_ADC_ConvCpltCallback+0x23c>)
 80015f8:	edd3 7a00 	vldr	s15, [r3]
 80015fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001600:	4b27      	ldr	r3, [pc, #156]	@ (80016a0 <HAL_ADC_ConvCpltCallback+0x240>)
 8001602:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 4);
 8001606:	2204      	movs	r2, #4
 8001608:	491b      	ldr	r1, [pc, #108]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 800160a:	4826      	ldr	r0, [pc, #152]	@ (80016a4 <HAL_ADC_ConvCpltCallback+0x244>)
 800160c:	f002 fa7a 	bl	8003b04 <HAL_ADC_Start_DMA>

	}
	if(hadc->Instance==ADC2){
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a24      	ldr	r2, [pc, #144]	@ (80016a8 <HAL_ADC_ConvCpltCallback+0x248>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d11f      	bne.n	800165a <HAL_ADC_ConvCpltCallback+0x1fa>
		vexternalsensor=(float) (rawADCdata[4]/4095.0)*vrefint;
 800161a:	4b17      	ldr	r3, [pc, #92]	@ (8001678 <HAL_ADC_ConvCpltCallback+0x218>)
 800161c:	891b      	ldrh	r3, [r3, #8]
 800161e:	4618      	mov	r0, r3
 8001620:	f7fe ffa8 	bl	8000574 <__aeabi_i2d>
 8001624:	a312      	add	r3, pc, #72	@ (adr r3, 8001670 <HAL_ADC_ConvCpltCallback+0x210>)
 8001626:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162a:	f7ff f937 	bl	800089c <__aeabi_ddiv>
 800162e:	4602      	mov	r2, r0
 8001630:	460b      	mov	r3, r1
 8001632:	4610      	mov	r0, r2
 8001634:	4619      	mov	r1, r3
 8001636:	f7ff faff 	bl	8000c38 <__aeabi_d2f>
 800163a:	ee07 0a10 	vmov	s14, r0
 800163e:	4b0f      	ldr	r3, [pc, #60]	@ (800167c <HAL_ADC_ConvCpltCallback+0x21c>)
 8001640:	edd3 7a00 	vldr	s15, [r3]
 8001644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001648:	4b18      	ldr	r3, [pc, #96]	@ (80016ac <HAL_ADC_ConvCpltCallback+0x24c>)
 800164a:	edc3 7a00 	vstr	s15, [r3]
		HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 800164e:	4b18      	ldr	r3, [pc, #96]	@ (80016b0 <HAL_ADC_ConvCpltCallback+0x250>)
 8001650:	2201      	movs	r2, #1
 8001652:	4619      	mov	r1, r3
 8001654:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <HAL_ADC_ConvCpltCallback+0x254>)
 8001656:	f002 fa55 	bl	8003b04 <HAL_ADC_Start_DMA>

	}

}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001664:	f3af 8000 	nop.w
 8001668:	d70a3d70 	.word	0xd70a3d70
 800166c:	40b36323 	.word	0x40b36323
 8001670:	00000000 	.word	0x00000000
 8001674:	40affe00 	.word	0x40affe00
 8001678:	20000bbc 	.word	0x20000bbc
 800167c:	20000bcc 	.word	0x20000bcc
 8001680:	20000000 	.word	0x20000000
 8001684:	20000004 	.word	0x20000004
 8001688:	40590000 	.word	0x40590000
 800168c:	40080000 	.word	0x40080000
 8001690:	20000bc8 	.word	0x20000bc8
 8001694:	20000bd0 	.word	0x20000bd0
 8001698:	404e0000 	.word	0x404e0000
 800169c:	20000bd4 	.word	0x20000bd4
 80016a0:	20000bd8 	.word	0x20000bd8
 80016a4:	20000210 	.word	0x20000210
 80016a8:	50000100 	.word	0x50000100
 80016ac:	20000bdc 	.word	0x20000bdc
 80016b0:	20000bc4 	.word	0x20000bc4
 80016b4:	2000027c 	.word	0x2000027c

080016b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80016be:	4b22      	ldr	r3, [pc, #136]	@ (8001748 <MX_DMA_Init+0x90>)
 80016c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016c2:	4a21      	ldr	r2, [pc, #132]	@ (8001748 <MX_DMA_Init+0x90>)
 80016c4:	f043 0304 	orr.w	r3, r3, #4
 80016c8:	6493      	str	r3, [r2, #72]	@ 0x48
 80016ca:	4b1f      	ldr	r3, [pc, #124]	@ (8001748 <MX_DMA_Init+0x90>)
 80016cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80016d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <MX_DMA_Init+0x90>)
 80016d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016da:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <MX_DMA_Init+0x90>)
 80016dc:	f043 0301 	orr.w	r3, r3, #1
 80016e0:	6493      	str	r3, [r2, #72]	@ 0x48
 80016e2:	4b19      	ldr	r3, [pc, #100]	@ (8001748 <MX_DMA_Init+0x90>)
 80016e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	603b      	str	r3, [r7, #0]
 80016ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80016ee:	2200      	movs	r2, #0
 80016f0:	2100      	movs	r1, #0
 80016f2:	200b      	movs	r0, #11
 80016f4:	f003 f97d 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80016f8:	200b      	movs	r0, #11
 80016fa:	f003 f994 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80016fe:	2200      	movs	r2, #0
 8001700:	2100      	movs	r1, #0
 8001702:	200c      	movs	r0, #12
 8001704:	f003 f975 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001708:	200c      	movs	r0, #12
 800170a:	f003 f98c 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	200d      	movs	r0, #13
 8001714:	f003 f96d 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001718:	200d      	movs	r0, #13
 800171a:	f003 f984 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800171e:	2200      	movs	r2, #0
 8001720:	2100      	movs	r1, #0
 8001722:	200e      	movs	r0, #14
 8001724:	f003 f965 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8001728:	200e      	movs	r0, #14
 800172a:	f003 f97c 	bl	8004a26 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800172e:	2200      	movs	r2, #0
 8001730:	2100      	movs	r1, #0
 8001732:	200f      	movs	r0, #15
 8001734:	f003 f95d 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8001738:	200f      	movs	r0, #15
 800173a:	f003 f974 	bl	8004a26 <HAL_NVIC_EnableIRQ>

}
 800173e:	bf00      	nop
 8001740:	3708      	adds	r7, #8
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	40021000 	.word	0x40021000

0800174c <SELECT>:
static uint8_t CardType;                                /* SD 타입 0:MMC, 1:SDC, 2:Block addressing */
static uint8_t PowerFlag = 0;                           /* Power 상태 Flag */

/* SPI Chip Select */
static void SELECT(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 8001750:	2200      	movs	r2, #0
 8001752:	2110      	movs	r1, #16
 8001754:	4802      	ldr	r0, [pc, #8]	@ (8001760 <SELECT+0x14>)
 8001756:	f003 fe41 	bl	80053dc <HAL_GPIO_WritePin>
}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	48000800 	.word	0x48000800

08001764 <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 8001768:	2201      	movs	r2, #1
 800176a:	2110      	movs	r1, #16
 800176c:	4802      	ldr	r0, [pc, #8]	@ (8001778 <DESELECT+0x14>)
 800176e:	f003 fe35 	bl	80053dc <HAL_GPIO_WritePin>
}
 8001772:	bf00      	nop
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	48000800 	.word	0x48000800

0800177c <SPI_TxByte>:

/* SPI 데이터 전송 */
static void SPI_TxByte(BYTE data)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8001786:	bf00      	nop
 8001788:	4808      	ldr	r0, [pc, #32]	@ (80017ac <SPI_TxByte+0x30>)
 800178a:	f005 fc9b 	bl	80070c4 <HAL_SPI_GetState>
 800178e:	4603      	mov	r3, r0
 8001790:	2b01      	cmp	r3, #1
 8001792:	d1f9      	bne.n	8001788 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 8001794:	1df9      	adds	r1, r7, #7
 8001796:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800179a:	2201      	movs	r2, #1
 800179c:	4803      	ldr	r0, [pc, #12]	@ (80017ac <SPI_TxByte+0x30>)
 800179e:	f005 f8fc 	bl	800699a <HAL_SPI_Transmit>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	20000be0 	.word	0x20000be0

080017b0 <SPI_RxByte>:

/* SPI 데이터 송수신 리턴형 함수 */
static uint8_t SPI_RxByte(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 80017b6:	23ff      	movs	r3, #255	@ 0xff
 80017b8:	71fb      	strb	r3, [r7, #7]
  data = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	71bb      	strb	r3, [r7, #6]

  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 80017be:	bf00      	nop
 80017c0:	4809      	ldr	r0, [pc, #36]	@ (80017e8 <SPI_RxByte+0x38>)
 80017c2:	f005 fc7f 	bl	80070c4 <HAL_SPI_GetState>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d1f9      	bne.n	80017c0 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 80017cc:	1dba      	adds	r2, r7, #6
 80017ce:	1df9      	adds	r1, r7, #7
 80017d0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017d4:	9300      	str	r3, [sp, #0]
 80017d6:	2301      	movs	r3, #1
 80017d8:	4803      	ldr	r0, [pc, #12]	@ (80017e8 <SPI_RxByte+0x38>)
 80017da:	f005 fa54 	bl	8006c86 <HAL_SPI_TransmitReceive>

  return data;
 80017de:	79bb      	ldrb	r3, [r7, #6]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000be0 	.word	0x20000be0

080017ec <SPI_RxBytePtr>:

/* SPI 데이터 송수신 포인터형 함수 */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 80017f4:	f7ff ffdc 	bl	80017b0 <SPI_RxByte>
 80017f8:	4603      	mov	r3, r0
 80017fa:	461a      	mov	r2, r3
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	701a      	strb	r2, [r3, #0]
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}

08001808 <SD_ReadyWait>:

/* SD카드 Ready 대기 */
static uint8_t SD_ReadyWait(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
  uint8_t res;

  /* 500ms 카운터 준비 */
  Timer2 = 50;
 800180e:	4b0b      	ldr	r3, [pc, #44]	@ (800183c <SD_ReadyWait+0x34>)
 8001810:	2232      	movs	r2, #50	@ 0x32
 8001812:	701a      	strb	r2, [r3, #0]
  SPI_RxByte();
 8001814:	f7ff ffcc 	bl	80017b0 <SPI_RxByte>

  do
  {
    /* 0xFF 값이 수신될 때 까지 SPI 통신 */
    res = SPI_RxByte();
 8001818:	f7ff ffca 	bl	80017b0 <SPI_RxByte>
 800181c:	4603      	mov	r3, r0
 800181e:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8001820:	79fb      	ldrb	r3, [r7, #7]
 8001822:	2bff      	cmp	r3, #255	@ 0xff
 8001824:	d004      	beq.n	8001830 <SD_ReadyWait+0x28>
 8001826:	4b05      	ldr	r3, [pc, #20]	@ (800183c <SD_ReadyWait+0x34>)
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	b2db      	uxtb	r3, r3
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1f3      	bne.n	8001818 <SD_ReadyWait+0x10>

  return res;
 8001830:	79fb      	ldrb	r3, [r7, #7]
}
 8001832:	4618      	mov	r0, r3
 8001834:	3708      	adds	r7, #8
 8001836:	46bd      	mov	sp, r7
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	200003ad 	.word	0x200003ad

08001840 <SD_PowerOn>:

/* 전원 켜기 */
static void SD_PowerOn(void) 
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 8001846:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800184a:	617b      	str	r3, [r7, #20]

  /* Deselect 상태에서 SPI 메시지를 전송하여 대기상태로 만든다. */
  DESELECT();
 800184c:	f7ff ff8a 	bl	8001764 <DESELECT>

  for(int i = 0; i < 10; i++)
 8001850:	2300      	movs	r3, #0
 8001852:	613b      	str	r3, [r7, #16]
 8001854:	e005      	b.n	8001862 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8001856:	20ff      	movs	r0, #255	@ 0xff
 8001858:	f7ff ff90 	bl	800177c <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	3301      	adds	r3, #1
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]
 8001864:	2b09      	cmp	r3, #9
 8001866:	ddf6      	ble.n	8001856 <SD_PowerOn+0x16>
  }

  /* SPI Chips Select */
  SELECT();
 8001868:	f7ff ff70 	bl	800174c <SELECT>

  /* 초기 GO_IDLE_STATE 상태 전환 */
  cmd_arg[0] = (CMD0 | 0x40);
 800186c:	2340      	movs	r3, #64	@ 0x40
 800186e:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 8001870:	2300      	movs	r3, #0
 8001872:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 8001874:	2300      	movs	r3, #0
 8001876:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 8001878:	2300      	movs	r3, #0
 800187a:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 8001880:	2395      	movs	r3, #149	@ 0x95
 8001882:	727b      	strb	r3, [r7, #9]

  /* 명령 전송 */
  for (int i = 0; i < 6; i++)
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
 8001888:	e009      	b.n	800189e <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 800188a:	1d3a      	adds	r2, r7, #4
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	4413      	add	r3, r2
 8001890:	781b      	ldrb	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f7ff ff72 	bl	800177c <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	3301      	adds	r3, #1
 800189c:	60fb      	str	r3, [r7, #12]
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	ddf2      	ble.n	800188a <SD_PowerOn+0x4a>
  }

  /* 응답 대기 */
  while ((SPI_RxByte() != 0x01) && Count)
 80018a4:	e002      	b.n	80018ac <SD_PowerOn+0x6c>
  {
    Count--;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	3b01      	subs	r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 80018ac:	f7ff ff80 	bl	80017b0 <SPI_RxByte>
 80018b0:	4603      	mov	r3, r0
 80018b2:	2b01      	cmp	r3, #1
 80018b4:	d002      	beq.n	80018bc <SD_PowerOn+0x7c>
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f4      	bne.n	80018a6 <SD_PowerOn+0x66>
  }

  DESELECT();
 80018bc:	f7ff ff52 	bl	8001764 <DESELECT>
  SPI_TxByte(0XFF);
 80018c0:	20ff      	movs	r0, #255	@ 0xff
 80018c2:	f7ff ff5b 	bl	800177c <SPI_TxByte>

  PowerFlag = 1;
 80018c6:	4b03      	ldr	r3, [pc, #12]	@ (80018d4 <SD_PowerOn+0x94>)
 80018c8:	2201      	movs	r2, #1
 80018ca:	701a      	strb	r2, [r3, #0]
}
 80018cc:	bf00      	nop
 80018ce:	3718      	adds	r7, #24
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	200003af 	.word	0x200003af

080018d8 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 80018dc:	4b03      	ldr	r3, [pc, #12]	@ (80018ec <SD_PowerOff+0x14>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]
}
 80018e2:	bf00      	nop
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	200003af 	.word	0x200003af

080018f0 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 80018f4:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <SD_CheckPower+0x14>)
 80018f6:	781b      	ldrb	r3, [r3, #0]
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	46bd      	mov	sp, r7
 80018fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001900:	4770      	bx	lr
 8001902:	bf00      	nop
 8001904:	200003af 	.word	0x200003af

08001908 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b084      	sub	sp, #16
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
 8001910:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* 100ms 타이머 */
  Timer1 = 10;
 8001912:	4b17      	ldr	r3, [pc, #92]	@ (8001970 <SD_RxDataBlock+0x68>)
 8001914:	220a      	movs	r2, #10
 8001916:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */
  do
  {
    token = SPI_RxByte();
 8001918:	f7ff ff4a 	bl	80017b0 <SPI_RxByte>
 800191c:	4603      	mov	r3, r0
 800191e:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8001920:	7bfb      	ldrb	r3, [r7, #15]
 8001922:	2bff      	cmp	r3, #255	@ 0xff
 8001924:	d104      	bne.n	8001930 <SD_RxDataBlock+0x28>
 8001926:	4b12      	ldr	r3, [pc, #72]	@ (8001970 <SD_RxDataBlock+0x68>)
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	b2db      	uxtb	r3, r3
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f3      	bne.n	8001918 <SD_RxDataBlock+0x10>

  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 8001930:	7bfb      	ldrb	r3, [r7, #15]
 8001932:	2bfe      	cmp	r3, #254	@ 0xfe
 8001934:	d001      	beq.n	800193a <SD_RxDataBlock+0x32>
    return FALSE;
 8001936:	2300      	movs	r3, #0
 8001938:	e016      	b.n	8001968 <SD_RxDataBlock+0x60>

  /* 버퍼에 데이터 수신 */
  do
  {
    SPI_RxBytePtr(buff++);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff53 	bl	80017ec <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	1c5a      	adds	r2, r3, #1
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff ff4d 	bl	80017ec <SPI_RxBytePtr>
  } while(btr -= 2);
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	3b02      	subs	r3, #2
 8001956:	603b      	str	r3, [r7, #0]
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d1ed      	bne.n	800193a <SD_RxDataBlock+0x32>

  SPI_RxByte(); /* CRC 무시 */
 800195e:	f7ff ff27 	bl	80017b0 <SPI_RxByte>
  SPI_RxByte();
 8001962:	f7ff ff25 	bl	80017b0 <SPI_RxByte>

  return TRUE;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	3710      	adds	r7, #16
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200003ac 	.word	0x200003ac

08001974 <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b084      	sub	sp, #16
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 8001980:	2300      	movs	r3, #0
 8001982:	737b      	strb	r3, [r7, #13]

  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001984:	f7ff ff40 	bl	8001808 <SD_ReadyWait>
 8001988:	4603      	mov	r3, r0
 800198a:	2bff      	cmp	r3, #255	@ 0xff
 800198c:	d001      	beq.n	8001992 <SD_TxDataBlock+0x1e>
    return FALSE;
 800198e:	2300      	movs	r3, #0
 8001990:	e040      	b.n	8001a14 <SD_TxDataBlock+0xa0>

  /* 토큰 전송 */
  SPI_TxByte(token);
 8001992:	78fb      	ldrb	r3, [r7, #3]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff fef1 	bl	800177c <SPI_TxByte>

  /* 데이터 토큰인 경우 */
  if (token != 0xFD)
 800199a:	78fb      	ldrb	r3, [r7, #3]
 800199c:	2bfd      	cmp	r3, #253	@ 0xfd
 800199e:	d031      	beq.n	8001a04 <SD_TxDataBlock+0x90>
  {
    wc = 0;
 80019a0:	2300      	movs	r3, #0
 80019a2:	73bb      	strb	r3, [r7, #14]

    /* 512 바이트 데이터 전송 */
    do
    {
      SPI_TxByte(*buff++);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	1c5a      	adds	r2, r3, #1
 80019a8:	607a      	str	r2, [r7, #4]
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff fee5 	bl	800177c <SPI_TxByte>
      SPI_TxByte(*buff++);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	607a      	str	r2, [r7, #4]
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff fede 	bl	800177c <SPI_TxByte>
    } while (--wc);
 80019c0:	7bbb      	ldrb	r3, [r7, #14]
 80019c2:	3b01      	subs	r3, #1
 80019c4:	73bb      	strb	r3, [r7, #14]
 80019c6:	7bbb      	ldrb	r3, [r7, #14]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1eb      	bne.n	80019a4 <SD_TxDataBlock+0x30>

    SPI_RxByte();       /* CRC 무시 */
 80019cc:	f7ff fef0 	bl	80017b0 <SPI_RxByte>
    SPI_RxByte();
 80019d0:	f7ff feee 	bl	80017b0 <SPI_RxByte>

    /* 데이트 응답 수신 */
    while (i <= 64)
 80019d4:	e00b      	b.n	80019ee <SD_TxDataBlock+0x7a>
    {
      resp = SPI_RxByte();
 80019d6:	f7ff feeb 	bl	80017b0 <SPI_RxByte>
 80019da:	4603      	mov	r3, r0
 80019dc:	73fb      	strb	r3, [r7, #15]

      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05)
 80019de:	7bfb      	ldrb	r3, [r7, #15]
 80019e0:	f003 031f 	and.w	r3, r3, #31
 80019e4:	2b05      	cmp	r3, #5
 80019e6:	d006      	beq.n	80019f6 <SD_TxDataBlock+0x82>
        break;

      i++;
 80019e8:	7b7b      	ldrb	r3, [r7, #13]
 80019ea:	3301      	adds	r3, #1
 80019ec:	737b      	strb	r3, [r7, #13]
    while (i <= 64)
 80019ee:	7b7b      	ldrb	r3, [r7, #13]
 80019f0:	2b40      	cmp	r3, #64	@ 0x40
 80019f2:	d9f0      	bls.n	80019d6 <SD_TxDataBlock+0x62>
 80019f4:	e000      	b.n	80019f8 <SD_TxDataBlock+0x84>
        break;
 80019f6:	bf00      	nop
    }

    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 80019f8:	bf00      	nop
 80019fa:	f7ff fed9 	bl	80017b0 <SPI_RxByte>
 80019fe:	4603      	mov	r3, r0
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0fa      	beq.n	80019fa <SD_TxDataBlock+0x86>
  }

  if ((resp & 0x1F) == 0x05)
 8001a04:	7bfb      	ldrb	r3, [r7, #15]
 8001a06:	f003 031f 	and.w	r3, r3, #31
 8001a0a:	2b05      	cmp	r3, #5
 8001a0c:	d101      	bne.n	8001a12 <SD_TxDataBlock+0x9e>
    return TRUE;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e000      	b.n	8001a14 <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 8001a12:	2300      	movs	r3, #0
}
 8001a14:	4618      	mov	r0, r3
 8001a16:	3710      	adds	r7, #16
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <SD_SendCmd>:
#endif /* _READONLY */

static BYTE SD_SendCmd(BYTE cmd, DWORD arg)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	6039      	str	r1, [r7, #0]
 8001a26:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 8001a28:	f7ff feee 	bl	8001808 <SD_ReadyWait>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2bff      	cmp	r3, #255	@ 0xff
 8001a30:	d001      	beq.n	8001a36 <SD_SendCmd+0x1a>
    return 0xFF;
 8001a32:	23ff      	movs	r3, #255	@ 0xff
 8001a34:	e040      	b.n	8001ab8 <SD_SendCmd+0x9c>

  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 8001a36:	79fb      	ldrb	r3, [r7, #7]
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7ff fe9f 	bl	800177c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	0e1b      	lsrs	r3, r3, #24
 8001a42:	b2db      	uxtb	r3, r3
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff fe99 	bl	800177c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	0c1b      	lsrs	r3, r3, #16
 8001a4e:	b2db      	uxtb	r3, r3
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff fe93 	bl	800177c <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	0a1b      	lsrs	r3, r3, #8
 8001a5a:	b2db      	uxtb	r3, r3
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff fe8d 	bl	800177c <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fe88 	bl	800177c <SPI_TxByte>

  /* 명령별 CRC 준비 */
  crc = 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2b40      	cmp	r3, #64	@ 0x40
 8001a74:	d101      	bne.n	8001a7a <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 8001a76:	2395      	movs	r3, #149	@ 0x95
 8001a78:	73fb      	strb	r3, [r7, #15]

  if (cmd == CMD8)
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b48      	cmp	r3, #72	@ 0x48
 8001a7e:	d101      	bne.n	8001a84 <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 8001a80:	2387      	movs	r3, #135	@ 0x87
 8001a82:	73fb      	strb	r3, [r7, #15]

  /* CRC 전송 */
  SPI_TxByte(crc);
 8001a84:	7bfb      	ldrb	r3, [r7, #15]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f7ff fe78 	bl	800177c <SPI_TxByte>

  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8001a8c:	79fb      	ldrb	r3, [r7, #7]
 8001a8e:	2b4c      	cmp	r3, #76	@ 0x4c
 8001a90:	d101      	bne.n	8001a96 <SD_SendCmd+0x7a>
    SPI_RxByte();
 8001a92:	f7ff fe8d 	bl	80017b0 <SPI_RxByte>

  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10;
 8001a96:	230a      	movs	r3, #10
 8001a98:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8001a9a:	f7ff fe89 	bl	80017b0 <SPI_RxByte>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8001aa2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	da05      	bge.n	8001ab6 <SD_SendCmd+0x9a>
 8001aaa:	7bbb      	ldrb	r3, [r7, #14]
 8001aac:	3b01      	subs	r3, #1
 8001aae:	73bb      	strb	r3, [r7, #14]
 8001ab0:	7bbb      	ldrb	r3, [r7, #14]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d1f1      	bne.n	8001a9a <SD_SendCmd+0x7e>

  return res;
 8001ab6:	7b7b      	ldrb	r3, [r7, #13]
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8001ac0:	b590      	push	{r4, r7, lr}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* 한종류의 드라이브만 지원 */
  if(drv)
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <SD_disk_initialize+0x14>
    return STA_NOINIT;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e0d5      	b.n	8001c80 <SD_disk_initialize+0x1c0>

  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 8001ad4:	4b6c      	ldr	r3, [pc, #432]	@ (8001c88 <SD_disk_initialize+0x1c8>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	b2db      	uxtb	r3, r3
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d003      	beq.n	8001aea <SD_disk_initialize+0x2a>
    return Stat;
 8001ae2:	4b69      	ldr	r3, [pc, #420]	@ (8001c88 <SD_disk_initialize+0x1c8>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	e0ca      	b.n	8001c80 <SD_disk_initialize+0x1c0>

  /* SD카드 Power On */
  SD_PowerOn();
 8001aea:	f7ff fea9 	bl	8001840 <SD_PowerOn>

  /* SPI 통신을 위해 Chip Select */
  SELECT();
 8001aee:	f7ff fe2d 	bl	800174c <SELECT>

  /* SD카드 타입변수 초기화 */
  type = 0;
 8001af2:	2300      	movs	r3, #0
 8001af4:	73bb      	strb	r3, [r7, #14]

  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1)
 8001af6:	2100      	movs	r1, #0
 8001af8:	2040      	movs	r0, #64	@ 0x40
 8001afa:	f7ff ff8f 	bl	8001a1c <SD_SendCmd>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	f040 80a5 	bne.w	8001c50 <SD_disk_initialize+0x190>
  {
    /* 타이머 1초 설정 */
    Timer1 = 100;
 8001b06:	4b61      	ldr	r3, [pc, #388]	@ (8001c8c <SD_disk_initialize+0x1cc>)
 8001b08:	2264      	movs	r2, #100	@ 0x64
 8001b0a:	701a      	strb	r2, [r3, #0]

    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8001b0c:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001b10:	2048      	movs	r0, #72	@ 0x48
 8001b12:	f7ff ff83 	bl	8001a1c <SD_SendCmd>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b01      	cmp	r3, #1
 8001b1a:	d158      	bne.n	8001bce <SD_disk_initialize+0x10e>
    {
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	73fb      	strb	r3, [r7, #15]
 8001b20:	e00c      	b.n	8001b3c <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 8001b22:	7bfc      	ldrb	r4, [r7, #15]
 8001b24:	f7ff fe44 	bl	80017b0 <SPI_RxByte>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	f104 0310 	add.w	r3, r4, #16
 8001b30:	443b      	add	r3, r7
 8001b32:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8001b36:	7bfb      	ldrb	r3, [r7, #15]
 8001b38:	3301      	adds	r3, #1
 8001b3a:	73fb      	strb	r3, [r7, #15]
 8001b3c:	7bfb      	ldrb	r3, [r7, #15]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d9ef      	bls.n	8001b22 <SD_disk_initialize+0x62>
      }

      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001b42:	7abb      	ldrb	r3, [r7, #10]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	f040 8083 	bne.w	8001c50 <SD_disk_initialize+0x190>
 8001b4a:	7afb      	ldrb	r3, [r7, #11]
 8001b4c:	2baa      	cmp	r3, #170	@ 0xaa
 8001b4e:	d17f      	bne.n	8001c50 <SD_disk_initialize+0x190>
      {
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 8001b50:	2100      	movs	r1, #0
 8001b52:	2077      	movs	r0, #119	@ 0x77
 8001b54:	f7ff ff62 	bl	8001a1c <SD_SendCmd>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d807      	bhi.n	8001b6e <SD_disk_initialize+0xae>
 8001b5e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001b62:	2069      	movs	r0, #105	@ 0x69
 8001b64:	f7ff ff5a 	bl	8001a1c <SD_SendCmd>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d005      	beq.n	8001b7a <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 8001b6e:	4b47      	ldr	r3, [pc, #284]	@ (8001c8c <SD_disk_initialize+0x1cc>)
 8001b70:	781b      	ldrb	r3, [r3, #0]
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d1eb      	bne.n	8001b50 <SD_disk_initialize+0x90>
 8001b78:	e000      	b.n	8001b7c <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 8001b7a:	bf00      	nop

        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8001b7c:	4b43      	ldr	r3, [pc, #268]	@ (8001c8c <SD_disk_initialize+0x1cc>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d064      	beq.n	8001c50 <SD_disk_initialize+0x190>
 8001b86:	2100      	movs	r1, #0
 8001b88:	207a      	movs	r0, #122	@ 0x7a
 8001b8a:	f7ff ff47 	bl	8001a1c <SD_SendCmd>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d15d      	bne.n	8001c50 <SD_disk_initialize+0x190>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
 8001b98:	e00c      	b.n	8001bb4 <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8001b9a:	7bfc      	ldrb	r4, [r7, #15]
 8001b9c:	f7ff fe08 	bl	80017b0 <SPI_RxByte>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	461a      	mov	r2, r3
 8001ba4:	f104 0310 	add.w	r3, r4, #16
 8001ba8:	443b      	add	r3, r7
 8001baa:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001bae:	7bfb      	ldrb	r3, [r7, #15]
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	73fb      	strb	r3, [r7, #15]
 8001bb4:	7bfb      	ldrb	r3, [r7, #15]
 8001bb6:	2b03      	cmp	r3, #3
 8001bb8:	d9ef      	bls.n	8001b9a <SD_disk_initialize+0xda>
          }

          type = (ocr[0] & 0x40) ? 6 : 2;
 8001bba:	7a3b      	ldrb	r3, [r7, #8]
 8001bbc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d001      	beq.n	8001bc8 <SD_disk_initialize+0x108>
 8001bc4:	2306      	movs	r3, #6
 8001bc6:	e000      	b.n	8001bca <SD_disk_initialize+0x10a>
 8001bc8:	2302      	movs	r3, #2
 8001bca:	73bb      	strb	r3, [r7, #14]
 8001bcc:	e040      	b.n	8001c50 <SD_disk_initialize+0x190>
      }
    }
    else
    {
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8001bce:	2100      	movs	r1, #0
 8001bd0:	2077      	movs	r0, #119	@ 0x77
 8001bd2:	f7ff ff23 	bl	8001a1c <SD_SendCmd>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d808      	bhi.n	8001bee <SD_disk_initialize+0x12e>
 8001bdc:	2100      	movs	r1, #0
 8001bde:	2069      	movs	r0, #105	@ 0x69
 8001be0:	f7ff ff1c 	bl	8001a1c <SD_SendCmd>
 8001be4:	4603      	mov	r3, r0
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d801      	bhi.n	8001bee <SD_disk_initialize+0x12e>
 8001bea:	2302      	movs	r3, #2
 8001bec:	e000      	b.n	8001bf0 <SD_disk_initialize+0x130>
 8001bee:	2301      	movs	r3, #1
 8001bf0:	73bb      	strb	r3, [r7, #14]

      do {
        if (type == 2)
 8001bf2:	7bbb      	ldrb	r3, [r7, #14]
 8001bf4:	2b02      	cmp	r3, #2
 8001bf6:	d10e      	bne.n	8001c16 <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	2077      	movs	r0, #119	@ 0x77
 8001bfc:	f7ff ff0e 	bl	8001a1c <SD_SendCmd>
 8001c00:	4603      	mov	r3, r0
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d80e      	bhi.n	8001c24 <SD_disk_initialize+0x164>
 8001c06:	2100      	movs	r1, #0
 8001c08:	2069      	movs	r0, #105	@ 0x69
 8001c0a:	f7ff ff07 	bl	8001a1c <SD_SendCmd>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d107      	bne.n	8001c24 <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 8001c14:	e00d      	b.n	8001c32 <SD_disk_initialize+0x172>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 8001c16:	2100      	movs	r1, #0
 8001c18:	2041      	movs	r0, #65	@ 0x41
 8001c1a:	f7ff feff 	bl	8001a1c <SD_SendCmd>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d005      	beq.n	8001c30 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 8001c24:	4b19      	ldr	r3, [pc, #100]	@ (8001c8c <SD_disk_initialize+0x1cc>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1e1      	bne.n	8001bf2 <SD_disk_initialize+0x132>
 8001c2e:	e000      	b.n	8001c32 <SD_disk_initialize+0x172>
            break; /* CMD1 */
 8001c30:	bf00      	nop

      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0)
 8001c32:	4b16      	ldr	r3, [pc, #88]	@ (8001c8c <SD_disk_initialize+0x1cc>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d007      	beq.n	8001c4c <SD_disk_initialize+0x18c>
 8001c3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001c40:	2050      	movs	r0, #80	@ 0x50
 8001c42:	f7ff feeb 	bl	8001a1c <SD_SendCmd>
 8001c46:	4603      	mov	r3, r0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d001      	beq.n	8001c50 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73bb      	strb	r3, [r7, #14]
      }
    }
  }

  CardType = type;
 8001c50:	4a0f      	ldr	r2, [pc, #60]	@ (8001c90 <SD_disk_initialize+0x1d0>)
 8001c52:	7bbb      	ldrb	r3, [r7, #14]
 8001c54:	7013      	strb	r3, [r2, #0]

  DESELECT();
 8001c56:	f7ff fd85 	bl	8001764 <DESELECT>

  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 8001c5a:	f7ff fda9 	bl	80017b0 <SPI_RxByte>

  if (type)
 8001c5e:	7bbb      	ldrb	r3, [r7, #14]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d008      	beq.n	8001c76 <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT;
 8001c64:	4b08      	ldr	r3, [pc, #32]	@ (8001c88 <SD_disk_initialize+0x1c8>)
 8001c66:	781b      	ldrb	r3, [r3, #0]
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	f023 0301 	bic.w	r3, r3, #1
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <SD_disk_initialize+0x1c8>)
 8001c72:	701a      	strb	r2, [r3, #0]
 8001c74:	e001      	b.n	8001c7a <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8001c76:	f7ff fe2f 	bl	80018d8 <SD_PowerOff>
  }

  return Stat;
 8001c7a:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <SD_disk_initialize+0x1c8>)
 8001c7c:	781b      	ldrb	r3, [r3, #0]
 8001c7e:	b2db      	uxtb	r3, r3
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd90      	pop	{r4, r7, pc}
 8001c88:	20000008 	.word	0x20000008
 8001c8c:	200003ac 	.word	0x200003ac
 8001c90:	200003ae 	.word	0x200003ae

08001c94 <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8001c9e:	79fb      	ldrb	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SD_disk_status+0x14>
    return STA_NOINIT;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e002      	b.n	8001cae <SD_disk_status+0x1a>

  return Stat;
 8001ca8:	4b04      	ldr	r3, [pc, #16]	@ (8001cbc <SD_disk_status+0x28>)
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b2db      	uxtb	r3, r3
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr
 8001cba:	bf00      	nop
 8001cbc:	20000008 	.word	0x20000008

08001cc0 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60b9      	str	r1, [r7, #8]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	4603      	mov	r3, r0
 8001cce:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001cd0:	7bfb      	ldrb	r3, [r7, #15]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d102      	bne.n	8001cdc <SD_disk_read+0x1c>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d101      	bne.n	8001ce0 <SD_disk_read+0x20>
    return RES_PARERR;
 8001cdc:	2304      	movs	r3, #4
 8001cde:	e051      	b.n	8001d84 <SD_disk_read+0xc4>

  if (Stat & STA_NOINIT)
 8001ce0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d8c <SD_disk_read+0xcc>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <SD_disk_read+0x32>
    return RES_NOTRDY;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e048      	b.n	8001d84 <SD_disk_read+0xc4>

  if (!(CardType & 4))
 8001cf2:	4b27      	ldr	r3, [pc, #156]	@ (8001d90 <SD_disk_read+0xd0>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d102      	bne.n	8001d04 <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	025b      	lsls	r3, r3, #9
 8001d02:	607b      	str	r3, [r7, #4]

  SELECT();
 8001d04:	f7ff fd22 	bl	800174c <SELECT>

  if (count == 1)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d111      	bne.n	8001d32 <SD_disk_read+0x72>
  {
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8001d0e:	6879      	ldr	r1, [r7, #4]
 8001d10:	2051      	movs	r0, #81	@ 0x51
 8001d12:	f7ff fe83 	bl	8001a1c <SD_SendCmd>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d129      	bne.n	8001d70 <SD_disk_read+0xb0>
 8001d1c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d20:	68b8      	ldr	r0, [r7, #8]
 8001d22:	f7ff fdf1 	bl	8001908 <SD_RxDataBlock>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d021      	beq.n	8001d70 <SD_disk_read+0xb0>
      count = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	603b      	str	r3, [r7, #0]
 8001d30:	e01e      	b.n	8001d70 <SD_disk_read+0xb0>
  }
  else
  {
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	2052      	movs	r0, #82	@ 0x52
 8001d36:	f7ff fe71 	bl	8001a1c <SD_SendCmd>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d117      	bne.n	8001d70 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512))
 8001d40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d44:	68b8      	ldr	r0, [r7, #8]
 8001d46:	f7ff fddf 	bl	8001908 <SD_RxDataBlock>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d00a      	beq.n	8001d66 <SD_disk_read+0xa6>
          break;

        buff += 512;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001d56:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	603b      	str	r3, [r7, #0]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d1ed      	bne.n	8001d40 <SD_disk_read+0x80>
 8001d64:	e000      	b.n	8001d68 <SD_disk_read+0xa8>
          break;
 8001d66:	bf00      	nop

      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0);
 8001d68:	2100      	movs	r1, #0
 8001d6a:	204c      	movs	r0, #76	@ 0x4c
 8001d6c:	f7ff fe56 	bl	8001a1c <SD_SendCmd>
    }
  }

  DESELECT();
 8001d70:	f7ff fcf8 	bl	8001764 <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8001d74:	f7ff fd1c 	bl	80017b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	bf14      	ite	ne
 8001d7e:	2301      	movne	r3, #1
 8001d80:	2300      	moveq	r3, #0
 8001d82:	b2db      	uxtb	r3, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	3710      	adds	r7, #16
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	20000008 	.word	0x20000008
 8001d90:	200003ae 	.word	0x200003ae

08001d94 <SD_disk_write>:
/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60b9      	str	r1, [r7, #8]
 8001d9c:	607a      	str	r2, [r7, #4]
 8001d9e:	603b      	str	r3, [r7, #0]
 8001da0:	4603      	mov	r3, r0
 8001da2:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8001da4:	7bfb      	ldrb	r3, [r7, #15]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d102      	bne.n	8001db0 <SD_disk_write+0x1c>
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <SD_disk_write+0x20>
    return RES_PARERR;
 8001db0:	2304      	movs	r3, #4
 8001db2:	e06b      	b.n	8001e8c <SD_disk_write+0xf8>

  if (Stat & STA_NOINIT)
 8001db4:	4b37      	ldr	r3, [pc, #220]	@ (8001e94 <SD_disk_write+0x100>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <SD_disk_write+0x32>
    return RES_NOTRDY;
 8001dc2:	2303      	movs	r3, #3
 8001dc4:	e062      	b.n	8001e8c <SD_disk_write+0xf8>

  if (Stat & STA_PROTECT)
 8001dc6:	4b33      	ldr	r3, [pc, #204]	@ (8001e94 <SD_disk_write+0x100>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	f003 0304 	and.w	r3, r3, #4
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d001      	beq.n	8001dd8 <SD_disk_write+0x44>
    return RES_WRPRT;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	e059      	b.n	8001e8c <SD_disk_write+0xf8>

  if (!(CardType & 4))
 8001dd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e98 <SD_disk_write+0x104>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d102      	bne.n	8001dea <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	025b      	lsls	r3, r3, #9
 8001de8:	607b      	str	r3, [r7, #4]

  SELECT();
 8001dea:	f7ff fcaf 	bl	800174c <SELECT>

  if (count == 1)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d110      	bne.n	8001e16 <SD_disk_write+0x82>
  {
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001df4:	6879      	ldr	r1, [r7, #4]
 8001df6:	2058      	movs	r0, #88	@ 0x58
 8001df8:	f7ff fe10 	bl	8001a1c <SD_SendCmd>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d13a      	bne.n	8001e78 <SD_disk_write+0xe4>
 8001e02:	21fe      	movs	r1, #254	@ 0xfe
 8001e04:	68b8      	ldr	r0, [r7, #8]
 8001e06:	f7ff fdb5 	bl	8001974 <SD_TxDataBlock>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d033      	beq.n	8001e78 <SD_disk_write+0xe4>
      count = 0;
 8001e10:	2300      	movs	r3, #0
 8001e12:	603b      	str	r3, [r7, #0]
 8001e14:	e030      	b.n	8001e78 <SD_disk_write+0xe4>
  }
  else
  {
    /* 다중 블록 쓰기 */
    if (CardType & 2)
 8001e16:	4b20      	ldr	r3, [pc, #128]	@ (8001e98 <SD_disk_write+0x104>)
 8001e18:	781b      	ldrb	r3, [r3, #0]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d007      	beq.n	8001e32 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001e22:	2100      	movs	r1, #0
 8001e24:	2077      	movs	r0, #119	@ 0x77
 8001e26:	f7ff fdf9 	bl	8001a1c <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001e2a:	6839      	ldr	r1, [r7, #0]
 8001e2c:	2057      	movs	r0, #87	@ 0x57
 8001e2e:	f7ff fdf5 	bl	8001a1c <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001e32:	6879      	ldr	r1, [r7, #4]
 8001e34:	2059      	movs	r0, #89	@ 0x59
 8001e36:	f7ff fdf1 	bl	8001a1c <SD_SendCmd>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d11b      	bne.n	8001e78 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8001e40:	21fc      	movs	r1, #252	@ 0xfc
 8001e42:	68b8      	ldr	r0, [r7, #8]
 8001e44:	f7ff fd96 	bl	8001974 <SD_TxDataBlock>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d00a      	beq.n	8001e64 <SD_disk_write+0xd0>
          break;

        buff += 512;
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001e54:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1ee      	bne.n	8001e40 <SD_disk_write+0xac>
 8001e62:	e000      	b.n	8001e66 <SD_disk_write+0xd2>
          break;
 8001e64:	bf00      	nop

      if(!SD_TxDataBlock(0, 0xFD))
 8001e66:	21fd      	movs	r1, #253	@ 0xfd
 8001e68:	2000      	movs	r0, #0
 8001e6a:	f7ff fd83 	bl	8001974 <SD_TxDataBlock>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d101      	bne.n	8001e78 <SD_disk_write+0xe4>
      {
        count = 1;
 8001e74:	2301      	movs	r3, #1
 8001e76:	603b      	str	r3, [r7, #0]
      }
    }
  }

  DESELECT();
 8001e78:	f7ff fc74 	bl	8001764 <DESELECT>
  SPI_RxByte();
 8001e7c:	f7ff fc98 	bl	80017b0 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	bf14      	ite	ne
 8001e86:	2301      	movne	r3, #1
 8001e88:	2300      	moveq	r3, #0
 8001e8a:	b2db      	uxtb	r3, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	3710      	adds	r7, #16
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bd80      	pop	{r7, pc}
 8001e94:	20000008 	.word	0x20000008
 8001e98:	200003ae 	.word	0x200003ae

08001e9c <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8001e9c:	b590      	push	{r4, r7, lr}
 8001e9e:	b08b      	sub	sp, #44	@ 0x2c
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	603a      	str	r2, [r7, #0]
 8001ea6:	71fb      	strb	r3, [r7, #7]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	623b      	str	r3, [r7, #32]
  WORD csize;

  if (drv)
 8001eb0:	79fb      	ldrb	r3, [r7, #7]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8001eb6:	2304      	movs	r3, #4
 8001eb8:	e119      	b.n	80020ee <SD_disk_ioctl+0x252>

  res = RES_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001ec0:	79bb      	ldrb	r3, [r7, #6]
 8001ec2:	2b05      	cmp	r3, #5
 8001ec4:	d129      	bne.n	8001f1a <SD_disk_ioctl+0x7e>
  {
    switch (*ptr)
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d017      	beq.n	8001efe <SD_disk_ioctl+0x62>
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	dc1f      	bgt.n	8001f12 <SD_disk_ioctl+0x76>
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d002      	beq.n	8001edc <SD_disk_ioctl+0x40>
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d00b      	beq.n	8001ef2 <SD_disk_ioctl+0x56>
 8001eda:	e01a      	b.n	8001f12 <SD_disk_ioctl+0x76>
    {
    case 0:
      if (SD_CheckPower())
 8001edc:	f7ff fd08 	bl	80018f0 <SD_CheckPower>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <SD_disk_ioctl+0x4e>
        SD_PowerOff();          /* Power Off */
 8001ee6:	f7ff fcf7 	bl	80018d8 <SD_PowerOff>
      res = RES_OK;
 8001eea:	2300      	movs	r3, #0
 8001eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001ef0:	e0fb      	b.n	80020ea <SD_disk_ioctl+0x24e>
    case 1:
      SD_PowerOn();             /* Power On */
 8001ef2:	f7ff fca5 	bl	8001840 <SD_PowerOn>
      res = RES_OK;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001efc:	e0f5      	b.n	80020ea <SD_disk_ioctl+0x24e>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8001efe:	6a3b      	ldr	r3, [r7, #32]
 8001f00:	1c5c      	adds	r4, r3, #1
 8001f02:	f7ff fcf5 	bl	80018f0 <SD_CheckPower>
 8001f06:	4603      	mov	r3, r0
 8001f08:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001f10:	e0eb      	b.n	80020ea <SD_disk_ioctl+0x24e>
    default:
      res = RES_PARERR;
 8001f12:	2304      	movs	r3, #4
 8001f14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001f18:	e0e7      	b.n	80020ea <SD_disk_ioctl+0x24e>
    }
  }
  else
  {
    if (Stat & STA_NOINIT)
 8001f1a:	4b77      	ldr	r3, [pc, #476]	@ (80020f8 <SD_disk_ioctl+0x25c>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	f003 0301 	and.w	r3, r3, #1
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d001      	beq.n	8001f2c <SD_disk_ioctl+0x90>
      return RES_NOTRDY;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e0e0      	b.n	80020ee <SD_disk_ioctl+0x252>

    SELECT();
 8001f2c:	f7ff fc0e 	bl	800174c <SELECT>

    switch (ctrl)
 8001f30:	79bb      	ldrb	r3, [r7, #6]
 8001f32:	2b0d      	cmp	r3, #13
 8001f34:	f200 80ca 	bhi.w	80020cc <SD_disk_ioctl+0x230>
 8001f38:	a201      	add	r2, pc, #4	@ (adr r2, 8001f40 <SD_disk_ioctl+0xa4>)
 8001f3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f3e:	bf00      	nop
 8001f40:	08002037 	.word	0x08002037
 8001f44:	08001f79 	.word	0x08001f79
 8001f48:	08002027 	.word	0x08002027
 8001f4c:	080020cd 	.word	0x080020cd
 8001f50:	080020cd 	.word	0x080020cd
 8001f54:	080020cd 	.word	0x080020cd
 8001f58:	080020cd 	.word	0x080020cd
 8001f5c:	080020cd 	.word	0x080020cd
 8001f60:	080020cd 	.word	0x080020cd
 8001f64:	080020cd 	.word	0x080020cd
 8001f68:	080020cd 	.word	0x080020cd
 8001f6c:	08002049 	.word	0x08002049
 8001f70:	0800206d 	.word	0x0800206d
 8001f74:	08002091 	.word	0x08002091
    {
    case GET_SECTOR_COUNT:
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8001f78:	2100      	movs	r1, #0
 8001f7a:	2049      	movs	r0, #73	@ 0x49
 8001f7c:	f7ff fd4e 	bl	8001a1c <SD_SendCmd>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f040 80a6 	bne.w	80020d4 <SD_disk_ioctl+0x238>
 8001f88:	f107 030c 	add.w	r3, r7, #12
 8001f8c:	2110      	movs	r1, #16
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fcba 	bl	8001908 <SD_RxDataBlock>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f000 809c 	beq.w	80020d4 <SD_disk_ioctl+0x238>
      {
        if ((csd[0] >> 6) == 1)
 8001f9c:	7b3b      	ldrb	r3, [r7, #12]
 8001f9e:	099b      	lsrs	r3, r3, #6
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b01      	cmp	r3, #1
 8001fa4:	d10d      	bne.n	8001fc2 <SD_disk_ioctl+0x126>
        {
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8001fa6:	7d7b      	ldrb	r3, [r7, #21]
 8001fa8:	461a      	mov	r2, r3
 8001faa:	7d3b      	ldrb	r3, [r7, #20]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001fb8:	8bfb      	ldrh	r3, [r7, #30]
 8001fba:	029a      	lsls	r2, r3, #10
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	e02d      	b.n	800201e <SD_disk_ioctl+0x182>
        }
        else
        {
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001fc2:	7c7b      	ldrb	r3, [r7, #17]
 8001fc4:	f003 030f 	and.w	r3, r3, #15
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	7dbb      	ldrb	r3, [r7, #22]
 8001fcc:	09db      	lsrs	r3, r3, #7
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	7d7b      	ldrb	r3, [r7, #21]
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f003 0306 	and.w	r3, r3, #6
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001fea:	7d3b      	ldrb	r3, [r7, #20]
 8001fec:	099b      	lsrs	r3, r3, #6
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	7cfb      	ldrb	r3, [r7, #19]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	4413      	add	r3, r2
 8001ffa:	b29a      	uxth	r2, r3
 8001ffc:	7cbb      	ldrb	r3, [r7, #18]
 8001ffe:	029b      	lsls	r3, r3, #10
 8002000:	b29b      	uxth	r3, r3
 8002002:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002006:	b29b      	uxth	r3, r3
 8002008:	4413      	add	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	3301      	adds	r3, #1
 800200e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8002010:	8bfa      	ldrh	r2, [r7, #30]
 8002012:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8002016:	3b09      	subs	r3, #9
 8002018:	409a      	lsls	r2, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	601a      	str	r2, [r3, #0]
        }

        res = RES_OK;
 800201e:	2300      	movs	r3, #0
 8002020:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8002024:	e056      	b.n	80020d4 <SD_disk_ioctl+0x238>

    case GET_SECTOR_SIZE:
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800202c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800202e:	2300      	movs	r3, #0
 8002030:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002034:	e055      	b.n	80020e2 <SD_disk_ioctl+0x246>

    case CTRL_SYNC:
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8002036:	f7ff fbe7 	bl	8001808 <SD_ReadyWait>
 800203a:	4603      	mov	r3, r0
 800203c:	2bff      	cmp	r3, #255	@ 0xff
 800203e:	d14b      	bne.n	80020d8 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8002040:	2300      	movs	r3, #0
 8002042:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8002046:	e047      	b.n	80020d8 <SD_disk_ioctl+0x23c>

    case MMC_GET_CSD:
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8002048:	2100      	movs	r1, #0
 800204a:	2049      	movs	r0, #73	@ 0x49
 800204c:	f7ff fce6 	bl	8001a1c <SD_SendCmd>
 8002050:	4603      	mov	r3, r0
 8002052:	2b00      	cmp	r3, #0
 8002054:	d142      	bne.n	80020dc <SD_disk_ioctl+0x240>
 8002056:	2110      	movs	r1, #16
 8002058:	6a38      	ldr	r0, [r7, #32]
 800205a:	f7ff fc55 	bl	8001908 <SD_RxDataBlock>
 800205e:	4603      	mov	r3, r0
 8002060:	2b00      	cmp	r3, #0
 8002062:	d03b      	beq.n	80020dc <SD_disk_ioctl+0x240>
        res = RES_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800206a:	e037      	b.n	80020dc <SD_disk_ioctl+0x240>

    case MMC_GET_CID:
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 800206c:	2100      	movs	r1, #0
 800206e:	204a      	movs	r0, #74	@ 0x4a
 8002070:	f7ff fcd4 	bl	8001a1c <SD_SendCmd>
 8002074:	4603      	mov	r3, r0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d132      	bne.n	80020e0 <SD_disk_ioctl+0x244>
 800207a:	2110      	movs	r1, #16
 800207c:	6a38      	ldr	r0, [r7, #32]
 800207e:	f7ff fc43 	bl	8001908 <SD_RxDataBlock>
 8002082:	4603      	mov	r3, r0
 8002084:	2b00      	cmp	r3, #0
 8002086:	d02b      	beq.n	80020e0 <SD_disk_ioctl+0x244>
        res = RES_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800208e:	e027      	b.n	80020e0 <SD_disk_ioctl+0x244>

    case MMC_GET_OCR:
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0)
 8002090:	2100      	movs	r1, #0
 8002092:	207a      	movs	r0, #122	@ 0x7a
 8002094:	f7ff fcc2 	bl	8001a1c <SD_SendCmd>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d116      	bne.n	80020cc <SD_disk_ioctl+0x230>
      {
        for (n = 0; n < 4; n++)
 800209e:	2300      	movs	r3, #0
 80020a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020a4:	e00b      	b.n	80020be <SD_disk_ioctl+0x222>
        {
          *ptr++ = SPI_RxByte();
 80020a6:	6a3c      	ldr	r4, [r7, #32]
 80020a8:	1c63      	adds	r3, r4, #1
 80020aa:	623b      	str	r3, [r7, #32]
 80020ac:	f7ff fb80 	bl	80017b0 <SPI_RxByte>
 80020b0:	4603      	mov	r3, r0
 80020b2:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 80020b4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80020b8:	3301      	adds	r3, #1
 80020ba:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80020be:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80020c2:	2b03      	cmp	r3, #3
 80020c4:	d9ef      	bls.n	80020a6 <SD_disk_ioctl+0x20a>
        }

        res = RES_OK;
 80020c6:	2300      	movs	r3, #0
 80020c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

    default:
      res = RES_PARERR;
 80020cc:	2304      	movs	r3, #4
 80020ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80020d2:	e006      	b.n	80020e2 <SD_disk_ioctl+0x246>
      break;
 80020d4:	bf00      	nop
 80020d6:	e004      	b.n	80020e2 <SD_disk_ioctl+0x246>
      break;
 80020d8:	bf00      	nop
 80020da:	e002      	b.n	80020e2 <SD_disk_ioctl+0x246>
      break;
 80020dc:	bf00      	nop
 80020de:	e000      	b.n	80020e2 <SD_disk_ioctl+0x246>
      break;
 80020e0:	bf00      	nop
    }

    DESELECT();
 80020e2:	f7ff fb3f 	bl	8001764 <DESELECT>
    SPI_RxByte();
 80020e6:	f7ff fb63 	bl	80017b0 <SPI_RxByte>
  }

  return res;
 80020ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	372c      	adds	r7, #44	@ 0x2c
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd90      	pop	{r4, r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20000008 	.word	0x20000008

080020fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	@ 0x28
 8002100:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002102:	f107 0314 	add.w	r3, r7, #20
 8002106:	2200      	movs	r2, #0
 8002108:	601a      	str	r2, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
 800210c:	609a      	str	r2, [r3, #8]
 800210e:	60da      	str	r2, [r3, #12]
 8002110:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002112:	4b3c      	ldr	r3, [pc, #240]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002116:	4a3b      	ldr	r2, [pc, #236]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002118:	f043 0320 	orr.w	r3, r3, #32
 800211c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211e:	4b39      	ldr	r3, [pc, #228]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002122:	f003 0320 	and.w	r3, r3, #32
 8002126:	613b      	str	r3, [r7, #16]
 8002128:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800212a:	4b36      	ldr	r3, [pc, #216]	@ (8002204 <MX_GPIO_Init+0x108>)
 800212c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212e:	4a35      	ldr	r2, [pc, #212]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002130:	f043 0301 	orr.w	r3, r3, #1
 8002134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002136:	4b33      	ldr	r3, [pc, #204]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002142:	4b30      	ldr	r3, [pc, #192]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002144:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002146:	4a2f      	ldr	r2, [pc, #188]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002148:	f043 0304 	orr.w	r3, r3, #4
 800214c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800214e:	4b2d      	ldr	r3, [pc, #180]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002150:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002152:	f003 0304 	and.w	r3, r3, #4
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800215a:	4b2a      	ldr	r3, [pc, #168]	@ (8002204 <MX_GPIO_Init+0x108>)
 800215c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800215e:	4a29      	ldr	r2, [pc, #164]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002166:	4b27      	ldr	r3, [pc, #156]	@ (8002204 <MX_GPIO_Init+0x108>)
 8002168:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);
 8002172:	2200      	movs	r2, #0
 8002174:	2110      	movs	r1, #16
 8002176:	4824      	ldr	r0, [pc, #144]	@ (8002208 <MX_GPIO_Init+0x10c>)
 8002178:	f003 f930 	bl	80053dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800217c:	2200      	movs	r2, #0
 800217e:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8002182:	4822      	ldr	r0, [pc, #136]	@ (800220c <MX_GPIO_Init+0x110>)
 8002184:	f003 f92a 	bl	80053dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002188:	2310      	movs	r3, #16
 800218a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218c:	2301      	movs	r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002194:	2300      	movs	r3, #0
 8002196:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	481a      	ldr	r0, [pc, #104]	@ (8002208 <MX_GPIO_Init+0x10c>)
 80021a0:	f002 ff9a 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80021a4:	2306      	movs	r3, #6
 80021a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4814      	ldr	r0, [pc, #80]	@ (800220c <MX_GPIO_Init+0x110>)
 80021ba:	f002 ff8d 	bl	80050d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80021be:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80021c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	4619      	mov	r1, r3
 80021d6:	480d      	ldr	r0, [pc, #52]	@ (800220c <MX_GPIO_Init+0x110>)
 80021d8:	f002 ff7e 	bl	80050d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80021dc:	2200      	movs	r2, #0
 80021de:	2100      	movs	r1, #0
 80021e0:	2007      	movs	r0, #7
 80021e2:	f002 fc06 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80021e6:	2007      	movs	r0, #7
 80021e8:	f002 fc1d 	bl	8004a26 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80021ec:	2200      	movs	r2, #0
 80021ee:	2100      	movs	r1, #0
 80021f0:	2008      	movs	r0, #8
 80021f2:	f002 fbfe 	bl	80049f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80021f6:	2008      	movs	r0, #8
 80021f8:	f002 fc15 	bl	8004a26 <HAL_NVIC_EnableIRQ>

}
 80021fc:	bf00      	nop
 80021fe:	3728      	adds	r7, #40	@ 0x28
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	40021000 	.word	0x40021000
 8002208:	48000800 	.word	0x48000800
 800220c:	48000400 	.word	0x48000400

08002210 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002214:	4b1b      	ldr	r3, [pc, #108]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002216:	4a1c      	ldr	r2, [pc, #112]	@ (8002288 <MX_I2C3_Init+0x78>)
 8002218:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x0070597B;
 800221a:	4b1a      	ldr	r3, [pc, #104]	@ (8002284 <MX_I2C3_Init+0x74>)
 800221c:	4a1b      	ldr	r2, [pc, #108]	@ (800228c <MX_I2C3_Init+0x7c>)
 800221e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8002220:	4b18      	ldr	r3, [pc, #96]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002222:	2200      	movs	r2, #0
 8002224:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002226:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002228:	2201      	movs	r2, #1
 800222a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800222c:	4b15      	ldr	r3, [pc, #84]	@ (8002284 <MX_I2C3_Init+0x74>)
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8002232:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002234:	2200      	movs	r2, #0
 8002236:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002238:	4b12      	ldr	r3, [pc, #72]	@ (8002284 <MX_I2C3_Init+0x74>)
 800223a:	2200      	movs	r2, #0
 800223c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800223e:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002240:	2200      	movs	r2, #0
 8002242:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002246:	2200      	movs	r2, #0
 8002248:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800224a:	480e      	ldr	r0, [pc, #56]	@ (8002284 <MX_I2C3_Init+0x74>)
 800224c:	f003 f901 	bl	8005452 <HAL_I2C_Init>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d001      	beq.n	800225a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8002256:	f000 f977 	bl	8002548 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800225a:	2100      	movs	r1, #0
 800225c:	4809      	ldr	r0, [pc, #36]	@ (8002284 <MX_I2C3_Init+0x74>)
 800225e:	f003 f993 	bl	8005588 <HAL_I2CEx_ConfigAnalogFilter>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8002268:	f000 f96e 	bl	8002548 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800226c:	2100      	movs	r1, #0
 800226e:	4805      	ldr	r0, [pc, #20]	@ (8002284 <MX_I2C3_Init+0x74>)
 8002270:	f003 f9d5 	bl	800561e <HAL_I2CEx_ConfigDigitalFilter>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800227a:	f000 f965 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800227e:	bf00      	nop
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	200003b0 	.word	0x200003b0
 8002288:	40007800 	.word	0x40007800
 800228c:	0070597b 	.word	0x0070597b

08002290 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b09c      	sub	sp, #112	@ 0x70
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002298:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022a8:	f107 0318 	add.w	r3, r7, #24
 80022ac:	2244      	movs	r2, #68	@ 0x44
 80022ae:	2100      	movs	r1, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	f00b fe7b 	bl	800dfac <memset>
  if(i2cHandle->Instance==I2C3)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002374 <HAL_I2C_MspInit+0xe4>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d155      	bne.n	800236c <HAL_I2C_MspInit+0xdc>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80022c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80022c4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80022c6:	2300      	movs	r3, #0
 80022c8:	63bb      	str	r3, [r7, #56]	@ 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022ca:	f107 0318 	add.w	r3, r7, #24
 80022ce:	4618      	mov	r0, r3
 80022d0:	f004 f8c8 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80022da:	f000 f935 	bl	8002548 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022de:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 80022e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022e2:	4a25      	ldr	r2, [pc, #148]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022ea:	4b23      	ldr	r3, [pc, #140]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 80022ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	617b      	str	r3, [r7, #20]
 80022f4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022f6:	4b20      	ldr	r3, [pc, #128]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 80022f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 80022fc:	f043 0304 	orr.w	r3, r3, #4
 8002300:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	613b      	str	r3, [r7, #16]
 800230c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PC11     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800230e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002312:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002314:	2312      	movs	r3, #18
 8002316:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002318:	2300      	movs	r3, #0
 800231a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231c:	2300      	movs	r3, #0
 800231e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF2_I2C3;
 8002320:	2302      	movs	r3, #2
 8002322:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002324:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002328:	4619      	mov	r1, r3
 800232a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800232e:	f002 fed3 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002332:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002336:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002338:	2312      	movs	r3, #18
 800233a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233c:	2300      	movs	r3, #0
 800233e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002340:	2300      	movs	r3, #0
 8002342:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Alternate = GPIO_AF8_I2C3;
 8002344:	2308      	movs	r3, #8
 8002346:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002348:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800234c:	4619      	mov	r1, r3
 800234e:	480b      	ldr	r0, [pc, #44]	@ (800237c <HAL_I2C_MspInit+0xec>)
 8002350:	f002 fec2 	bl	80050d8 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 8002356:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002358:	4a07      	ldr	r2, [pc, #28]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 800235a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800235e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002360:	4b05      	ldr	r3, [pc, #20]	@ (8002378 <HAL_I2C_MspInit+0xe8>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002364:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002368:	60fb      	str	r3, [r7, #12]
 800236a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 800236c:	bf00      	nop
 800236e:	3770      	adds	r7, #112	@ 0x70
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	40007800 	.word	0x40007800
 8002378:	40021000 	.word	0x40021000
 800237c:	48000800 	.word	0x48000800

08002380 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002386:	f000 ff88 	bl	800329a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800238a:	f000 f88b 	bl	80024a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800238e:	f7ff feb5 	bl	80020fc <MX_GPIO_Init>
  MX_DMA_Init();
 8002392:	f7ff f991 	bl	80016b8 <MX_DMA_Init>
  MX_SPI1_Init();
 8002396:	f000 f8dd 	bl	8002554 <MX_SPI1_Init>
  MX_USB_PCD_Init();
 800239a:	f000 fef9 	bl	8003190 <MX_USB_PCD_Init>
  if (MX_FATFS_Init() != APP_OK) {
 800239e:	f007 ffdd 	bl	800a35c <MX_FATFS_Init>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d001      	beq.n	80023ac <main+0x2c>
    Error_Handler();
 80023a8:	f000 f8ce 	bl	8002548 <Error_Handler>
  }
  MX_I2C3_Init();
 80023ac:	f7ff ff30 	bl	8002210 <MX_I2C3_Init>
  MX_LPUART1_UART_Init();
 80023b0:	f000 fc66 	bl	8002c80 <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 80023b4:	f7fe fe3e 	bl	8001034 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80023b8:	f000 fcac 	bl	8002d14 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 80023bc:	f000 fb28 	bl	8002a10 <MX_TIM3_Init>
  MX_TIM4_Init();
 80023c0:	f000 fb9e 	bl	8002b00 <MX_TIM4_Init>
  MX_ADC2_Init();
 80023c4:	f7fe fee0 	bl	8001188 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start_DMA(&hadc1,(uint16_t*)rawADCdata, 5);
 80023c8:	2205      	movs	r2, #5
 80023ca:	4926      	ldr	r1, [pc, #152]	@ (8002464 <main+0xe4>)
 80023cc:	4826      	ldr	r0, [pc, #152]	@ (8002468 <main+0xe8>)
 80023ce:	f001 fb99 	bl	8003b04 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2,(uint16_t*)rawADCdata+4, 1);
 80023d2:	4b26      	ldr	r3, [pc, #152]	@ (800246c <main+0xec>)
 80023d4:	2201      	movs	r2, #1
 80023d6:	4619      	mov	r1, r3
 80023d8:	4825      	ldr	r0, [pc, #148]	@ (8002470 <main+0xf0>)
 80023da:	f001 fb93 	bl	8003b04 <HAL_ADC_Start_DMA>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80023de:	2100      	movs	r1, #0
 80023e0:	4824      	ldr	r0, [pc, #144]	@ (8002474 <main+0xf4>)
 80023e2:	f005 f899 	bl	8007518 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_15,GPIO_PIN_SET);
 80023e6:	2201      	movs	r2, #1
 80023e8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023ec:	4822      	ldr	r0, [pc, #136]	@ (8002478 <main+0xf8>)
 80023ee:	f002 fff5 	bl	80053dc <HAL_GPIO_WritePin>


  HAL_Delay(100);
 80023f2:	2064      	movs	r0, #100	@ 0x64
 80023f4:	f000 ffc2 	bl	800337c <HAL_Delay>
  HAL_UART_Abort(&huart1);
 80023f8:	4820      	ldr	r0, [pc, #128]	@ (800247c <main+0xfc>)
 80023fa:	f006 fad5 	bl	80089a8 <HAL_UART_Abort>
  HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 80023fe:	2240      	movs	r2, #64	@ 0x40
 8002400:	491f      	ldr	r1, [pc, #124]	@ (8002480 <main+0x100>)
 8002402:	481e      	ldr	r0, [pc, #120]	@ (800247c <main+0xfc>)
 8002404:	f006 fa84 	bl	8008910 <HAL_UART_Receive_DMA>

  HAL_Delay(100);
 8002408:	2064      	movs	r0, #100	@ 0x64
 800240a:	f000 ffb7 	bl	800337c <HAL_Delay>
    HAL_UART_Abort(&hlpuart1);
 800240e:	481d      	ldr	r0, [pc, #116]	@ (8002484 <main+0x104>)
 8002410:	f006 faca 	bl	80089a8 <HAL_UART_Abort>
    HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);
 8002414:	2208      	movs	r2, #8
 8002416:	491c      	ldr	r1, [pc, #112]	@ (8002488 <main+0x108>)
 8002418:	481a      	ldr	r0, [pc, #104]	@ (8002484 <main+0x104>)
 800241a:	f006 fa79 	bl	8008910 <HAL_UART_Receive_DMA>




  f_mount(&fs, "", 0);
 800241e:	2200      	movs	r2, #0
 8002420:	491a      	ldr	r1, [pc, #104]	@ (800248c <main+0x10c>)
 8002422:	481b      	ldr	r0, [pc, #108]	@ (8002490 <main+0x110>)
 8002424:	f009 fc18 	bl	800bc58 <f_mount>
//  f_close(&fil);
//  /* Unmount SDCARD */
//  f_mount(NULL, "", 1);


  int indexboucle=0;
 8002428:	2300      	movs	r3, #0
 800242a:	607b      	str	r3, [r7, #4]
  int tarvosen=0;
 800242c:	2300      	movs	r3, #0
 800242e:	603b      	str	r3, [r7, #0]
  f_open(&fil, "adc.txt", FA_OPEN_ALWAYS | FA_READ | FA_WRITE);
 8002430:	2213      	movs	r2, #19
 8002432:	4918      	ldr	r1, [pc, #96]	@ (8002494 <main+0x114>)
 8002434:	4818      	ldr	r0, [pc, #96]	@ (8002498 <main+0x118>)
 8002436:	f009 fc55 	bl	800bce4 <f_open>

  		   f_getfree("", &fre_clust, &pfs);
 800243a:	4a18      	ldr	r2, [pc, #96]	@ (800249c <main+0x11c>)
 800243c:	4918      	ldr	r1, [pc, #96]	@ (80024a0 <main+0x120>)
 800243e:	4813      	ldr	r0, [pc, #76]	@ (800248c <main+0x10c>)
 8002440:	f009 fe0a 	bl	800c058 <f_getfree>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  htim3.Instance->CCR1 = 2000; // 90 degrès
 8002444:	4b0b      	ldr	r3, [pc, #44]	@ (8002474 <main+0xf4>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800244c:	635a      	str	r2, [r3, #52]	@ 0x34

	  htim3.Instance->CCR1 = 2500; // 90 degrès
 800244e:	4b09      	ldr	r3, [pc, #36]	@ (8002474 <main+0xf4>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8002456:	635a      	str	r2, [r3, #52]	@ 0x34
	  HAL_Delay(2000);
 8002458:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800245c:	f000 ff8e 	bl	800337c <HAL_Delay>
	  htim3.Instance->CCR1 = 2000; // 90 degrès
 8002460:	bf00      	nop
 8002462:	e7ef      	b.n	8002444 <main+0xc4>
 8002464:	20000bbc 	.word	0x20000bbc
 8002468:	20000210 	.word	0x20000210
 800246c:	20000bc4 	.word	0x20000bc4
 8002470:	2000027c 	.word	0x2000027c
 8002474:	20000c58 	.word	0x20000c58
 8002478:	48000400 	.word	0x48000400
 800247c:	20000d84 	.word	0x20000d84
 8002480:	20000b74 	.word	0x20000b74
 8002484:	20000cf0 	.word	0x20000cf0
 8002488:	2000096c 	.word	0x2000096c
 800248c:	08010960 	.word	0x08010960
 8002490:	20000404 	.word	0x20000404
 8002494:	08010964 	.word	0x08010964
 8002498:	20000638 	.word	0x20000638
 800249c:	20000634 	.word	0x20000634
 80024a0:	20000868 	.word	0x20000868

080024a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b094      	sub	sp, #80	@ 0x50
 80024a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80024aa:	f107 0318 	add.w	r3, r7, #24
 80024ae:	2238      	movs	r2, #56	@ 0x38
 80024b0:	2100      	movs	r1, #0
 80024b2:	4618      	mov	r0, r3
 80024b4:	f00b fd7a 	bl	800dfac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80024c6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80024ca:	f003 f9ed 	bl	80058a8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48
 80024ce:	2323      	movs	r3, #35	@ 0x23
 80024d0:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80024d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80024d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80024dc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024de:	2340      	movs	r3, #64	@ 0x40
 80024e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80024e2:	2301      	movs	r3, #1
 80024e4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024e6:	2302      	movs	r3, #2
 80024e8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80024ea:	2303      	movs	r3, #3
 80024ec:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80024ee:	2304      	movs	r3, #4
 80024f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 45;
 80024f2:	232d      	movs	r3, #45	@ 0x2d
 80024f4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80024f6:	2302      	movs	r3, #2
 80024f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80024fa:	2302      	movs	r3, #2
 80024fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80024fe:	2302      	movs	r3, #2
 8002500:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002502:	f107 0318 	add.w	r3, r7, #24
 8002506:	4618      	mov	r0, r3
 8002508:	f003 fa82 	bl	8005a10 <HAL_RCC_OscConfig>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002512:	f000 f819 	bl	8002548 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002516:	230f      	movs	r3, #15
 8002518:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800251a:	2303      	movs	r3, #3
 800251c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800251e:	2300      	movs	r3, #0
 8002520:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002522:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8002526:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800252c:	1d3b      	adds	r3, r7, #4
 800252e:	2102      	movs	r1, #2
 8002530:	4618      	mov	r0, r3
 8002532:	f003 fd7f 	bl	8006034 <HAL_RCC_ClockConfig>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d001      	beq.n	8002540 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800253c:	f000 f804 	bl	8002548 <Error_Handler>
  }
}
 8002540:	bf00      	nop
 8002542:	3750      	adds	r7, #80	@ 0x50
 8002544:	46bd      	mov	sp, r7
 8002546:	bd80      	pop	{r7, pc}

08002548 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800254c:	b672      	cpsid	i
}
 800254e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002550:	bf00      	nop
 8002552:	e7fd      	b.n	8002550 <Error_Handler+0x8>

08002554 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002558:	4b1b      	ldr	r3, [pc, #108]	@ (80025c8 <MX_SPI1_Init+0x74>)
 800255a:	4a1c      	ldr	r2, [pc, #112]	@ (80025cc <MX_SPI1_Init+0x78>)
 800255c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800255e:	4b1a      	ldr	r3, [pc, #104]	@ (80025c8 <MX_SPI1_Init+0x74>)
 8002560:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002564:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002566:	4b18      	ldr	r3, [pc, #96]	@ (80025c8 <MX_SPI1_Init+0x74>)
 8002568:	2200      	movs	r2, #0
 800256a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800256c:	4b16      	ldr	r3, [pc, #88]	@ (80025c8 <MX_SPI1_Init+0x74>)
 800256e:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8002572:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002574:	4b14      	ldr	r3, [pc, #80]	@ (80025c8 <MX_SPI1_Init+0x74>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800257a:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <MX_SPI1_Init+0x74>)
 800257c:	2200      	movs	r2, #0
 800257e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <MX_SPI1_Init+0x74>)
 8002582:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002586:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002588:	4b0f      	ldr	r3, [pc, #60]	@ (80025c8 <MX_SPI1_Init+0x74>)
 800258a:	2210      	movs	r2, #16
 800258c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800258e:	4b0e      	ldr	r3, [pc, #56]	@ (80025c8 <MX_SPI1_Init+0x74>)
 8002590:	2200      	movs	r2, #0
 8002592:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002594:	4b0c      	ldr	r3, [pc, #48]	@ (80025c8 <MX_SPI1_Init+0x74>)
 8002596:	2200      	movs	r2, #0
 8002598:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800259a:	4b0b      	ldr	r3, [pc, #44]	@ (80025c8 <MX_SPI1_Init+0x74>)
 800259c:	2200      	movs	r2, #0
 800259e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 80025a0:	4b09      	ldr	r3, [pc, #36]	@ (80025c8 <MX_SPI1_Init+0x74>)
 80025a2:	2207      	movs	r2, #7
 80025a4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80025a6:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <MX_SPI1_Init+0x74>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80025ac:	4b06      	ldr	r3, [pc, #24]	@ (80025c8 <MX_SPI1_Init+0x74>)
 80025ae:	2208      	movs	r2, #8
 80025b0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80025b2:	4805      	ldr	r0, [pc, #20]	@ (80025c8 <MX_SPI1_Init+0x74>)
 80025b4:	f004 f946 	bl	8006844 <HAL_SPI_Init>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d001      	beq.n	80025c2 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80025be:	f7ff ffc3 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000be0 	.word	0x20000be0
 80025cc:	40013000 	.word	0x40013000

080025d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b08a      	sub	sp, #40	@ 0x28
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025d8:	f107 0314 	add.w	r3, r7, #20
 80025dc:	2200      	movs	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	605a      	str	r2, [r3, #4]
 80025e2:	609a      	str	r2, [r3, #8]
 80025e4:	60da      	str	r2, [r3, #12]
 80025e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a17      	ldr	r2, [pc, #92]	@ (800264c <HAL_SPI_MspInit+0x7c>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d128      	bne.n	8002644 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80025f2:	4b17      	ldr	r3, [pc, #92]	@ (8002650 <HAL_SPI_MspInit+0x80>)
 80025f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025f6:	4a16      	ldr	r2, [pc, #88]	@ (8002650 <HAL_SPI_MspInit+0x80>)
 80025f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80025fc:	6613      	str	r3, [r2, #96]	@ 0x60
 80025fe:	4b14      	ldr	r3, [pc, #80]	@ (8002650 <HAL_SPI_MspInit+0x80>)
 8002600:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002602:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002606:	613b      	str	r3, [r7, #16]
 8002608:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800260a:	4b11      	ldr	r3, [pc, #68]	@ (8002650 <HAL_SPI_MspInit+0x80>)
 800260c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260e:	4a10      	ldr	r2, [pc, #64]	@ (8002650 <HAL_SPI_MspInit+0x80>)
 8002610:	f043 0301 	orr.w	r3, r3, #1
 8002614:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002616:	4b0e      	ldr	r3, [pc, #56]	@ (8002650 <HAL_SPI_MspInit+0x80>)
 8002618:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	60fb      	str	r3, [r7, #12]
 8002620:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002622:	23e0      	movs	r3, #224	@ 0xe0
 8002624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002626:	2302      	movs	r3, #2
 8002628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262e:	2300      	movs	r3, #0
 8002630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002632:	2305      	movs	r3, #5
 8002634:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002636:	f107 0314 	add.w	r3, r7, #20
 800263a:	4619      	mov	r1, r3
 800263c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002640:	f002 fd4a 	bl	80050d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002644:	bf00      	nop
 8002646:	3728      	adds	r7, #40	@ 0x28
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}
 800264c:	40013000 	.word	0x40013000
 8002650:	40021000 	.word	0x40021000

08002654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800265a:	4b0f      	ldr	r3, [pc, #60]	@ (8002698 <HAL_MspInit+0x44>)
 800265c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800265e:	4a0e      	ldr	r2, [pc, #56]	@ (8002698 <HAL_MspInit+0x44>)
 8002660:	f043 0301 	orr.w	r3, r3, #1
 8002664:	6613      	str	r3, [r2, #96]	@ 0x60
 8002666:	4b0c      	ldr	r3, [pc, #48]	@ (8002698 <HAL_MspInit+0x44>)
 8002668:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	607b      	str	r3, [r7, #4]
 8002670:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	4b09      	ldr	r3, [pc, #36]	@ (8002698 <HAL_MspInit+0x44>)
 8002674:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002676:	4a08      	ldr	r2, [pc, #32]	@ (8002698 <HAL_MspInit+0x44>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267c:	6593      	str	r3, [r2, #88]	@ 0x58
 800267e:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <HAL_MspInit+0x44>)
 8002680:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	603b      	str	r3, [r7, #0]
 8002688:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800268a:	f003 f9b1 	bl	80059f0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40021000 	.word	0x40021000

0800269c <SDTimer_Handler>:
/* USER CODE BEGIN 0 */
volatile uint8_t FatFsCnt = 0;
extern 	volatile uint8_t Timer1, Timer2;

void SDTimer_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80026a0:	4b0e      	ldr	r3, [pc, #56]	@ (80026dc <SDTimer_Handler+0x40>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d006      	beq.n	80026b8 <SDTimer_Handler+0x1c>
    Timer1--;
 80026aa:	4b0c      	ldr	r3, [pc, #48]	@ (80026dc <SDTimer_Handler+0x40>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	3b01      	subs	r3, #1
 80026b2:	b2da      	uxtb	r2, r3
 80026b4:	4b09      	ldr	r3, [pc, #36]	@ (80026dc <SDTimer_Handler+0x40>)
 80026b6:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80026b8:	4b09      	ldr	r3, [pc, #36]	@ (80026e0 <SDTimer_Handler+0x44>)
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d006      	beq.n	80026d0 <SDTimer_Handler+0x34>
    Timer2--;
 80026c2:	4b07      	ldr	r3, [pc, #28]	@ (80026e0 <SDTimer_Handler+0x44>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	b2db      	uxtb	r3, r3
 80026c8:	3b01      	subs	r3, #1
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <SDTimer_Handler+0x44>)
 80026ce:	701a      	strb	r2, [r3, #0]
}
 80026d0:	bf00      	nop
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	200003ac 	.word	0x200003ac
 80026e0:	200003ad 	.word	0x200003ad

080026e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026e8:	bf00      	nop
 80026ea:	e7fd      	b.n	80026e8 <NMI_Handler+0x4>

080026ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026ec:	b480      	push	{r7}
 80026ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026f0:	bf00      	nop
 80026f2:	e7fd      	b.n	80026f0 <HardFault_Handler+0x4>

080026f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026f8:	bf00      	nop
 80026fa:	e7fd      	b.n	80026f8 <MemManage_Handler+0x4>

080026fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026fc:	b480      	push	{r7}
 80026fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002700:	bf00      	nop
 8002702:	e7fd      	b.n	8002700 <BusFault_Handler+0x4>

08002704 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002708:	bf00      	nop
 800270a:	e7fd      	b.n	8002708 <UsageFault_Handler+0x4>

0800270c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002710:	bf00      	nop
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr

0800271a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800271a:	b480      	push	{r7}
 800271c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800271e:	bf00      	nop
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
	...

08002738 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 800273c:	4b0a      	ldr	r3, [pc, #40]	@ (8002768 <SysTick_Handler+0x30>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	b2db      	uxtb	r3, r3
 8002742:	3301      	adds	r3, #1
 8002744:	b2da      	uxtb	r2, r3
 8002746:	4b08      	ldr	r3, [pc, #32]	@ (8002768 <SysTick_Handler+0x30>)
 8002748:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 800274a:	4b07      	ldr	r3, [pc, #28]	@ (8002768 <SysTick_Handler+0x30>)
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b2db      	uxtb	r3, r3
 8002750:	2b09      	cmp	r3, #9
 8002752:	d904      	bls.n	800275e <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 8002754:	4b04      	ldr	r3, [pc, #16]	@ (8002768 <SysTick_Handler+0x30>)
 8002756:	2200      	movs	r2, #0
 8002758:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 800275a:	f7ff ff9f 	bl	800269c <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800275e:	f000 fdef 	bl	8003340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002762:	bf00      	nop
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000c50 	.word	0x20000c50

0800276c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002770:	2002      	movs	r0, #2
 8002772:	f002 fe4b 	bl	800540c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	bd80      	pop	{r7, pc}

0800277a <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800277e:	2004      	movs	r0, #4
 8002780:	f002 fe44 	bl	800540c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002784:	bf00      	nop
 8002786:	bd80      	pop	{r7, pc}

08002788 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 800278c:	4802      	ldr	r0, [pc, #8]	@ (8002798 <DMA1_Channel1_IRQHandler+0x10>)
 800278e:	f002 fb48 	bl	8004e22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002792:	bf00      	nop
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	20000e18 	.word	0x20000e18

0800279c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 80027a0:	4802      	ldr	r0, [pc, #8]	@ (80027ac <DMA1_Channel2_IRQHandler+0x10>)
 80027a2:	f002 fb3e 	bl	8004e22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000e78 	.word	0x20000e78

080027b0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80027b4:	4802      	ldr	r0, [pc, #8]	@ (80027c0 <DMA1_Channel3_IRQHandler+0x10>)
 80027b6:	f002 fb34 	bl	8004e22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200002e8 	.word	0x200002e8

080027c4 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80027c8:	4802      	ldr	r0, [pc, #8]	@ (80027d4 <DMA1_Channel4_IRQHandler+0x10>)
 80027ca:	f002 fb2a 	bl	8004e22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80027ce:	bf00      	nop
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	bf00      	nop
 80027d4:	20000ed8 	.word	0x20000ed8

080027d8 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80027dc:	4802      	ldr	r0, [pc, #8]	@ (80027e8 <DMA1_Channel5_IRQHandler+0x10>)
 80027de:	f002 fb20 	bl	8004e22 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80027e2:	bf00      	nop
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	20000348 	.word	0x20000348

080027ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80027f0:	480d      	ldr	r0, [pc, #52]	@ (8002828 <TIM3_IRQHandler+0x3c>)
 80027f2:	f004 ff91 	bl	8007718 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  if (compteur != 4){
 80027f6:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <TIM3_IRQHandler+0x40>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d007      	beq.n	800280e <TIM3_IRQHandler+0x22>
	  flag_capteur = 1;
 80027fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002830 <TIM3_IRQHandler+0x44>)
 8002800:	2201      	movs	r2, #1
 8002802:	601a      	str	r2, [r3, #0]
	  compteur ++;
 8002804:	4b09      	ldr	r3, [pc, #36]	@ (800282c <TIM3_IRQHandler+0x40>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	3301      	adds	r3, #1
 800280a:	4a08      	ldr	r2, [pc, #32]	@ (800282c <TIM3_IRQHandler+0x40>)
 800280c:	6013      	str	r3, [r2, #0]
  }
  if (compteur==4){
 800280e:	4b07      	ldr	r3, [pc, #28]	@ (800282c <TIM3_IRQHandler+0x40>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2b04      	cmp	r3, #4
 8002814:	d105      	bne.n	8002822 <TIM3_IRQHandler+0x36>
	  flag_envoi = 1;
 8002816:	4b07      	ldr	r3, [pc, #28]	@ (8002834 <TIM3_IRQHandler+0x48>)
 8002818:	2201      	movs	r2, #1
 800281a:	601a      	str	r2, [r3, #0]
	  compteur = 0;
 800281c:	4b03      	ldr	r3, [pc, #12]	@ (800282c <TIM3_IRQHandler+0x40>)
 800281e:	2200      	movs	r2, #0
 8002820:	601a      	str	r2, [r3, #0]
  }

  /* USER CODE END TIM3_IRQn 1 */
}
 8002822:	bf00      	nop
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20000c58 	.word	0x20000c58
 800282c:	20000c44 	.word	0x20000c44
 8002830:	20000c4c 	.word	0x20000c4c
 8002834:	20000c48 	.word	0x20000c48

08002838 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800283c:	4802      	ldr	r0, [pc, #8]	@ (8002848 <USART1_IRQHandler+0x10>)
 800283e:	f006 f9c1 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002842:	bf00      	nop
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	20000d84 	.word	0x20000d84

0800284c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8002850:	4802      	ldr	r0, [pc, #8]	@ (800285c <LPUART1_IRQHandler+0x10>)
 8002852:	f006 f9b7 	bl	8008bc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002856:	bf00      	nop
 8002858:	bd80      	pop	{r7, pc}
 800285a:	bf00      	nop
 800285c:	20000cf0 	.word	0x20000cf0

08002860 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  return 1;
 8002864:	2301      	movs	r3, #1
}
 8002866:	4618      	mov	r0, r3
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <_kill>:

int _kill(int pid, int sig)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800287a:	f00b fbb3 	bl	800dfe4 <__errno>
 800287e:	4603      	mov	r3, r0
 8002880:	2216      	movs	r2, #22
 8002882:	601a      	str	r2, [r3, #0]
  return -1;
 8002884:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002888:	4618      	mov	r0, r3
 800288a:	3708      	adds	r7, #8
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <_exit>:

void _exit (int status)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002898:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f7ff ffe7 	bl	8002870 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028a2:	bf00      	nop
 80028a4:	e7fd      	b.n	80028a2 <_exit+0x12>

080028a6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028a6:	b580      	push	{r7, lr}
 80028a8:	b086      	sub	sp, #24
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	60f8      	str	r0, [r7, #12]
 80028ae:	60b9      	str	r1, [r7, #8]
 80028b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028b2:	2300      	movs	r3, #0
 80028b4:	617b      	str	r3, [r7, #20]
 80028b6:	e00a      	b.n	80028ce <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80028b8:	f3af 8000 	nop.w
 80028bc:	4601      	mov	r1, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1c5a      	adds	r2, r3, #1
 80028c2:	60ba      	str	r2, [r7, #8]
 80028c4:	b2ca      	uxtb	r2, r1
 80028c6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	3301      	adds	r3, #1
 80028cc:	617b      	str	r3, [r7, #20]
 80028ce:	697a      	ldr	r2, [r7, #20]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	429a      	cmp	r2, r3
 80028d4:	dbf0      	blt.n	80028b8 <_read+0x12>
  }

  return len;
 80028d6:	687b      	ldr	r3, [r7, #4]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	617b      	str	r3, [r7, #20]
 80028f0:	e009      	b.n	8002906 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	1c5a      	adds	r2, r3, #1
 80028f6:	60ba      	str	r2, [r7, #8]
 80028f8:	781b      	ldrb	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	3301      	adds	r3, #1
 8002904:	617b      	str	r3, [r7, #20]
 8002906:	697a      	ldr	r2, [r7, #20]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	429a      	cmp	r2, r3
 800290c:	dbf1      	blt.n	80028f2 <_write+0x12>
  }
  return len;
 800290e:	687b      	ldr	r3, [r7, #4]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3718      	adds	r7, #24
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <_close>:

int _close(int file)
{
 8002918:	b480      	push	{r7}
 800291a:	b083      	sub	sp, #12
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002924:	4618      	mov	r0, r3
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002930:	b480      	push	{r7}
 8002932:	b083      	sub	sp, #12
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
 8002938:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002940:	605a      	str	r2, [r3, #4]
  return 0;
 8002942:	2300      	movs	r3, #0
}
 8002944:	4618      	mov	r0, r3
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294e:	4770      	bx	lr

08002950 <_isatty>:

int _isatty(int file)
{
 8002950:	b480      	push	{r7}
 8002952:	b083      	sub	sp, #12
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002958:	2301      	movs	r3, #1
}
 800295a:	4618      	mov	r0, r3
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr

08002966 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002966:	b480      	push	{r7}
 8002968:	b085      	sub	sp, #20
 800296a:	af00      	add	r7, sp, #0
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	60b9      	str	r1, [r7, #8]
 8002970:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002988:	4a14      	ldr	r2, [pc, #80]	@ (80029dc <_sbrk+0x5c>)
 800298a:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <_sbrk+0x60>)
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002994:	4b13      	ldr	r3, [pc, #76]	@ (80029e4 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d102      	bne.n	80029a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800299c:	4b11      	ldr	r3, [pc, #68]	@ (80029e4 <_sbrk+0x64>)
 800299e:	4a12      	ldr	r2, [pc, #72]	@ (80029e8 <_sbrk+0x68>)
 80029a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029a2:	4b10      	ldr	r3, [pc, #64]	@ (80029e4 <_sbrk+0x64>)
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4413      	add	r3, r2
 80029aa:	693a      	ldr	r2, [r7, #16]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d207      	bcs.n	80029c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029b0:	f00b fb18 	bl	800dfe4 <__errno>
 80029b4:	4603      	mov	r3, r0
 80029b6:	220c      	movs	r2, #12
 80029b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80029ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80029be:	e009      	b.n	80029d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80029c0:	4b08      	ldr	r3, [pc, #32]	@ (80029e4 <_sbrk+0x64>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80029c6:	4b07      	ldr	r3, [pc, #28]	@ (80029e4 <_sbrk+0x64>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	4413      	add	r3, r2
 80029ce:	4a05      	ldr	r2, [pc, #20]	@ (80029e4 <_sbrk+0x64>)
 80029d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029d2:	68fb      	ldr	r3, [r7, #12]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	20008000 	.word	0x20008000
 80029e0:	00000400 	.word	0x00000400
 80029e4:	20000c54 	.word	0x20000c54
 80029e8:	200013a0 	.word	0x200013a0

080029ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <SystemInit+0x20>)
 80029f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029f6:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <SystemInit+0x20>)
 80029f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08e      	sub	sp, #56	@ 0x38
 8002a14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002a16:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	605a      	str	r2, [r3, #4]
 8002a20:	609a      	str	r2, [r3, #8]
 8002a22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002a24:	f107 031c 	add.w	r3, r7, #28
 8002a28:	2200      	movs	r2, #0
 8002a2a:	601a      	str	r2, [r3, #0]
 8002a2c:	605a      	str	r2, [r3, #4]
 8002a2e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002a30:	463b      	mov	r3, r7
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
 8002a36:	605a      	str	r2, [r3, #4]
 8002a38:	609a      	str	r2, [r3, #8]
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	611a      	str	r2, [r3, #16]
 8002a3e:	615a      	str	r2, [r3, #20]
 8002a40:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002a42:	4b2d      	ldr	r3, [pc, #180]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002a44:	4a2d      	ldr	r2, [pc, #180]	@ (8002afc <MX_TIM3_Init+0xec>)
 8002a46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 44;
 8002a48:	4b2b      	ldr	r3, [pc, #172]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002a4a:	222c      	movs	r2, #44	@ 0x2c
 8002a4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8002a54:	4b28      	ldr	r3, [pc, #160]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002a56:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002a5a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002a5c:	4b26      	ldr	r3, [pc, #152]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a62:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002a68:	4823      	ldr	r0, [pc, #140]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002a6a:	f004 fc9d 	bl	80073a8 <HAL_TIM_Base_Init>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8002a74:	f7ff fd68 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002a78:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002a7e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002a82:	4619      	mov	r1, r3
 8002a84:	481c      	ldr	r0, [pc, #112]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002a86:	f005 f8ab 	bl	8007be0 <HAL_TIM_ConfigClockSource>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d001      	beq.n	8002a94 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8002a90:	f7ff fd5a 	bl	8002548 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002a94:	4818      	ldr	r0, [pc, #96]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002a96:	f004 fcde 	bl	8007456 <HAL_TIM_PWM_Init>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d001      	beq.n	8002aa4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8002aa0:	f7ff fd52 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4811      	ldr	r0, [pc, #68]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002ab4:	f005 fe14 	bl	80086e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8002abe:	f7ff fd43 	bl	8002548 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002ac2:	2360      	movs	r3, #96	@ 0x60
 8002ac4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002aca:	2300      	movs	r3, #0
 8002acc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ad2:	463b      	mov	r3, r7
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	4619      	mov	r1, r3
 8002ad8:	4807      	ldr	r0, [pc, #28]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002ada:	f004 ff6d 	bl	80079b8 <HAL_TIM_PWM_ConfigChannel>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8002ae4:	f7ff fd30 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002ae8:	4803      	ldr	r0, [pc, #12]	@ (8002af8 <MX_TIM3_Init+0xe8>)
 8002aea:	f000 f891 	bl	8002c10 <HAL_TIM_MspPostInit>

}
 8002aee:	bf00      	nop
 8002af0:	3738      	adds	r7, #56	@ 0x38
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
 8002af6:	bf00      	nop
 8002af8:	20000c58 	.word	0x20000c58
 8002afc:	40000400 	.word	0x40000400

08002b00 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b088      	sub	sp, #32
 8002b04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b06:	f107 0310 	add.w	r3, r7, #16
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	601a      	str	r2, [r3, #0]
 8002b0e:	605a      	str	r2, [r3, #4]
 8002b10:	609a      	str	r2, [r3, #8]
 8002b12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b14:	1d3b      	adds	r3, r7, #4
 8002b16:	2200      	movs	r2, #0
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	605a      	str	r2, [r3, #4]
 8002b1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002b1e:	4b1d      	ldr	r3, [pc, #116]	@ (8002b94 <MX_TIM4_Init+0x94>)
 8002b20:	4a1d      	ldr	r2, [pc, #116]	@ (8002b98 <MX_TIM4_Init+0x98>)
 8002b22:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 64000-1;
 8002b24:	4b1b      	ldr	r3, [pc, #108]	@ (8002b94 <MX_TIM4_Init+0x94>)
 8002b26:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8002b2a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b2c:	4b19      	ldr	r3, [pc, #100]	@ (8002b94 <MX_TIM4_Init+0x94>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002b32:	4b18      	ldr	r3, [pc, #96]	@ (8002b94 <MX_TIM4_Init+0x94>)
 8002b34:	2263      	movs	r2, #99	@ 0x63
 8002b36:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b38:	4b16      	ldr	r3, [pc, #88]	@ (8002b94 <MX_TIM4_Init+0x94>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b3e:	4b15      	ldr	r3, [pc, #84]	@ (8002b94 <MX_TIM4_Init+0x94>)
 8002b40:	2200      	movs	r2, #0
 8002b42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002b44:	4813      	ldr	r0, [pc, #76]	@ (8002b94 <MX_TIM4_Init+0x94>)
 8002b46:	f004 fc2f 	bl	80073a8 <HAL_TIM_Base_Init>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d001      	beq.n	8002b54 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8002b50:	f7ff fcfa 	bl	8002548 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002b58:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002b5a:	f107 0310 	add.w	r3, r7, #16
 8002b5e:	4619      	mov	r1, r3
 8002b60:	480c      	ldr	r0, [pc, #48]	@ (8002b94 <MX_TIM4_Init+0x94>)
 8002b62:	f005 f83d 	bl	8007be0 <HAL_TIM_ConfigClockSource>
 8002b66:	4603      	mov	r3, r0
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d001      	beq.n	8002b70 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8002b6c:	f7ff fcec 	bl	8002548 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002b70:	2320      	movs	r3, #32
 8002b72:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002b74:	2300      	movs	r3, #0
 8002b76:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002b78:	1d3b      	adds	r3, r7, #4
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	4805      	ldr	r0, [pc, #20]	@ (8002b94 <MX_TIM4_Init+0x94>)
 8002b7e:	f005 fdaf 	bl	80086e0 <HAL_TIMEx_MasterConfigSynchronization>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002b88:	f7ff fcde 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002b8c:	bf00      	nop
 8002b8e:	3720      	adds	r7, #32
 8002b90:	46bd      	mov	sp, r7
 8002b92:	bd80      	pop	{r7, pc}
 8002b94:	20000ca4 	.word	0x20000ca4
 8002b98:	40000800 	.word	0x40000800

08002b9c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a16      	ldr	r2, [pc, #88]	@ (8002c04 <HAL_TIM_Base_MspInit+0x68>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d114      	bne.n	8002bd8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002bae:	4b16      	ldr	r3, [pc, #88]	@ (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bb2:	4a15      	ldr	r2, [pc, #84]	@ (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bba:	4b13      	ldr	r3, [pc, #76]	@ (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2100      	movs	r1, #0
 8002bca:	201d      	movs	r0, #29
 8002bcc:	f001 ff11 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002bd0:	201d      	movs	r0, #29
 8002bd2:	f001 ff28 	bl	8004a26 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002bd6:	e010      	b.n	8002bfa <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM4)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a0b      	ldr	r2, [pc, #44]	@ (8002c0c <HAL_TIM_Base_MspInit+0x70>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d10b      	bne.n	8002bfa <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002be2:	4b09      	ldr	r3, [pc, #36]	@ (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002be4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be6:	4a08      	ldr	r2, [pc, #32]	@ (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002be8:	f043 0304 	orr.w	r3, r3, #4
 8002bec:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bee:	4b06      	ldr	r3, [pc, #24]	@ (8002c08 <HAL_TIM_Base_MspInit+0x6c>)
 8002bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bf2:	f003 0304 	and.w	r3, r3, #4
 8002bf6:	60bb      	str	r3, [r7, #8]
 8002bf8:	68bb      	ldr	r3, [r7, #8]
}
 8002bfa:	bf00      	nop
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
 8002c02:	bf00      	nop
 8002c04:	40000400 	.word	0x40000400
 8002c08:	40021000 	.word	0x40021000
 8002c0c:	40000800 	.word	0x40000800

08002c10 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b088      	sub	sp, #32
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c18:	f107 030c 	add.w	r3, r7, #12
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	605a      	str	r2, [r3, #4]
 8002c22:	609a      	str	r2, [r3, #8]
 8002c24:	60da      	str	r2, [r3, #12]
 8002c26:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a11      	ldr	r2, [pc, #68]	@ (8002c74 <HAL_TIM_MspPostInit+0x64>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d11b      	bne.n	8002c6a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c32:	4b11      	ldr	r3, [pc, #68]	@ (8002c78 <HAL_TIM_MspPostInit+0x68>)
 8002c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c36:	4a10      	ldr	r2, [pc, #64]	@ (8002c78 <HAL_TIM_MspPostInit+0x68>)
 8002c38:	f043 0304 	orr.w	r3, r3, #4
 8002c3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c78 <HAL_TIM_MspPostInit+0x68>)
 8002c40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	60bb      	str	r3, [r7, #8]
 8002c48:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c4a:	2340      	movs	r3, #64	@ 0x40
 8002c4c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c5e:	f107 030c 	add.w	r3, r7, #12
 8002c62:	4619      	mov	r1, r3
 8002c64:	4805      	ldr	r0, [pc, #20]	@ (8002c7c <HAL_TIM_MspPostInit+0x6c>)
 8002c66:	f002 fa37 	bl	80050d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002c6a:	bf00      	nop
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40000400 	.word	0x40000400
 8002c78:	40021000 	.word	0x40021000
 8002c7c:	48000800 	.word	0x48000800

08002c80 <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002c84:	4b21      	ldr	r3, [pc, #132]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002c86:	4a22      	ldr	r2, [pc, #136]	@ (8002d10 <MX_LPUART1_UART_Init+0x90>)
 8002c88:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002c8a:	4b20      	ldr	r3, [pc, #128]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002c8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c90:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c92:	4b1e      	ldr	r3, [pc, #120]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002c98:	4b1c      	ldr	r3, [pc, #112]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002c9e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002ca4:	4b19      	ldr	r3, [pc, #100]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002ca6:	220c      	movs	r2, #12
 8002ca8:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002caa:	4b18      	ldr	r3, [pc, #96]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002cac:	2200      	movs	r2, #0
 8002cae:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cb0:	4b16      	ldr	r3, [pc, #88]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002cb6:	4b15      	ldr	r3, [pc, #84]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002cb8:	2200      	movs	r2, #0
 8002cba:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002cbc:	4b13      	ldr	r3, [pc, #76]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8002cc2:	4812      	ldr	r0, [pc, #72]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002cc4:	f005 fdd4 	bl	8008870 <HAL_UART_Init>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002cce:	f7ff fc3b 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	480d      	ldr	r0, [pc, #52]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002cd6:	f007 fa3d 	bl	800a154 <HAL_UARTEx_SetTxFifoThreshold>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8002ce0:	f7ff fc32 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ce4:	2100      	movs	r1, #0
 8002ce6:	4809      	ldr	r0, [pc, #36]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002ce8:	f007 fa72 	bl	800a1d0 <HAL_UARTEx_SetRxFifoThreshold>
 8002cec:	4603      	mov	r3, r0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d001      	beq.n	8002cf6 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8002cf2:	f7ff fc29 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002cf6:	4805      	ldr	r0, [pc, #20]	@ (8002d0c <MX_LPUART1_UART_Init+0x8c>)
 8002cf8:	f007 f9f3 	bl	800a0e2 <HAL_UARTEx_DisableFifoMode>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d001      	beq.n	8002d06 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8002d02:	f7ff fc21 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002d06:	bf00      	nop
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000cf0 	.word	0x20000cf0
 8002d10:	40008000 	.word	0x40008000

08002d14 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002d18:	4b22      	ldr	r3, [pc, #136]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d1a:	4a23      	ldr	r2, [pc, #140]	@ (8002da8 <MX_USART1_UART_Init+0x94>)
 8002d1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8002d1e:	4b21      	ldr	r3, [pc, #132]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d20:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8002d24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002d26:	4b1f      	ldr	r3, [pc, #124]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d28:	2200      	movs	r2, #0
 8002d2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002d32:	4b1c      	ldr	r3, [pc, #112]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002d38:	4b1a      	ldr	r3, [pc, #104]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d3a:	220c      	movs	r2, #12
 8002d3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d3e:	4b19      	ldr	r3, [pc, #100]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d44:	4b17      	ldr	r3, [pc, #92]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d4a:	4b16      	ldr	r3, [pc, #88]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002d50:	4b14      	ldr	r3, [pc, #80]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002d56:	4b13      	ldr	r3, [pc, #76]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002d5c:	4811      	ldr	r0, [pc, #68]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d5e:	f005 fd87 	bl	8008870 <HAL_UART_Init>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002d68:	f7ff fbee 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	480d      	ldr	r0, [pc, #52]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d70:	f007 f9f0 	bl	800a154 <HAL_UARTEx_SetTxFifoThreshold>
 8002d74:	4603      	mov	r3, r0
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d001      	beq.n	8002d7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002d7a:	f7ff fbe5 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d7e:	2100      	movs	r1, #0
 8002d80:	4808      	ldr	r0, [pc, #32]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d82:	f007 fa25 	bl	800a1d0 <HAL_UARTEx_SetRxFifoThreshold>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d001      	beq.n	8002d90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002d8c:	f7ff fbdc 	bl	8002548 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002d90:	4804      	ldr	r0, [pc, #16]	@ (8002da4 <MX_USART1_UART_Init+0x90>)
 8002d92:	f007 f9a6 	bl	800a0e2 <HAL_UARTEx_DisableFifoMode>
 8002d96:	4603      	mov	r3, r0
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d001      	beq.n	8002da0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002d9c:	f7ff fbd4 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002da0:	bf00      	nop
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	20000d84 	.word	0x20000d84
 8002da8:	40013800 	.word	0x40013800

08002dac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b09e      	sub	sp, #120	@ 0x78
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002dc4:	f107 0320 	add.w	r3, r7, #32
 8002dc8:	2244      	movs	r2, #68	@ 0x44
 8002dca:	2100      	movs	r1, #0
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f00b f8ed 	bl	800dfac <memset>
  if(uartHandle->Instance==LPUART1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a92      	ldr	r2, [pc, #584]	@ (8003020 <HAL_UART_MspInit+0x274>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	f040 80b0 	bne.w	8002f3e <HAL_UART_MspInit+0x192>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8002dde:	2320      	movs	r3, #32
 8002de0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002de2:	2300      	movs	r3, #0
 8002de4:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002de6:	f107 0320 	add.w	r3, r7, #32
 8002dea:	4618      	mov	r0, r3
 8002dec:	f003 fb3a 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d001      	beq.n	8002dfa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002df6:	f7ff fba7 	bl	8002548 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002dfa:	4b8a      	ldr	r3, [pc, #552]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002dfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dfe:	4a89      	ldr	r2, [pc, #548]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002e00:	f043 0301 	orr.w	r3, r3, #1
 8002e04:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002e06:	4b87      	ldr	r3, [pc, #540]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002e08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	61fb      	str	r3, [r7, #28]
 8002e10:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e12:	4b84      	ldr	r3, [pc, #528]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e16:	4a83      	ldr	r2, [pc, #524]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002e18:	f043 0301 	orr.w	r3, r3, #1
 8002e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e1e:	4b81      	ldr	r3, [pc, #516]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	61bb      	str	r3, [r7, #24]
 8002e28:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e2e:	4a7d      	ldr	r2, [pc, #500]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002e30:	f043 0302 	orr.w	r3, r3, #2
 8002e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e36:	4b7b      	ldr	r3, [pc, #492]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e3a:	f003 0302 	and.w	r3, r3, #2
 8002e3e:	617b      	str	r3, [r7, #20]
 8002e40:	697b      	ldr	r3, [r7, #20]
    /**LPUART1 GPIO Configuration
    PA3     ------> LPUART1_RX
    PB11     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002e42:	2308      	movs	r3, #8
 8002e44:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e46:	2302      	movs	r3, #2
 8002e48:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002e52:	230c      	movs	r3, #12
 8002e54:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e56:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002e60:	f002 f93a 	bl	80050d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002e64:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8002e68:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e6a:	2302      	movs	r3, #2
 8002e6c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e72:	2300      	movs	r3, #0
 8002e74:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8002e76:	2308      	movs	r3, #8
 8002e78:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e7a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4869      	ldr	r0, [pc, #420]	@ (8003028 <HAL_UART_MspInit+0x27c>)
 8002e82:	f002 f929 	bl	80050d8 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002e86:	4b69      	ldr	r3, [pc, #420]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002e88:	4a69      	ldr	r2, [pc, #420]	@ (8003030 <HAL_UART_MspInit+0x284>)
 8002e8a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002e8c:	4b67      	ldr	r3, [pc, #412]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002e8e:	2222      	movs	r2, #34	@ 0x22
 8002e90:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e92:	4b66      	ldr	r3, [pc, #408]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e98:	4b64      	ldr	r3, [pc, #400]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e9e:	4b63      	ldr	r3, [pc, #396]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002ea0:	2280      	movs	r2, #128	@ 0x80
 8002ea2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ea4:	4b61      	ldr	r3, [pc, #388]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002eaa:	4b60      	ldr	r3, [pc, #384]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8002eb0:	4b5e      	ldr	r3, [pc, #376]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002eb6:	4b5d      	ldr	r3, [pc, #372]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002ebc:	485b      	ldr	r0, [pc, #364]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002ebe:	f001 fdcd 	bl	8004a5c <HAL_DMA_Init>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d001      	beq.n	8002ecc <HAL_UART_MspInit+0x120>
    {
      Error_Handler();
 8002ec8:	f7ff fb3e 	bl	8002548 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	4a57      	ldr	r2, [pc, #348]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002ed0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002ed4:	4a55      	ldr	r2, [pc, #340]	@ (800302c <HAL_UART_MspInit+0x280>)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002eda:	4b56      	ldr	r3, [pc, #344]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002edc:	4a56      	ldr	r2, [pc, #344]	@ (8003038 <HAL_UART_MspInit+0x28c>)
 8002ede:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 8002ee0:	4b54      	ldr	r3, [pc, #336]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002ee2:	2223      	movs	r2, #35	@ 0x23
 8002ee4:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ee6:	4b53      	ldr	r3, [pc, #332]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002ee8:	2210      	movs	r2, #16
 8002eea:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002eec:	4b51      	ldr	r3, [pc, #324]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef2:	4b50      	ldr	r3, [pc, #320]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002ef4:	2280      	movs	r2, #128	@ 0x80
 8002ef6:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ef8:	4b4e      	ldr	r3, [pc, #312]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002efe:	4b4d      	ldr	r3, [pc, #308]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 8002f04:	4b4b      	ldr	r3, [pc, #300]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002f06:	2200      	movs	r2, #0
 8002f08:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 8002f10:	4848      	ldr	r0, [pc, #288]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002f12:	f001 fda3 	bl	8004a5c <HAL_DMA_Init>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d001      	beq.n	8002f20 <HAL_UART_MspInit+0x174>
    {
      Error_Handler();
 8002f1c:	f7ff fb14 	bl	8002548 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	4a44      	ldr	r2, [pc, #272]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002f24:	67da      	str	r2, [r3, #124]	@ 0x7c
 8002f26:	4a43      	ldr	r2, [pc, #268]	@ (8003034 <HAL_UART_MspInit+0x288>)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	2100      	movs	r1, #0
 8002f30:	205b      	movs	r0, #91	@ 0x5b
 8002f32:	f001 fd5e 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002f36:	205b      	movs	r0, #91	@ 0x5b
 8002f38:	f001 fd75 	bl	8004a26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002f3c:	e06c      	b.n	8003018 <HAL_UART_MspInit+0x26c>
  else if(uartHandle->Instance==USART1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a3e      	ldr	r2, [pc, #248]	@ (800303c <HAL_UART_MspInit+0x290>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d167      	bne.n	8003018 <HAL_UART_MspInit+0x26c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002f50:	f107 0320 	add.w	r3, r7, #32
 8002f54:	4618      	mov	r0, r3
 8002f56:	f003 fa85 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d001      	beq.n	8002f64 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8002f60:	f7ff faf2 	bl	8002548 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002f64:	4b2f      	ldr	r3, [pc, #188]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002f66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f68:	4a2e      	ldr	r2, [pc, #184]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002f6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002f6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002f70:	4b2c      	ldr	r3, [pc, #176]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002f72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f78:	613b      	str	r3, [r7, #16]
 8002f7a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f7c:	4b29      	ldr	r3, [pc, #164]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f80:	4a28      	ldr	r2, [pc, #160]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002f82:	f043 0302 	orr.w	r3, r3, #2
 8002f86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f88:	4b26      	ldr	r3, [pc, #152]	@ (8003024 <HAL_UART_MspInit+0x278>)
 8002f8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	60fb      	str	r3, [r7, #12]
 8002f92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002f94:	23c0      	movs	r3, #192	@ 0xc0
 8002f96:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002fa4:	2307      	movs	r3, #7
 8002fa6:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fa8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fac:	4619      	mov	r1, r3
 8002fae:	481e      	ldr	r0, [pc, #120]	@ (8003028 <HAL_UART_MspInit+0x27c>)
 8002fb0:	f002 f892 	bl	80050d8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8002fb4:	4b22      	ldr	r3, [pc, #136]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002fb6:	4a23      	ldr	r2, [pc, #140]	@ (8003044 <HAL_UART_MspInit+0x298>)
 8002fb8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8002fba:	4b21      	ldr	r3, [pc, #132]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002fbc:	2218      	movs	r2, #24
 8002fbe:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002fc0:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002fc6:	4b1e      	ldr	r3, [pc, #120]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002fcc:	4b1c      	ldr	r3, [pc, #112]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002fce:	2280      	movs	r2, #128	@ 0x80
 8002fd0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002fd2:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002fd8:	4b19      	ldr	r3, [pc, #100]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002fde:	4b18      	ldr	r3, [pc, #96]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002fe0:	2220      	movs	r2, #32
 8002fe2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002fe4:	4b16      	ldr	r3, [pc, #88]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002fea:	4815      	ldr	r0, [pc, #84]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002fec:	f001 fd36 	bl	8004a5c <HAL_DMA_Init>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <HAL_UART_MspInit+0x24e>
      Error_Handler();
 8002ff6:	f7ff faa7 	bl	8002548 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a10      	ldr	r2, [pc, #64]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8002ffe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003002:	4a0f      	ldr	r2, [pc, #60]	@ (8003040 <HAL_UART_MspInit+0x294>)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6293      	str	r3, [r2, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	2100      	movs	r1, #0
 800300c:	2025      	movs	r0, #37	@ 0x25
 800300e:	f001 fcf0 	bl	80049f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003012:	2025      	movs	r0, #37	@ 0x25
 8003014:	f001 fd07 	bl	8004a26 <HAL_NVIC_EnableIRQ>
}
 8003018:	bf00      	nop
 800301a:	3778      	adds	r7, #120	@ 0x78
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}
 8003020:	40008000 	.word	0x40008000
 8003024:	40021000 	.word	0x40021000
 8003028:	48000400 	.word	0x48000400
 800302c:	20000e18 	.word	0x20000e18
 8003030:	40020008 	.word	0x40020008
 8003034:	20000e78 	.word	0x20000e78
 8003038:	4002001c 	.word	0x4002001c
 800303c:	40013800 	.word	0x40013800
 8003040:	20000ed8 	.word	0x20000ed8
 8003044:	40020044 	.word	0x40020044

08003048 <HAL_UART_RxCpltCallback>:
  /* USER CODE END USART1_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8003048:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
	if(huart->Instance==USART1){
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a43      	ldr	r2, [pc, #268]	@ (8003164 <HAL_UART_RxCpltCallback+0x11c>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d15b      	bne.n	8003112 <HAL_UART_RxCpltCallback+0xca>
		GPSbufferoldpos = GPSbuffernewpos; //keep track of the last position in the buffer
 800305a:	4b43      	ldr	r3, [pc, #268]	@ (8003168 <HAL_UART_RxCpltCallback+0x120>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a43      	ldr	r2, [pc, #268]	@ (800316c <HAL_UART_RxCpltCallback+0x124>)
 8003060:	6013      	str	r3, [r2, #0]
			if(GPSbufferoldpos + GPSRxTamponSize > GPSRxBufferSize){ //if the buffer is full, parse it, then reset the buffer
 8003062:	4b42      	ldr	r3, [pc, #264]	@ (800316c <HAL_UART_RxCpltCallback+0x124>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800306a:	dd22      	ble.n	80030b2 <HAL_UART_RxCpltCallback+0x6a>

				uint16_t datatocopy = GPSRxBufferSize-GPSbufferoldpos;  // find out how much space is left in the main buffer
 800306c:	4b3f      	ldr	r3, [pc, #252]	@ (800316c <HAL_UART_RxCpltCallback+0x124>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	b29b      	uxth	r3, r3
 8003072:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8003076:	817b      	strh	r3, [r7, #10]
				memcpy ((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, datatocopy);  // copy data in that remaining space
 8003078:	4b3c      	ldr	r3, [pc, #240]	@ (800316c <HAL_UART_RxCpltCallback+0x124>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	4b3c      	ldr	r3, [pc, #240]	@ (8003170 <HAL_UART_RxCpltCallback+0x128>)
 8003080:	4413      	add	r3, r2
 8003082:	897a      	ldrh	r2, [r7, #10]
 8003084:	493b      	ldr	r1, [pc, #236]	@ (8003174 <HAL_UART_RxCpltCallback+0x12c>)
 8003086:	4618      	mov	r0, r3
 8003088:	f00a ffd9 	bl	800e03e <memcpy>

				GPSbufferoldpos = 0;  // point to the start of the buffer
 800308c:	4b37      	ldr	r3, [pc, #220]	@ (800316c <HAL_UART_RxCpltCallback+0x124>)
 800308e:	2200      	movs	r2, #0
 8003090:	601a      	str	r2, [r3, #0]
				memcpy ((uint8_t *)GPS_RX_Buffer, (uint8_t *)GPS_RX_Tampon+datatocopy, (GPSRxTamponSize-datatocopy));  // copy the remaining data
 8003092:	897b      	ldrh	r3, [r7, #10]
 8003094:	4a37      	ldr	r2, [pc, #220]	@ (8003174 <HAL_UART_RxCpltCallback+0x12c>)
 8003096:	1899      	adds	r1, r3, r2
 8003098:	897b      	ldrh	r3, [r7, #10]
 800309a:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 800309e:	461a      	mov	r2, r3
 80030a0:	4833      	ldr	r0, [pc, #204]	@ (8003170 <HAL_UART_RxCpltCallback+0x128>)
 80030a2:	f00a ffcc 	bl	800e03e <memcpy>
				GPSbuffernewpos = (GPSRxTamponSize-datatocopy);  // update the position
 80030a6:	897b      	ldrh	r3, [r7, #10]
 80030a8:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 80030ac:	4a2e      	ldr	r2, [pc, #184]	@ (8003168 <HAL_UART_RxCpltCallback+0x120>)
 80030ae:	6013      	str	r3, [r2, #0]
 80030b0:	e01d      	b.n	80030ee <HAL_UART_RxCpltCallback+0xa6>
			}
			else{
				memcpy((uint8_t *)GPS_RX_Buffer+GPSbufferoldpos,(uint8_t *) GPS_RX_Tampon, GPSRxTamponSize); //copy received data to the buffer
 80030b2:	4b2e      	ldr	r3, [pc, #184]	@ (800316c <HAL_UART_RxCpltCallback+0x124>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	4b2d      	ldr	r3, [pc, #180]	@ (8003170 <HAL_UART_RxCpltCallback+0x128>)
 80030ba:	441a      	add	r2, r3
 80030bc:	4b2d      	ldr	r3, [pc, #180]	@ (8003174 <HAL_UART_RxCpltCallback+0x12c>)
 80030be:	4610      	mov	r0, r2
 80030c0:	f103 0440 	add.w	r4, r3, #64	@ 0x40
 80030c4:	4602      	mov	r2, r0
 80030c6:	4619      	mov	r1, r3
 80030c8:	f8d1 c000 	ldr.w	ip, [r1]
 80030cc:	684e      	ldr	r6, [r1, #4]
 80030ce:	688d      	ldr	r5, [r1, #8]
 80030d0:	68c9      	ldr	r1, [r1, #12]
 80030d2:	f8c2 c000 	str.w	ip, [r2]
 80030d6:	6056      	str	r6, [r2, #4]
 80030d8:	6095      	str	r5, [r2, #8]
 80030da:	60d1      	str	r1, [r2, #12]
 80030dc:	3310      	adds	r3, #16
 80030de:	3010      	adds	r0, #16
 80030e0:	42a3      	cmp	r3, r4
 80030e2:	d1ef      	bne.n	80030c4 <HAL_UART_RxCpltCallback+0x7c>
				GPSbuffernewpos = GPSRxTamponSize+GPSbufferoldpos; //update buffer position
 80030e4:	4b21      	ldr	r3, [pc, #132]	@ (800316c <HAL_UART_RxCpltCallback+0x124>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	3340      	adds	r3, #64	@ 0x40
 80030ea:	4a1f      	ldr	r2, [pc, #124]	@ (8003168 <HAL_UART_RxCpltCallback+0x120>)
 80030ec:	6013      	str	r3, [r2, #0]

			}
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);//on recoit par dma à nouveau 64 caractères
 80030ee:	2240      	movs	r2, #64	@ 0x40
 80030f0:	4920      	ldr	r1, [pc, #128]	@ (8003174 <HAL_UART_RxCpltCallback+0x12c>)
 80030f2:	4821      	ldr	r0, [pc, #132]	@ (8003178 <HAL_UART_RxCpltCallback+0x130>)
 80030f4:	f005 fc0c 	bl	8008910 <HAL_UART_Receive_DMA>
			__HAL_DMA_DISABLE_IT(&hdma_usart1_rx, DMA_IT_HT);
 80030f8:	4b20      	ldr	r3, [pc, #128]	@ (800317c <HAL_UART_RxCpltCallback+0x134>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	4b1f      	ldr	r3, [pc, #124]	@ (800317c <HAL_UART_RxCpltCallback+0x134>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0204 	bic.w	r2, r2, #4
 8003106:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_DMA(&huart1, (uint8_t *)GPS_RX_Tampon, GPSRxTamponSize);
 8003108:	2240      	movs	r2, #64	@ 0x40
 800310a:	491a      	ldr	r1, [pc, #104]	@ (8003174 <HAL_UART_RxCpltCallback+0x12c>)
 800310c:	481a      	ldr	r0, [pc, #104]	@ (8003178 <HAL_UART_RxCpltCallback+0x130>)
 800310e:	f005 fbff 	bl	8008910 <HAL_UART_Receive_DMA>
			}
	if(huart->Instance==LPUART1){
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1a      	ldr	r2, [pc, #104]	@ (8003180 <HAL_UART_RxCpltCallback+0x138>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d11f      	bne.n	800315c <HAL_UART_RxCpltCallback+0x114>
			for(int i=0;i<TarvosRxTamponSize;i++){
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]
 8003120:	e014      	b.n	800314c <HAL_UART_RxCpltCallback+0x104>
				if (tarvos_RX_Tampon[i] == 0x02){
 8003122:	4a18      	ldr	r2, [pc, #96]	@ (8003184 <HAL_UART_RxCpltCallback+0x13c>)
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b02      	cmp	r3, #2
 800312c:	d10b      	bne.n	8003146 <HAL_UART_RxCpltCallback+0xfe>
					memcpy((uint8_t *)tarvos_RX_Buffer,(uint8_t *) tarvos_RX_Tampon + i, (int)tarvos_RX_Tampon[i+2]+4); //copy received data to the buffer
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	4a14      	ldr	r2, [pc, #80]	@ (8003184 <HAL_UART_RxCpltCallback+0x13c>)
 8003132:	1899      	adds	r1, r3, r2
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	3302      	adds	r3, #2
 8003138:	4a12      	ldr	r2, [pc, #72]	@ (8003184 <HAL_UART_RxCpltCallback+0x13c>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	3304      	adds	r3, #4
 800313e:	461a      	mov	r2, r3
 8003140:	4811      	ldr	r0, [pc, #68]	@ (8003188 <HAL_UART_RxCpltCallback+0x140>)
 8003142:	f00a ff7c 	bl	800e03e <memcpy>
			for(int i=0;i<TarvosRxTamponSize;i++){
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3301      	adds	r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b07      	cmp	r3, #7
 8003150:	dde7      	ble.n	8003122 <HAL_UART_RxCpltCallback+0xda>
				}
			}
			HAL_UART_Receive_DMA(&hlpuart1, (uint8_t *)tarvos_RX_Tampon, TarvosRxTamponSize);//on recoit par dma à nouveau 64 caractères
 8003152:	2208      	movs	r2, #8
 8003154:	490b      	ldr	r1, [pc, #44]	@ (8003184 <HAL_UART_RxCpltCallback+0x13c>)
 8003156:	480d      	ldr	r0, [pc, #52]	@ (800318c <HAL_UART_RxCpltCallback+0x144>)
 8003158:	f005 fbda 	bl	8008910 <HAL_UART_Receive_DMA>
	}
}
 800315c:	bf00      	nop
 800315e:	3714      	adds	r7, #20
 8003160:	46bd      	mov	sp, r7
 8003162:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003164:	40013800 	.word	0x40013800
 8003168:	20000bb8 	.word	0x20000bb8
 800316c:	20000bb4 	.word	0x20000bb4
 8003170:	20000974 	.word	0x20000974
 8003174:	20000b74 	.word	0x20000b74
 8003178:	20000d84 	.word	0x20000d84
 800317c:	20000ed8 	.word	0x20000ed8
 8003180:	40008000 	.word	0x40008000
 8003184:	2000096c 	.word	0x2000096c
 8003188:	2000086c 	.word	0x2000086c
 800318c:	20000cf0 	.word	0x20000cf0

08003190 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8003194:	4b10      	ldr	r3, [pc, #64]	@ (80031d8 <MX_USB_PCD_Init+0x48>)
 8003196:	4a11      	ldr	r2, [pc, #68]	@ (80031dc <MX_USB_PCD_Init+0x4c>)
 8003198:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800319a:	4b0f      	ldr	r3, [pc, #60]	@ (80031d8 <MX_USB_PCD_Init+0x48>)
 800319c:	2208      	movs	r2, #8
 800319e:	711a      	strb	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80031a0:	4b0d      	ldr	r3, [pc, #52]	@ (80031d8 <MX_USB_PCD_Init+0x48>)
 80031a2:	2202      	movs	r2, #2
 80031a4:	715a      	strb	r2, [r3, #5]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80031a6:	4b0c      	ldr	r3, [pc, #48]	@ (80031d8 <MX_USB_PCD_Init+0x48>)
 80031a8:	2202      	movs	r2, #2
 80031aa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 80031ac:	4b0a      	ldr	r3, [pc, #40]	@ (80031d8 <MX_USB_PCD_Init+0x48>)
 80031ae:	2200      	movs	r2, #0
 80031b0:	721a      	strb	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80031b2:	4b09      	ldr	r3, [pc, #36]	@ (80031d8 <MX_USB_PCD_Init+0x48>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80031b8:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <MX_USB_PCD_Init+0x48>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80031be:	4b06      	ldr	r3, [pc, #24]	@ (80031d8 <MX_USB_PCD_Init+0x48>)
 80031c0:	2200      	movs	r2, #0
 80031c2:	72da      	strb	r2, [r3, #11]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80031c4:	4804      	ldr	r0, [pc, #16]	@ (80031d8 <MX_USB_PCD_Init+0x48>)
 80031c6:	f002 fa76 	bl	80056b6 <HAL_PCD_Init>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d001      	beq.n	80031d4 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 80031d0:	f7ff f9ba 	bl	8002548 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 80031d4:	bf00      	nop
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000f38 	.word	0x20000f38
 80031dc:	40005c00 	.word	0x40005c00

080031e0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b094      	sub	sp, #80	@ 0x50
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80031e8:	f107 030c 	add.w	r3, r7, #12
 80031ec:	2244      	movs	r2, #68	@ 0x44
 80031ee:	2100      	movs	r1, #0
 80031f0:	4618      	mov	r0, r3
 80031f2:	f00a fedb 	bl	800dfac <memset>
  if(pcdHandle->Instance==USB)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a11      	ldr	r2, [pc, #68]	@ (8003240 <HAL_PCD_MspInit+0x60>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d11a      	bne.n	8003236 <HAL_PCD_MspInit+0x56>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8003200:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003204:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003206:	2300      	movs	r3, #0
 8003208:	643b      	str	r3, [r7, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800320a:	f107 030c 	add.w	r3, r7, #12
 800320e:	4618      	mov	r0, r3
 8003210:	f003 f928 	bl	8006464 <HAL_RCCEx_PeriphCLKConfig>
 8003214:	4603      	mov	r3, r0
 8003216:	2b00      	cmp	r3, #0
 8003218:	d001      	beq.n	800321e <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 800321a:	f7ff f995 	bl	8002548 <Error_Handler>
    }

    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800321e:	4b09      	ldr	r3, [pc, #36]	@ (8003244 <HAL_PCD_MspInit+0x64>)
 8003220:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003222:	4a08      	ldr	r2, [pc, #32]	@ (8003244 <HAL_PCD_MspInit+0x64>)
 8003224:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003228:	6593      	str	r3, [r2, #88]	@ 0x58
 800322a:	4b06      	ldr	r3, [pc, #24]	@ (8003244 <HAL_PCD_MspInit+0x64>)
 800322c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800322e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003232:	60bb      	str	r3, [r7, #8]
 8003234:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8003236:	bf00      	nop
 8003238:	3750      	adds	r7, #80	@ 0x50
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40005c00 	.word	0x40005c00
 8003244:	40021000 	.word	0x40021000

08003248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003248:	480d      	ldr	r0, [pc, #52]	@ (8003280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800324a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 800324c:	f7ff fbce 	bl	80029ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003250:	480c      	ldr	r0, [pc, #48]	@ (8003284 <LoopForever+0x6>)
  ldr r1, =_edata
 8003252:	490d      	ldr	r1, [pc, #52]	@ (8003288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003254:	4a0d      	ldr	r2, [pc, #52]	@ (800328c <LoopForever+0xe>)
  movs r3, #0
 8003256:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003258:	e002      	b.n	8003260 <LoopCopyDataInit>

0800325a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800325a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800325c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800325e:	3304      	adds	r3, #4

08003260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003264:	d3f9      	bcc.n	800325a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003266:	4a0a      	ldr	r2, [pc, #40]	@ (8003290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003268:	4c0a      	ldr	r4, [pc, #40]	@ (8003294 <LoopForever+0x16>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800326c:	e001      	b.n	8003272 <LoopFillZerobss>

0800326e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800326e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003270:	3204      	adds	r2, #4

08003272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003274:	d3fb      	bcc.n	800326e <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8003276:	f00a febb 	bl	800dff0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800327a:	f7ff f881 	bl	8002380 <main>

0800327e <LoopForever>:

LoopForever:
    b LoopForever
 800327e:	e7fe      	b.n	800327e <LoopForever>
  ldr   r0, =_estack
 8003280:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003288:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 800328c:	08010ea8 	.word	0x08010ea8
  ldr r2, =_sbss
 8003290:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8003294:	200013a0 	.word	0x200013a0

08003298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003298:	e7fe      	b.n	8003298 <ADC1_2_IRQHandler>

0800329a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800329a:	b580      	push	{r7, lr}
 800329c:	b082      	sub	sp, #8
 800329e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032a4:	2003      	movs	r0, #3
 80032a6:	f001 fb99 	bl	80049dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80032aa:	200f      	movs	r0, #15
 80032ac:	f000 f80e 	bl	80032cc <HAL_InitTick>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	71fb      	strb	r3, [r7, #7]
 80032ba:	e001      	b.n	80032c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032bc:	f7ff f9ca 	bl	8002654 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032c0:	79fb      	ldrb	r3, [r7, #7]

}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
	...

080032cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032d4:	2300      	movs	r3, #0
 80032d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032d8:	4b16      	ldr	r3, [pc, #88]	@ (8003334 <HAL_InitTick+0x68>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d022      	beq.n	8003326 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032e0:	4b15      	ldr	r3, [pc, #84]	@ (8003338 <HAL_InitTick+0x6c>)
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	4b13      	ldr	r3, [pc, #76]	@ (8003334 <HAL_InitTick+0x68>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80032ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80032f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f4:	4618      	mov	r0, r3
 80032f6:	f001 fba4 	bl	8004a42 <HAL_SYSTICK_Config>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d10f      	bne.n	8003320 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	d809      	bhi.n	800331a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003306:	2200      	movs	r2, #0
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800330e:	f001 fb70 	bl	80049f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003312:	4a0a      	ldr	r2, [pc, #40]	@ (800333c <HAL_InitTick+0x70>)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6013      	str	r3, [r2, #0]
 8003318:	e007      	b.n	800332a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
 800331e:	e004      	b.n	800332a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
 8003324:	e001      	b.n	800332a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800332a:	7bfb      	ldrb	r3, [r7, #15]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	20000014 	.word	0x20000014
 8003338:	2000000c 	.word	0x2000000c
 800333c:	20000010 	.word	0x20000010

08003340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003344:	4b05      	ldr	r3, [pc, #20]	@ (800335c <HAL_IncTick+0x1c>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4b05      	ldr	r3, [pc, #20]	@ (8003360 <HAL_IncTick+0x20>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4413      	add	r3, r2
 800334e:	4a03      	ldr	r2, [pc, #12]	@ (800335c <HAL_IncTick+0x1c>)
 8003350:	6013      	str	r3, [r2, #0]
}
 8003352:	bf00      	nop
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr
 800335c:	20001214 	.word	0x20001214
 8003360:	20000014 	.word	0x20000014

08003364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003364:	b480      	push	{r7}
 8003366:	af00      	add	r7, sp, #0
  return uwTick;
 8003368:	4b03      	ldr	r3, [pc, #12]	@ (8003378 <HAL_GetTick+0x14>)
 800336a:	681b      	ldr	r3, [r3, #0]
}
 800336c:	4618      	mov	r0, r3
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	20001214 	.word	0x20001214

0800337c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003384:	f7ff ffee 	bl	8003364 <HAL_GetTick>
 8003388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003394:	d004      	beq.n	80033a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8003396:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <HAL_Delay+0x40>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68fa      	ldr	r2, [r7, #12]
 800339c:	4413      	add	r3, r2
 800339e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80033a0:	bf00      	nop
 80033a2:	f7ff ffdf 	bl	8003364 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d8f7      	bhi.n	80033a2 <HAL_Delay+0x26>
  {
  }
}
 80033b2:	bf00      	nop
 80033b4:	bf00      	nop
 80033b6:	3710      	adds	r7, #16
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}
 80033bc:	20000014 	.word	0x20000014

080033c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	431a      	orrs	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	609a      	str	r2, [r3, #8]
}
 80033da:	bf00      	nop
 80033dc:	370c      	adds	r7, #12
 80033de:	46bd      	mov	sp, r7
 80033e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e4:	4770      	bx	lr

080033e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80033e6:	b480      	push	{r7}
 80033e8:	b083      	sub	sp, #12
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
 80033ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	431a      	orrs	r2, r3
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	609a      	str	r2, [r3, #8]
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003428:	b480      	push	{r7}
 800342a:	b087      	sub	sp, #28
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
 8003434:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	3360      	adds	r3, #96	@ 0x60
 800343a:	461a      	mov	r2, r3
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4413      	add	r3, r2
 8003442:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b08      	ldr	r3, [pc, #32]	@ (800346c <LL_ADC_SetOffset+0x44>)
 800344a:	4013      	ands	r3, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	4313      	orrs	r3, r2
 8003458:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003460:	bf00      	nop
 8003462:	371c      	adds	r7, #28
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	03fff000 	.word	0x03fff000

08003470 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	3360      	adds	r3, #96	@ 0x60
 800347e:	461a      	mov	r2, r3
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8003490:	4618      	mov	r0, r3
 8003492:	3714      	adds	r7, #20
 8003494:	46bd      	mov	sp, r7
 8003496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349a:	4770      	bx	lr

0800349c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800349c:	b480      	push	{r7}
 800349e:	b087      	sub	sp, #28
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	60f8      	str	r0, [r7, #12]
 80034a4:	60b9      	str	r1, [r7, #8]
 80034a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	3360      	adds	r3, #96	@ 0x60
 80034ac:	461a      	mov	r2, r3
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	009b      	lsls	r3, r3, #2
 80034b2:	4413      	add	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	431a      	orrs	r2, r3
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80034c6:	bf00      	nop
 80034c8:	371c      	adds	r7, #28
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80034d2:	b480      	push	{r7}
 80034d4:	b087      	sub	sp, #28
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	3360      	adds	r3, #96	@ 0x60
 80034e2:	461a      	mov	r2, r3
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	431a      	orrs	r2, r3
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80034fc:	bf00      	nop
 80034fe:	371c      	adds	r7, #28
 8003500:	46bd      	mov	sp, r7
 8003502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003506:	4770      	bx	lr

08003508 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003508:	b480      	push	{r7}
 800350a:	b087      	sub	sp, #28
 800350c:	af00      	add	r7, sp, #0
 800350e:	60f8      	str	r0, [r7, #12]
 8003510:	60b9      	str	r1, [r7, #8]
 8003512:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	3360      	adds	r3, #96	@ 0x60
 8003518:	461a      	mov	r2, r3
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	431a      	orrs	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003532:	bf00      	nop
 8003534:	371c      	adds	r7, #28
 8003536:	46bd      	mov	sp, r7
 8003538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353c:	4770      	bx	lr

0800353e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	615a      	str	r2, [r3, #20]
}
 8003558:	bf00      	nop
 800355a:	370c      	adds	r7, #12
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8003578:	2301      	movs	r3, #1
 800357a:	e000      	b.n	800357e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	370c      	adds	r7, #12
 8003582:	46bd      	mov	sp, r7
 8003584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003588:	4770      	bx	lr

0800358a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800358a:	b480      	push	{r7}
 800358c:	b087      	sub	sp, #28
 800358e:	af00      	add	r7, sp, #0
 8003590:	60f8      	str	r0, [r7, #12]
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	3330      	adds	r3, #48	@ 0x30
 800359a:	461a      	mov	r2, r3
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	0a1b      	lsrs	r3, r3, #8
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	f003 030c 	and.w	r3, r3, #12
 80035a6:	4413      	add	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	f003 031f 	and.w	r3, r3, #31
 80035b4:	211f      	movs	r1, #31
 80035b6:	fa01 f303 	lsl.w	r3, r1, r3
 80035ba:	43db      	mvns	r3, r3
 80035bc:	401a      	ands	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	0e9b      	lsrs	r3, r3, #26
 80035c2:	f003 011f 	and.w	r1, r3, #31
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	f003 031f 	and.w	r3, r3, #31
 80035cc:	fa01 f303 	lsl.w	r3, r1, r3
 80035d0:	431a      	orrs	r2, r3
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80035d6:	bf00      	nop
 80035d8:	371c      	adds	r7, #28
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr

080035e2 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80035e2:	b480      	push	{r7}
 80035e4:	b087      	sub	sp, #28
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	3314      	adds	r3, #20
 80035f2:	461a      	mov	r2, r3
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	0e5b      	lsrs	r3, r3, #25
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	f003 0304 	and.w	r3, r3, #4
 80035fe:	4413      	add	r3, r2
 8003600:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8003602:	697b      	ldr	r3, [r7, #20]
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	0d1b      	lsrs	r3, r3, #20
 800360a:	f003 031f 	and.w	r3, r3, #31
 800360e:	2107      	movs	r1, #7
 8003610:	fa01 f303 	lsl.w	r3, r1, r3
 8003614:	43db      	mvns	r3, r3
 8003616:	401a      	ands	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	0d1b      	lsrs	r3, r3, #20
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	fa01 f303 	lsl.w	r3, r1, r3
 8003626:	431a      	orrs	r2, r3
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800362c:	bf00      	nop
 800362e:	371c      	adds	r7, #28
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003638:	b480      	push	{r7}
 800363a:	b085      	sub	sp, #20
 800363c:	af00      	add	r7, sp, #0
 800363e:	60f8      	str	r0, [r7, #12]
 8003640:	60b9      	str	r1, [r7, #8]
 8003642:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003650:	43db      	mvns	r3, r3
 8003652:	401a      	ands	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f003 0318 	and.w	r3, r3, #24
 800365a:	4908      	ldr	r1, [pc, #32]	@ (800367c <LL_ADC_SetChannelSingleDiff+0x44>)
 800365c:	40d9      	lsrs	r1, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	400b      	ands	r3, r1
 8003662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003666:	431a      	orrs	r2, r3
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800366e:	bf00      	nop
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	0007ffff 	.word	0x0007ffff

08003680 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003680:	b480      	push	{r7}
 8003682:	b083      	sub	sp, #12
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 031f 	and.w	r3, r3, #31
}
 8003690:	4618      	mov	r0, r3
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80036ac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6093      	str	r3, [r2, #8]
}
 80036b4:	bf00      	nop
 80036b6:	370c      	adds	r7, #12
 80036b8:	46bd      	mov	sp, r7
 80036ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036be:	4770      	bx	lr

080036c0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b083      	sub	sp, #12
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80036d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80036d4:	d101      	bne.n	80036da <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80036d6:	2301      	movs	r3, #1
 80036d8:	e000      	b.n	80036dc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80036da:	2300      	movs	r3, #0
}
 80036dc:	4618      	mov	r0, r3
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e6:	4770      	bx	lr

080036e8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80036f8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80036fc:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003720:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003724:	d101      	bne.n	800372a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8003726:	2301      	movs	r3, #1
 8003728:	e000      	b.n	800372c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003748:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800374c:	f043 0201 	orr.w	r2, r3, #1
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d101      	bne.n	8003778 <LL_ADC_IsEnabled+0x18>
 8003774:	2301      	movs	r3, #1
 8003776:	e000      	b.n	800377a <LL_ADC_IsEnabled+0x1a>
 8003778:	2300      	movs	r3, #0
}
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr

08003786 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003786:	b480      	push	{r7}
 8003788:	b083      	sub	sp, #12
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003796:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800379a:	f043 0204 	orr.w	r2, r3, #4
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80037a2:	bf00      	nop
 80037a4:	370c      	adds	r7, #12
 80037a6:	46bd      	mov	sp, r7
 80037a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ac:	4770      	bx	lr

080037ae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80037ae:	b480      	push	{r7}
 80037b0:	b083      	sub	sp, #12
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b04      	cmp	r3, #4
 80037c0:	d101      	bne.n	80037c6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	370c      	adds	r7, #12
 80037cc:	46bd      	mov	sp, r7
 80037ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d2:	4770      	bx	lr

080037d4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d101      	bne.n	80037ec <LL_ADC_INJ_IsConversionOngoing+0x18>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	370c      	adds	r7, #12
 80037f2:	46bd      	mov	sp, r7
 80037f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80037fc:	b590      	push	{r4, r7, lr}
 80037fe:	b089      	sub	sp, #36	@ 0x24
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d101      	bne.n	8003816 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e167      	b.n	8003ae6 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	695b      	ldr	r3, [r3, #20]
 800381a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003820:	2b00      	cmp	r3, #0
 8003822:	d109      	bne.n	8003838 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f7fd fd17 	bl	8001258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4618      	mov	r0, r3
 800383e:	f7ff ff3f 	bl	80036c0 <LL_ADC_IsDeepPowerDownEnabled>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4618      	mov	r0, r3
 800384e:	f7ff ff25 	bl	800369c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7ff ff5a 	bl	8003710 <LL_ADC_IsInternalRegulatorEnabled>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d115      	bne.n	800388e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4618      	mov	r0, r3
 8003868:	f7ff ff3e 	bl	80036e8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800386c:	4ba0      	ldr	r3, [pc, #640]	@ (8003af0 <HAL_ADC_Init+0x2f4>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	099b      	lsrs	r3, r3, #6
 8003872:	4aa0      	ldr	r2, [pc, #640]	@ (8003af4 <HAL_ADC_Init+0x2f8>)
 8003874:	fba2 2303 	umull	r2, r3, r2, r3
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	3301      	adds	r3, #1
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003880:	e002      	b.n	8003888 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	3b01      	subs	r3, #1
 8003886:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d1f9      	bne.n	8003882 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7ff ff3c 	bl	8003710 <LL_ADC_IsInternalRegulatorEnabled>
 8003898:	4603      	mov	r3, r0
 800389a:	2b00      	cmp	r3, #0
 800389c:	d10d      	bne.n	80038ba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a2:	f043 0210 	orr.w	r2, r3, #16
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ae:	f043 0201 	orr.w	r2, r3, #1
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f7ff ff75 	bl	80037ae <LL_ADC_REG_IsConversionOngoing>
 80038c4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ca:	f003 0310 	and.w	r3, r3, #16
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 8100 	bne.w	8003ad4 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f040 80fc 	bne.w	8003ad4 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038e0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80038e4:	f043 0202 	orr.w	r2, r3, #2
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4618      	mov	r0, r3
 80038f2:	f7ff ff35 	bl	8003760 <LL_ADC_IsEnabled>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d111      	bne.n	8003920 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038fc:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003900:	f7ff ff2e 	bl	8003760 <LL_ADC_IsEnabled>
 8003904:	4604      	mov	r4, r0
 8003906:	487c      	ldr	r0, [pc, #496]	@ (8003af8 <HAL_ADC_Init+0x2fc>)
 8003908:	f7ff ff2a 	bl	8003760 <LL_ADC_IsEnabled>
 800390c:	4603      	mov	r3, r0
 800390e:	4323      	orrs	r3, r4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d105      	bne.n	8003920 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	4619      	mov	r1, r3
 800391a:	4878      	ldr	r0, [pc, #480]	@ (8003afc <HAL_ADC_Init+0x300>)
 800391c:	f7ff fd50 	bl	80033c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	7f5b      	ldrb	r3, [r3, #29]
 8003924:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800392a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8003930:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8003936:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800393e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8003940:	4313      	orrs	r3, r2
 8003942:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800394a:	2b01      	cmp	r3, #1
 800394c:	d106      	bne.n	800395c <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003952:	3b01      	subs	r3, #1
 8003954:	045b      	lsls	r3, r3, #17
 8003956:	69ba      	ldr	r2, [r7, #24]
 8003958:	4313      	orrs	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003960:	2b00      	cmp	r3, #0
 8003962:	d009      	beq.n	8003978 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003968:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8003972:	69ba      	ldr	r2, [r7, #24]
 8003974:	4313      	orrs	r3, r2
 8003976:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68da      	ldr	r2, [r3, #12]
 800397e:	4b60      	ldr	r3, [pc, #384]	@ (8003b00 <HAL_ADC_Init+0x304>)
 8003980:	4013      	ands	r3, r2
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	6812      	ldr	r2, [r2, #0]
 8003986:	69b9      	ldr	r1, [r7, #24]
 8003988:	430b      	orrs	r3, r1
 800398a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	430a      	orrs	r2, r1
 80039a0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f7ff ff14 	bl	80037d4 <LL_ADC_INJ_IsConversionOngoing>
 80039ac:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d16d      	bne.n	8003a90 <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d16a      	bne.n	8003a90 <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039be:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80039c6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80039c8:	4313      	orrs	r3, r2
 80039ca:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68db      	ldr	r3, [r3, #12]
 80039d2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039d6:	f023 0302 	bic.w	r3, r3, #2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6812      	ldr	r2, [r2, #0]
 80039de:	69b9      	ldr	r1, [r7, #24]
 80039e0:	430b      	orrs	r3, r1
 80039e2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d017      	beq.n	8003a1c <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	691a      	ldr	r2, [r3, #16]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80039fa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a04:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003a08:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	6911      	ldr	r1, [r2, #16]
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	6812      	ldr	r2, [r2, #0]
 8003a14:	430b      	orrs	r3, r1
 8003a16:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8003a1a:	e013      	b.n	8003a44 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	691a      	ldr	r2, [r3, #16]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003a2a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	6812      	ldr	r2, [r2, #0]
 8003a38:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003a3c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003a40:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d118      	bne.n	8003a80 <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8003a58:	f023 0304 	bic.w	r3, r3, #4
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8003a64:	4311      	orrs	r1, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8003a6a:	4311      	orrs	r1, r2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003a70:	430a      	orrs	r2, r1
 8003a72:	431a      	orrs	r2, r3
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f042 0201 	orr.w	r2, r2, #1
 8003a7c:	611a      	str	r2, [r3, #16]
 8003a7e:	e007      	b.n	8003a90 <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	691a      	ldr	r2, [r3, #16]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10c      	bne.n	8003ab2 <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	f023 010f 	bic.w	r1, r3, #15
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	1e5a      	subs	r2, r3, #1
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	430a      	orrs	r2, r1
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30
 8003ab0:	e007      	b.n	8003ac2 <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 020f 	bic.w	r2, r2, #15
 8003ac0:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ac6:	f023 0303 	bic.w	r3, r3, #3
 8003aca:	f043 0201 	orr.w	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ad2:	e007      	b.n	8003ae4 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad8:	f043 0210 	orr.w	r2, r3, #16
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003ae4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3724      	adds	r7, #36	@ 0x24
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd90      	pop	{r4, r7, pc}
 8003aee:	bf00      	nop
 8003af0:	2000000c 	.word	0x2000000c
 8003af4:	053e2d63 	.word	0x053e2d63
 8003af8:	50000100 	.word	0x50000100
 8003afc:	50000300 	.word	0x50000300
 8003b00:	fff04007 	.word	0xfff04007

08003b04 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003b10:	4851      	ldr	r0, [pc, #324]	@ (8003c58 <HAL_ADC_Start_DMA+0x154>)
 8003b12:	f7ff fdb5 	bl	8003680 <LL_ADC_GetMultimode>
 8003b16:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f7ff fe46 	bl	80037ae <LL_ADC_REG_IsConversionOngoing>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	f040 808f 	bne.w	8003c48 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_ADC_Start_DMA+0x34>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e08a      	b.n	8003c4e <HAL_ADC_Start_DMA+0x14a>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b46:	693b      	ldr	r3, [r7, #16]
 8003b48:	2b05      	cmp	r3, #5
 8003b4a:	d002      	beq.n	8003b52 <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b09      	cmp	r3, #9
 8003b50:	d173      	bne.n	8003c3a <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fc8e 	bl	8004474 <ADC_Enable>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003b5c:	7dfb      	ldrb	r3, [r7, #23]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d166      	bne.n	8003c30 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b66:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003b6a:	f023 0301 	bic.w	r3, r3, #1
 8003b6e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a38      	ldr	r2, [pc, #224]	@ (8003c5c <HAL_ADC_Start_DMA+0x158>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d002      	beq.n	8003b86 <HAL_ADC_Start_DMA+0x82>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	e001      	b.n	8003b8a <HAL_ADC_Start_DMA+0x86>
 8003b86:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	6812      	ldr	r2, [r2, #0]
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d002      	beq.n	8003b98 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d105      	bne.n	8003ba4 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d006      	beq.n	8003bbe <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bb4:	f023 0206 	bic.w	r2, r3, #6
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	661a      	str	r2, [r3, #96]	@ 0x60
 8003bbc:	e002      	b.n	8003bc4 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	4a25      	ldr	r2, [pc, #148]	@ (8003c60 <HAL_ADC_Start_DMA+0x15c>)
 8003bca:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd0:	4a24      	ldr	r2, [pc, #144]	@ (8003c64 <HAL_ADC_Start_DMA+0x160>)
 8003bd2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bd8:	4a23      	ldr	r2, [pc, #140]	@ (8003c68 <HAL_ADC_Start_DMA+0x164>)
 8003bda:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	221c      	movs	r2, #28
 8003be2:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f042 0210 	orr.w	r2, r2, #16
 8003bfa:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f042 0201 	orr.w	r2, r2, #1
 8003c0a:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	3340      	adds	r3, #64	@ 0x40
 8003c16:	4619      	mov	r1, r3
 8003c18:	68ba      	ldr	r2, [r7, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f000 ffc6 	bl	8004bac <HAL_DMA_Start_IT>
 8003c20:	4603      	mov	r3, r0
 8003c22:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff fdac 	bl	8003786 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003c2e:	e00d      	b.n	8003c4c <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	2200      	movs	r2, #0
 8003c34:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003c38:	e008      	b.n	8003c4c <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003c46:	e001      	b.n	8003c4c <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003c48:	2302      	movs	r3, #2
 8003c4a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3718      	adds	r7, #24
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
 8003c56:	bf00      	nop
 8003c58:	50000300 	.word	0x50000300
 8003c5c:	50000100 	.word	0x50000100
 8003c60:	08004581 	.word	0x08004581
 8003c64:	08004659 	.word	0x08004659
 8003c68:	08004675 	.word	0x08004675

08003c6c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b0b6      	sub	sp, #216	@ 0xd8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
 8003c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d101      	bne.n	8003cb6 <HAL_ADC_ConfigChannel+0x22>
 8003cb2:	2302      	movs	r3, #2
 8003cb4:	e3c8      	b.n	8004448 <HAL_ADC_ConfigChannel+0x7b4>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2201      	movs	r2, #1
 8003cba:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	f7ff fd73 	bl	80037ae <LL_ADC_REG_IsConversionOngoing>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 83ad 	bne.w	800442a <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6818      	ldr	r0, [r3, #0]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	6859      	ldr	r1, [r3, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	f7ff fc54 	bl	800358a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff fd61 	bl	80037ae <LL_ADC_REG_IsConversionOngoing>
 8003cec:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7ff fd6d 	bl	80037d4 <LL_ADC_INJ_IsConversionOngoing>
 8003cfa:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003cfe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f040 81d9 	bne.w	80040ba <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003d08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	f040 81d4 	bne.w	80040ba <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d1a:	d10f      	bne.n	8003d3c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6818      	ldr	r0, [r3, #0]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2200      	movs	r2, #0
 8003d26:	4619      	mov	r1, r3
 8003d28:	f7ff fc5b 	bl	80035e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003d34:	4618      	mov	r0, r3
 8003d36:	f7ff fc02 	bl	800353e <LL_ADC_SetSamplingTimeCommonConfig>
 8003d3a:	e00e      	b.n	8003d5a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6818      	ldr	r0, [r3, #0]
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	6819      	ldr	r1, [r3, #0]
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	461a      	mov	r2, r3
 8003d4a:	f7ff fc4a 	bl	80035e2 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	2100      	movs	r1, #0
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fbf2 	bl	800353e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695a      	ldr	r2, [r3, #20]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68db      	ldr	r3, [r3, #12]
 8003d64:	08db      	lsrs	r3, r3, #3
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b04      	cmp	r3, #4
 8003d7a:	d022      	beq.n	8003dc2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	6919      	ldr	r1, [r3, #16]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003d8c:	f7ff fb4c 	bl	8003428 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6818      	ldr	r0, [r3, #0]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	6919      	ldr	r1, [r3, #16]
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	699b      	ldr	r3, [r3, #24]
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	f7ff fb98 	bl	80034d2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6818      	ldr	r0, [r3, #0]
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	d102      	bne.n	8003db8 <HAL_ADC_ConfigChannel+0x124>
 8003db2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003db6:	e000      	b.n	8003dba <HAL_ADC_ConfigChannel+0x126>
 8003db8:	2300      	movs	r3, #0
 8003dba:	461a      	mov	r2, r3
 8003dbc:	f7ff fba4 	bl	8003508 <LL_ADC_SetOffsetSaturation>
 8003dc0:	e17b      	b.n	80040ba <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	2100      	movs	r1, #0
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7ff fb51 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10a      	bne.n	8003dee <HAL_ADC_ConfigChannel+0x15a>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2100      	movs	r1, #0
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7ff fb46 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8003de4:	4603      	mov	r3, r0
 8003de6:	0e9b      	lsrs	r3, r3, #26
 8003de8:	f003 021f 	and.w	r2, r3, #31
 8003dec:	e01e      	b.n	8003e2c <HAL_ADC_ConfigChannel+0x198>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fb3b 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003e04:	fa93 f3a3 	rbit	r3, r3
 8003e08:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003e0c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003e10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003e14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d101      	bne.n	8003e20 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003e1c:	2320      	movs	r3, #32
 8003e1e:	e004      	b.n	8003e2a <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003e20:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003e24:	fab3 f383 	clz	r3, r3
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d105      	bne.n	8003e44 <HAL_ADC_ConfigChannel+0x1b0>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	0e9b      	lsrs	r3, r3, #26
 8003e3e:	f003 031f 	and.w	r3, r3, #31
 8003e42:	e018      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x1e2>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e4c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003e50:	fa93 f3a3 	rbit	r3, r3
 8003e54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003e60:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003e68:	2320      	movs	r3, #32
 8003e6a:	e004      	b.n	8003e76 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003e6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003e70:	fab3 f383 	clz	r3, r3
 8003e74:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d106      	bne.n	8003e88 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2200      	movs	r2, #0
 8003e80:	2100      	movs	r1, #0
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7ff fb0a 	bl	800349c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7ff faee 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8003e94:	4603      	mov	r3, r0
 8003e96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d10a      	bne.n	8003eb4 <HAL_ADC_ConfigChannel+0x220>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2101      	movs	r1, #1
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7ff fae3 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	0e9b      	lsrs	r3, r3, #26
 8003eae:	f003 021f 	and.w	r2, r3, #31
 8003eb2:	e01e      	b.n	8003ef2 <HAL_ADC_ConfigChannel+0x25e>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	2101      	movs	r1, #1
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7ff fad8 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ec6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003eca:	fa93 f3a3 	rbit	r3, r3
 8003ece:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ed6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003eda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d101      	bne.n	8003ee6 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003ee2:	2320      	movs	r3, #32
 8003ee4:	e004      	b.n	8003ef0 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003ee6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003eea:	fab3 f383 	clz	r3, r3
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d105      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x276>
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	0e9b      	lsrs	r3, r3, #26
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	e018      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x2a8>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f12:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003f16:	fa93 f3a3 	rbit	r3, r3
 8003f1a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003f1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003f22:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003f26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8003f2e:	2320      	movs	r3, #32
 8003f30:	e004      	b.n	8003f3c <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8003f32:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f36:	fab3 f383 	clz	r3, r3
 8003f3a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f3c:	429a      	cmp	r2, r3
 8003f3e:	d106      	bne.n	8003f4e <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2200      	movs	r2, #0
 8003f46:	2101      	movs	r1, #1
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f7ff faa7 	bl	800349c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2102      	movs	r1, #2
 8003f54:	4618      	mov	r0, r3
 8003f56:	f7ff fa8b 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d10a      	bne.n	8003f7a <HAL_ADC_ConfigChannel+0x2e6>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2102      	movs	r1, #2
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff fa80 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8003f70:	4603      	mov	r3, r0
 8003f72:	0e9b      	lsrs	r3, r3, #26
 8003f74:	f003 021f 	and.w	r2, r3, #31
 8003f78:	e01e      	b.n	8003fb8 <HAL_ADC_ConfigChannel+0x324>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	2102      	movs	r1, #2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff fa75 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8003f86:	4603      	mov	r3, r0
 8003f88:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f90:	fa93 f3a3 	rbit	r3, r3
 8003f94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003f98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f9c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003fa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003fa8:	2320      	movs	r3, #32
 8003faa:	e004      	b.n	8003fb6 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003fac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003fb0:	fab3 f383 	clz	r3, r3
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d105      	bne.n	8003fd0 <HAL_ADC_ConfigChannel+0x33c>
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	0e9b      	lsrs	r3, r3, #26
 8003fca:	f003 031f 	and.w	r3, r3, #31
 8003fce:	e016      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x36a>
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fdc:	fa93 f3a3 	rbit	r3, r3
 8003fe0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003fe2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003fe4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	e004      	b.n	8003ffe <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003ff4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003ff8:	fab3 f383 	clz	r3, r3
 8003ffc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d106      	bne.n	8004010 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2200      	movs	r2, #0
 8004008:	2102      	movs	r1, #2
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff fa46 	bl	800349c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2103      	movs	r1, #3
 8004016:	4618      	mov	r0, r3
 8004018:	f7ff fa2a 	bl	8003470 <LL_ADC_GetOffsetChannel>
 800401c:	4603      	mov	r3, r0
 800401e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004022:	2b00      	cmp	r3, #0
 8004024:	d10a      	bne.n	800403c <HAL_ADC_ConfigChannel+0x3a8>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2103      	movs	r1, #3
 800402c:	4618      	mov	r0, r3
 800402e:	f7ff fa1f 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8004032:	4603      	mov	r3, r0
 8004034:	0e9b      	lsrs	r3, r3, #26
 8004036:	f003 021f 	and.w	r2, r3, #31
 800403a:	e017      	b.n	800406c <HAL_ADC_ConfigChannel+0x3d8>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2103      	movs	r1, #3
 8004042:	4618      	mov	r0, r3
 8004044:	f7ff fa14 	bl	8003470 <LL_ADC_GetOffsetChannel>
 8004048:	4603      	mov	r3, r0
 800404a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800404c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800404e:	fa93 f3a3 	rbit	r3, r3
 8004052:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8004054:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004056:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8004058:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800405e:	2320      	movs	r3, #32
 8004060:	e003      	b.n	800406a <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8004062:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004064:	fab3 f383 	clz	r3, r3
 8004068:	b2db      	uxtb	r3, r3
 800406a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004074:	2b00      	cmp	r3, #0
 8004076:	d105      	bne.n	8004084 <HAL_ADC_ConfigChannel+0x3f0>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	0e9b      	lsrs	r3, r3, #26
 800407e:	f003 031f 	and.w	r3, r3, #31
 8004082:	e011      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x414>
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800408a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800408c:	fa93 f3a3 	rbit	r3, r3
 8004090:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8004092:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004094:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8004096:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 800409c:	2320      	movs	r3, #32
 800409e:	e003      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80040a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80040a2:	fab3 f383 	clz	r3, r3
 80040a6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d106      	bne.n	80040ba <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2200      	movs	r2, #0
 80040b2:	2103      	movs	r1, #3
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7ff f9f1 	bl	800349c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fb4e 	bl	8003760 <LL_ADC_IsEnabled>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f040 8140 	bne.w	800434c <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6818      	ldr	r0, [r3, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6819      	ldr	r1, [r3, #0]
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	461a      	mov	r2, r3
 80040da:	f7ff faad 	bl	8003638 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	4a8f      	ldr	r2, [pc, #572]	@ (8004320 <HAL_ADC_ConfigChannel+0x68c>)
 80040e4:	4293      	cmp	r3, r2
 80040e6:	f040 8131 	bne.w	800434c <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d10b      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x47e>
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	0e9b      	lsrs	r3, r3, #26
 8004100:	3301      	adds	r3, #1
 8004102:	f003 031f 	and.w	r3, r3, #31
 8004106:	2b09      	cmp	r3, #9
 8004108:	bf94      	ite	ls
 800410a:	2301      	movls	r3, #1
 800410c:	2300      	movhi	r3, #0
 800410e:	b2db      	uxtb	r3, r3
 8004110:	e019      	b.n	8004146 <HAL_ADC_ConfigChannel+0x4b2>
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800411a:	fa93 f3a3 	rbit	r3, r3
 800411e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004120:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004122:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004124:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800412a:	2320      	movs	r3, #32
 800412c:	e003      	b.n	8004136 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 800412e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004130:	fab3 f383 	clz	r3, r3
 8004134:	b2db      	uxtb	r3, r3
 8004136:	3301      	adds	r3, #1
 8004138:	f003 031f 	and.w	r3, r3, #31
 800413c:	2b09      	cmp	r3, #9
 800413e:	bf94      	ite	ls
 8004140:	2301      	movls	r3, #1
 8004142:	2300      	movhi	r3, #0
 8004144:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004146:	2b00      	cmp	r3, #0
 8004148:	d079      	beq.n	800423e <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <HAL_ADC_ConfigChannel+0x4d2>
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	0e9b      	lsrs	r3, r3, #26
 800415c:	3301      	adds	r3, #1
 800415e:	069b      	lsls	r3, r3, #26
 8004160:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004164:	e015      	b.n	8004192 <HAL_ADC_ConfigChannel+0x4fe>
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800416c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800416e:	fa93 f3a3 	rbit	r3, r3
 8004172:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004174:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004176:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8004178:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800417a:	2b00      	cmp	r3, #0
 800417c:	d101      	bne.n	8004182 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 800417e:	2320      	movs	r3, #32
 8004180:	e003      	b.n	800418a <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8004182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004184:	fab3 f383 	clz	r3, r3
 8004188:	b2db      	uxtb	r3, r3
 800418a:	3301      	adds	r3, #1
 800418c:	069b      	lsls	r3, r3, #26
 800418e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419a:	2b00      	cmp	r3, #0
 800419c:	d109      	bne.n	80041b2 <HAL_ADC_ConfigChannel+0x51e>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	0e9b      	lsrs	r3, r3, #26
 80041a4:	3301      	adds	r3, #1
 80041a6:	f003 031f 	and.w	r3, r3, #31
 80041aa:	2101      	movs	r1, #1
 80041ac:	fa01 f303 	lsl.w	r3, r1, r3
 80041b0:	e017      	b.n	80041e2 <HAL_ADC_ConfigChannel+0x54e>
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80041ba:	fa93 f3a3 	rbit	r3, r3
 80041be:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80041c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80041c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d101      	bne.n	80041ce <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80041ca:	2320      	movs	r3, #32
 80041cc:	e003      	b.n	80041d6 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80041ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041d0:	fab3 f383 	clz	r3, r3
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	3301      	adds	r3, #1
 80041d8:	f003 031f 	and.w	r3, r3, #31
 80041dc:	2101      	movs	r1, #1
 80041de:	fa01 f303 	lsl.w	r3, r1, r3
 80041e2:	ea42 0103 	orr.w	r1, r2, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10a      	bne.n	8004208 <HAL_ADC_ConfigChannel+0x574>
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	0e9b      	lsrs	r3, r3, #26
 80041f8:	3301      	adds	r3, #1
 80041fa:	f003 021f 	and.w	r2, r3, #31
 80041fe:	4613      	mov	r3, r2
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	4413      	add	r3, r2
 8004204:	051b      	lsls	r3, r3, #20
 8004206:	e018      	b.n	800423a <HAL_ADC_ConfigChannel+0x5a6>
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	fa93 f3a3 	rbit	r3, r3
 8004214:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004218:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800421a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800421c:	2b00      	cmp	r3, #0
 800421e:	d101      	bne.n	8004224 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004220:	2320      	movs	r3, #32
 8004222:	e003      	b.n	800422c <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8004224:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004226:	fab3 f383 	clz	r3, r3
 800422a:	b2db      	uxtb	r3, r3
 800422c:	3301      	adds	r3, #1
 800422e:	f003 021f 	and.w	r2, r3, #31
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800423a:	430b      	orrs	r3, r1
 800423c:	e081      	b.n	8004342 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004246:	2b00      	cmp	r3, #0
 8004248:	d107      	bne.n	800425a <HAL_ADC_ConfigChannel+0x5c6>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	0e9b      	lsrs	r3, r3, #26
 8004250:	3301      	adds	r3, #1
 8004252:	069b      	lsls	r3, r3, #26
 8004254:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004258:	e015      	b.n	8004286 <HAL_ADC_ConfigChannel+0x5f2>
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004260:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004262:	fa93 f3a3 	rbit	r3, r3
 8004266:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8004268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800426a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800426c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8004272:	2320      	movs	r3, #32
 8004274:	e003      	b.n	800427e <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8004276:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004278:	fab3 f383 	clz	r3, r3
 800427c:	b2db      	uxtb	r3, r3
 800427e:	3301      	adds	r3, #1
 8004280:	069b      	lsls	r3, r3, #26
 8004282:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800428e:	2b00      	cmp	r3, #0
 8004290:	d109      	bne.n	80042a6 <HAL_ADC_ConfigChannel+0x612>
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	0e9b      	lsrs	r3, r3, #26
 8004298:	3301      	adds	r3, #1
 800429a:	f003 031f 	and.w	r3, r3, #31
 800429e:	2101      	movs	r1, #1
 80042a0:	fa01 f303 	lsl.w	r3, r1, r3
 80042a4:	e017      	b.n	80042d6 <HAL_ADC_ConfigChannel+0x642>
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ac:	6a3b      	ldr	r3, [r7, #32]
 80042ae:	fa93 f3a3 	rbit	r3, r3
 80042b2:	61fb      	str	r3, [r7, #28]
  return result;
 80042b4:	69fb      	ldr	r3, [r7, #28]
 80042b6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80042b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80042be:	2320      	movs	r3, #32
 80042c0:	e003      	b.n	80042ca <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80042c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c4:	fab3 f383 	clz	r3, r3
 80042c8:	b2db      	uxtb	r3, r3
 80042ca:	3301      	adds	r3, #1
 80042cc:	f003 031f 	and.w	r3, r3, #31
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	ea42 0103 	orr.w	r1, r2, r3
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10d      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x66e>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	0e9b      	lsrs	r3, r3, #26
 80042ec:	3301      	adds	r3, #1
 80042ee:	f003 021f 	and.w	r2, r3, #31
 80042f2:	4613      	mov	r3, r2
 80042f4:	005b      	lsls	r3, r3, #1
 80042f6:	4413      	add	r3, r2
 80042f8:	3b1e      	subs	r3, #30
 80042fa:	051b      	lsls	r3, r3, #20
 80042fc:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004300:	e01e      	b.n	8004340 <HAL_ADC_ConfigChannel+0x6ac>
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	fa93 f3a3 	rbit	r3, r3
 800430e:	613b      	str	r3, [r7, #16]
  return result;
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d104      	bne.n	8004324 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800431a:	2320      	movs	r3, #32
 800431c:	e006      	b.n	800432c <HAL_ADC_ConfigChannel+0x698>
 800431e:	bf00      	nop
 8004320:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	fab3 f383 	clz	r3, r3
 800432a:	b2db      	uxtb	r3, r3
 800432c:	3301      	adds	r3, #1
 800432e:	f003 021f 	and.w	r2, r3, #31
 8004332:	4613      	mov	r3, r2
 8004334:	005b      	lsls	r3, r3, #1
 8004336:	4413      	add	r3, r2
 8004338:	3b1e      	subs	r3, #30
 800433a:	051b      	lsls	r3, r3, #20
 800433c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004340:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8004342:	683a      	ldr	r2, [r7, #0]
 8004344:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004346:	4619      	mov	r1, r3
 8004348:	f7ff f94b 	bl	80035e2 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	681a      	ldr	r2, [r3, #0]
 8004350:	4b3f      	ldr	r3, [pc, #252]	@ (8004450 <HAL_ADC_ConfigChannel+0x7bc>)
 8004352:	4013      	ands	r3, r2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d071      	beq.n	800443c <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004358:	483e      	ldr	r0, [pc, #248]	@ (8004454 <HAL_ADC_ConfigChannel+0x7c0>)
 800435a:	f7ff f857 	bl	800340c <LL_ADC_GetCommonPathInternalCh>
 800435e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a3c      	ldr	r2, [pc, #240]	@ (8004458 <HAL_ADC_ConfigChannel+0x7c4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d004      	beq.n	8004376 <HAL_ADC_ConfigChannel+0x6e2>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a3a      	ldr	r2, [pc, #232]	@ (800445c <HAL_ADC_ConfigChannel+0x7c8>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d127      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004376:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800437a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d121      	bne.n	80043c6 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800438a:	d157      	bne.n	800443c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800438c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004390:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004394:	4619      	mov	r1, r3
 8004396:	482f      	ldr	r0, [pc, #188]	@ (8004454 <HAL_ADC_ConfigChannel+0x7c0>)
 8004398:	f7ff f825 	bl	80033e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800439c:	4b30      	ldr	r3, [pc, #192]	@ (8004460 <HAL_ADC_ConfigChannel+0x7cc>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	4a30      	ldr	r2, [pc, #192]	@ (8004464 <HAL_ADC_ConfigChannel+0x7d0>)
 80043a4:	fba2 2303 	umull	r2, r3, r2, r3
 80043a8:	099b      	lsrs	r3, r3, #6
 80043aa:	1c5a      	adds	r2, r3, #1
 80043ac:	4613      	mov	r3, r2
 80043ae:	005b      	lsls	r3, r3, #1
 80043b0:	4413      	add	r3, r2
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043b6:	e002      	b.n	80043be <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1f9      	bne.n	80043b8 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80043c4:	e03a      	b.n	800443c <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a27      	ldr	r2, [pc, #156]	@ (8004468 <HAL_ADC_ConfigChannel+0x7d4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d113      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80043d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10d      	bne.n	80043f8 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a22      	ldr	r2, [pc, #136]	@ (800446c <HAL_ADC_ConfigChannel+0x7d8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d02a      	beq.n	800443c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043e6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043ee:	4619      	mov	r1, r3
 80043f0:	4818      	ldr	r0, [pc, #96]	@ (8004454 <HAL_ADC_ConfigChannel+0x7c0>)
 80043f2:	f7fe fff8 	bl	80033e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043f6:	e021      	b.n	800443c <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a1c      	ldr	r2, [pc, #112]	@ (8004470 <HAL_ADC_ConfigChannel+0x7dc>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d11c      	bne.n	800443c <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004402:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004406:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800440a:	2b00      	cmp	r3, #0
 800440c:	d116      	bne.n	800443c <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a16      	ldr	r2, [pc, #88]	@ (800446c <HAL_ADC_ConfigChannel+0x7d8>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d011      	beq.n	800443c <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800441c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004420:	4619      	mov	r1, r3
 8004422:	480c      	ldr	r0, [pc, #48]	@ (8004454 <HAL_ADC_ConfigChannel+0x7c0>)
 8004424:	f7fe ffdf 	bl	80033e6 <LL_ADC_SetCommonPathInternalCh>
 8004428:	e008      	b.n	800443c <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800442e:	f043 0220 	orr.w	r2, r3, #32
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004444:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8004448:	4618      	mov	r0, r3
 800444a:	37d8      	adds	r7, #216	@ 0xd8
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	80080000 	.word	0x80080000
 8004454:	50000300 	.word	0x50000300
 8004458:	c3210000 	.word	0xc3210000
 800445c:	90c00010 	.word	0x90c00010
 8004460:	2000000c 	.word	0x2000000c
 8004464:	053e2d63 	.word	0x053e2d63
 8004468:	c7520000 	.word	0xc7520000
 800446c:	50000100 	.word	0x50000100
 8004470:	cb840000 	.word	0xcb840000

08004474 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800447c:	2300      	movs	r3, #0
 800447e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4618      	mov	r0, r3
 8004486:	f7ff f96b 	bl	8003760 <LL_ADC_IsEnabled>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d169      	bne.n	8004564 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	689a      	ldr	r2, [r3, #8]
 8004496:	4b36      	ldr	r3, [pc, #216]	@ (8004570 <ADC_Enable+0xfc>)
 8004498:	4013      	ands	r3, r2
 800449a:	2b00      	cmp	r3, #0
 800449c:	d00d      	beq.n	80044ba <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044a2:	f043 0210 	orr.w	r2, r3, #16
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ae:	f043 0201 	orr.w	r2, r3, #1
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e055      	b.n	8004566 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4618      	mov	r0, r3
 80044c0:	f7ff f93a 	bl	8003738 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044c4:	482b      	ldr	r0, [pc, #172]	@ (8004574 <ADC_Enable+0x100>)
 80044c6:	f7fe ffa1 	bl	800340c <LL_ADC_GetCommonPathInternalCh>
 80044ca:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80044cc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d013      	beq.n	80044fc <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044d4:	4b28      	ldr	r3, [pc, #160]	@ (8004578 <ADC_Enable+0x104>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	099b      	lsrs	r3, r3, #6
 80044da:	4a28      	ldr	r2, [pc, #160]	@ (800457c <ADC_Enable+0x108>)
 80044dc:	fba2 2303 	umull	r2, r3, r2, r3
 80044e0:	099b      	lsrs	r3, r3, #6
 80044e2:	1c5a      	adds	r2, r3, #1
 80044e4:	4613      	mov	r3, r2
 80044e6:	005b      	lsls	r3, r3, #1
 80044e8:	4413      	add	r3, r2
 80044ea:	009b      	lsls	r3, r3, #2
 80044ec:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044ee:	e002      	b.n	80044f6 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	3b01      	subs	r3, #1
 80044f4:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d1f9      	bne.n	80044f0 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80044fc:	f7fe ff32 	bl	8003364 <HAL_GetTick>
 8004500:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004502:	e028      	b.n	8004556 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4618      	mov	r0, r3
 800450a:	f7ff f929 	bl	8003760 <LL_ADC_IsEnabled>
 800450e:	4603      	mov	r3, r0
 8004510:	2b00      	cmp	r3, #0
 8004512:	d104      	bne.n	800451e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f7ff f90d 	bl	8003738 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800451e:	f7fe ff21 	bl	8003364 <HAL_GetTick>
 8004522:	4602      	mov	r2, r0
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	1ad3      	subs	r3, r2, r3
 8004528:	2b02      	cmp	r3, #2
 800452a:	d914      	bls.n	8004556 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b01      	cmp	r3, #1
 8004538:	d00d      	beq.n	8004556 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800453e:	f043 0210 	orr.w	r2, r3, #16
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800454a:	f043 0201 	orr.w	r2, r3, #1
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e007      	b.n	8004566 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d1cf      	bne.n	8004504 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3710      	adds	r7, #16
 800456a:	46bd      	mov	sp, r7
 800456c:	bd80      	pop	{r7, pc}
 800456e:	bf00      	nop
 8004570:	8000003f 	.word	0x8000003f
 8004574:	50000300 	.word	0x50000300
 8004578:	2000000c 	.word	0x2000000c
 800457c:	053e2d63 	.word	0x053e2d63

08004580 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004592:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004596:	2b00      	cmp	r3, #0
 8004598:	d14b      	bne.n	8004632 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d021      	beq.n	80045f8 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe ffd3 	bl	8003564 <LL_ADC_REG_IsTriggerSourceSWStart>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d032      	beq.n	800462a <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68db      	ldr	r3, [r3, #12]
 80045ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d12b      	bne.n	800462a <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045d6:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045e2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d11f      	bne.n	800462a <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045ee:	f043 0201 	orr.w	r2, r3, #1
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80045f6:	e018      	b.n	800462a <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d111      	bne.n	800462a <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004616:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d105      	bne.n	800462a <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004622:	f043 0201 	orr.w	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800462a:	68f8      	ldr	r0, [r7, #12]
 800462c:	f7fc ff18 	bl	8001460 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004630:	e00e      	b.n	8004650 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004636:	f003 0310 	and.w	r3, r3, #16
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800463e:	68f8      	ldr	r0, [r7, #12]
 8004640:	f7ff fb1e 	bl	8003c80 <HAL_ADC_ErrorCallback>
}
 8004644:	e004      	b.n	8004650 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	4798      	blx	r3
}
 8004650:	bf00      	nop
 8004652:	3710      	adds	r7, #16
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}

08004658 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b084      	sub	sp, #16
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004664:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff fb00 	bl	8003c6c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}

08004674 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004680:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004686:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004692:	f043 0204 	orr.w	r2, r3, #4
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff faf0 	bl	8003c80 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80046a0:	bf00      	nop
 80046a2:	3710      	adds	r7, #16
 80046a4:	46bd      	mov	sp, r7
 80046a6:	bd80      	pop	{r7, pc}

080046a8 <LL_ADC_IsEnabled>:
{
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <LL_ADC_IsEnabled+0x18>
 80046bc:	2301      	movs	r3, #1
 80046be:	e000      	b.n	80046c2 <LL_ADC_IsEnabled+0x1a>
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	370c      	adds	r7, #12
 80046c6:	46bd      	mov	sp, r7
 80046c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046cc:	4770      	bx	lr

080046ce <LL_ADC_REG_IsConversionOngoing>:
{
 80046ce:	b480      	push	{r7}
 80046d0:	b083      	sub	sp, #12
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f003 0304 	and.w	r3, r3, #4
 80046de:	2b04      	cmp	r3, #4
 80046e0:	d101      	bne.n	80046e6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80046e2:	2301      	movs	r3, #1
 80046e4:	e000      	b.n	80046e8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr

080046f4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 80046f4:	b590      	push	{r4, r7, lr}
 80046f6:	b0a1      	sub	sp, #132	@ 0x84
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046fe:	2300      	movs	r3, #0
 8004700:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800470e:	2302      	movs	r3, #2
 8004710:	e08b      	b.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800471a:	2300      	movs	r3, #0
 800471c:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 800471e:	2300      	movs	r3, #0
 8004720:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800472a:	d102      	bne.n	8004732 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800472c:	4b41      	ldr	r3, [pc, #260]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800472e:	60bb      	str	r3, [r7, #8]
 8004730:	e001      	b.n	8004736 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004732:	2300      	movs	r3, #0
 8004734:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d10b      	bne.n	8004754 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004740:	f043 0220 	orr.w	r2, r3, #32
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e06a      	b.n	800482a <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4618      	mov	r0, r3
 8004758:	f7ff ffb9 	bl	80046ce <LL_ADC_REG_IsConversionOngoing>
 800475c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff ffb3 	bl	80046ce <LL_ADC_REG_IsConversionOngoing>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d14c      	bne.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 800476e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004770:	2b00      	cmp	r3, #0
 8004772:	d149      	bne.n	8004808 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004774:	4b30      	ldr	r3, [pc, #192]	@ (8004838 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004776:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d028      	beq.n	80047d2 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004780:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	6859      	ldr	r1, [r3, #4]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004792:	035b      	lsls	r3, r3, #13
 8004794:	430b      	orrs	r3, r1
 8004796:	431a      	orrs	r2, r3
 8004798:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800479a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800479c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80047a0:	f7ff ff82 	bl	80046a8 <LL_ADC_IsEnabled>
 80047a4:	4604      	mov	r4, r0
 80047a6:	4823      	ldr	r0, [pc, #140]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80047a8:	f7ff ff7e 	bl	80046a8 <LL_ADC_IsEnabled>
 80047ac:	4603      	mov	r3, r0
 80047ae:	4323      	orrs	r3, r4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d133      	bne.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80047b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047bc:	f023 030f 	bic.w	r3, r3, #15
 80047c0:	683a      	ldr	r2, [r7, #0]
 80047c2:	6811      	ldr	r1, [r2, #0]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	6892      	ldr	r2, [r2, #8]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	431a      	orrs	r2, r3
 80047cc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047ce:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80047d0:	e024      	b.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80047d2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047da:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047dc:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047de:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80047e2:	f7ff ff61 	bl	80046a8 <LL_ADC_IsEnabled>
 80047e6:	4604      	mov	r4, r0
 80047e8:	4812      	ldr	r0, [pc, #72]	@ (8004834 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80047ea:	f7ff ff5d 	bl	80046a8 <LL_ADC_IsEnabled>
 80047ee:	4603      	mov	r3, r0
 80047f0:	4323      	orrs	r3, r4
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d112      	bne.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80047f6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80047fe:	f023 030f 	bic.w	r3, r3, #15
 8004802:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004804:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004806:	e009      	b.n	800481c <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800480c:	f043 0220 	orr.w	r2, r3, #32
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004814:	2301      	movs	r3, #1
 8004816:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800481a:	e000      	b.n	800481e <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800481c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004826:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800482a:	4618      	mov	r0, r3
 800482c:	3784      	adds	r7, #132	@ 0x84
 800482e:	46bd      	mov	sp, r7
 8004830:	bd90      	pop	{r4, r7, pc}
 8004832:	bf00      	nop
 8004834:	50000100 	.word	0x50000100
 8004838:	50000300 	.word	0x50000300

0800483c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f003 0307 	and.w	r3, r3, #7
 800484a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800484c:	4b0c      	ldr	r3, [pc, #48]	@ (8004880 <__NVIC_SetPriorityGrouping+0x44>)
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004858:	4013      	ands	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004864:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004868:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800486c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800486e:	4a04      	ldr	r2, [pc, #16]	@ (8004880 <__NVIC_SetPriorityGrouping+0x44>)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	60d3      	str	r3, [r2, #12]
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr
 8004880:	e000ed00 	.word	0xe000ed00

08004884 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004888:	4b04      	ldr	r3, [pc, #16]	@ (800489c <__NVIC_GetPriorityGrouping+0x18>)
 800488a:	68db      	ldr	r3, [r3, #12]
 800488c:	0a1b      	lsrs	r3, r3, #8
 800488e:	f003 0307 	and.w	r3, r3, #7
}
 8004892:	4618      	mov	r0, r3
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	e000ed00 	.word	0xe000ed00

080048a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80048a0:	b480      	push	{r7}
 80048a2:	b083      	sub	sp, #12
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	4603      	mov	r3, r0
 80048a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	db0b      	blt.n	80048ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80048b2:	79fb      	ldrb	r3, [r7, #7]
 80048b4:	f003 021f 	and.w	r2, r3, #31
 80048b8:	4907      	ldr	r1, [pc, #28]	@ (80048d8 <__NVIC_EnableIRQ+0x38>)
 80048ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048be:	095b      	lsrs	r3, r3, #5
 80048c0:	2001      	movs	r0, #1
 80048c2:	fa00 f202 	lsl.w	r2, r0, r2
 80048c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80048ca:	bf00      	nop
 80048cc:	370c      	adds	r7, #12
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	e000e100 	.word	0xe000e100

080048dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	4603      	mov	r3, r0
 80048e4:	6039      	str	r1, [r7, #0]
 80048e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80048e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	db0a      	blt.n	8004906 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	b2da      	uxtb	r2, r3
 80048f4:	490c      	ldr	r1, [pc, #48]	@ (8004928 <__NVIC_SetPriority+0x4c>)
 80048f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80048fa:	0112      	lsls	r2, r2, #4
 80048fc:	b2d2      	uxtb	r2, r2
 80048fe:	440b      	add	r3, r1
 8004900:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004904:	e00a      	b.n	800491c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	b2da      	uxtb	r2, r3
 800490a:	4908      	ldr	r1, [pc, #32]	@ (800492c <__NVIC_SetPriority+0x50>)
 800490c:	79fb      	ldrb	r3, [r7, #7]
 800490e:	f003 030f 	and.w	r3, r3, #15
 8004912:	3b04      	subs	r3, #4
 8004914:	0112      	lsls	r2, r2, #4
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	440b      	add	r3, r1
 800491a:	761a      	strb	r2, [r3, #24]
}
 800491c:	bf00      	nop
 800491e:	370c      	adds	r7, #12
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr
 8004928:	e000e100 	.word	0xe000e100
 800492c:	e000ed00 	.word	0xe000ed00

08004930 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004930:	b480      	push	{r7}
 8004932:	b089      	sub	sp, #36	@ 0x24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	f1c3 0307 	rsb	r3, r3, #7
 800494a:	2b04      	cmp	r3, #4
 800494c:	bf28      	it	cs
 800494e:	2304      	movcs	r3, #4
 8004950:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	3304      	adds	r3, #4
 8004956:	2b06      	cmp	r3, #6
 8004958:	d902      	bls.n	8004960 <NVIC_EncodePriority+0x30>
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	3b03      	subs	r3, #3
 800495e:	e000      	b.n	8004962 <NVIC_EncodePriority+0x32>
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004964:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004968:	69bb      	ldr	r3, [r7, #24]
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43da      	mvns	r2, r3
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	401a      	ands	r2, r3
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004978:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fa01 f303 	lsl.w	r3, r1, r3
 8004982:	43d9      	mvns	r1, r3
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004988:	4313      	orrs	r3, r2
         );
}
 800498a:	4618      	mov	r0, r3
 800498c:	3724      	adds	r7, #36	@ 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
	...

08004998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b082      	sub	sp, #8
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049a8:	d301      	bcc.n	80049ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80049aa:	2301      	movs	r3, #1
 80049ac:	e00f      	b.n	80049ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80049ae:	4a0a      	ldr	r2, [pc, #40]	@ (80049d8 <SysTick_Config+0x40>)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	3b01      	subs	r3, #1
 80049b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80049b6:	210f      	movs	r1, #15
 80049b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80049bc:	f7ff ff8e 	bl	80048dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80049c0:	4b05      	ldr	r3, [pc, #20]	@ (80049d8 <SysTick_Config+0x40>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80049c6:	4b04      	ldr	r3, [pc, #16]	@ (80049d8 <SysTick_Config+0x40>)
 80049c8:	2207      	movs	r2, #7
 80049ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80049cc:	2300      	movs	r3, #0
}
 80049ce:	4618      	mov	r0, r3
 80049d0:	3708      	adds	r7, #8
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	bf00      	nop
 80049d8:	e000e010 	.word	0xe000e010

080049dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80049e4:	6878      	ldr	r0, [r7, #4]
 80049e6:	f7ff ff29 	bl	800483c <__NVIC_SetPriorityGrouping>
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}

080049f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80049f2:	b580      	push	{r7, lr}
 80049f4:	b086      	sub	sp, #24
 80049f6:	af00      	add	r7, sp, #0
 80049f8:	4603      	mov	r3, r0
 80049fa:	60b9      	str	r1, [r7, #8]
 80049fc:	607a      	str	r2, [r7, #4]
 80049fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004a00:	f7ff ff40 	bl	8004884 <__NVIC_GetPriorityGrouping>
 8004a04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	68b9      	ldr	r1, [r7, #8]
 8004a0a:	6978      	ldr	r0, [r7, #20]
 8004a0c:	f7ff ff90 	bl	8004930 <NVIC_EncodePriority>
 8004a10:	4602      	mov	r2, r0
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	4611      	mov	r1, r2
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f7ff ff5f 	bl	80048dc <__NVIC_SetPriority>
}
 8004a1e:	bf00      	nop
 8004a20:	3718      	adds	r7, #24
 8004a22:	46bd      	mov	sp, r7
 8004a24:	bd80      	pop	{r7, pc}

08004a26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b082      	sub	sp, #8
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004a30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004a34:	4618      	mov	r0, r3
 8004a36:	f7ff ff33 	bl	80048a0 <__NVIC_EnableIRQ>
}
 8004a3a:	bf00      	nop
 8004a3c:	3708      	adds	r7, #8
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}

08004a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a42:	b580      	push	{r7, lr}
 8004a44:	b082      	sub	sp, #8
 8004a46:	af00      	add	r7, sp, #0
 8004a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f7ff ffa4 	bl	8004998 <SysTick_Config>
 8004a50:	4603      	mov	r3, r0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
	...

08004a5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
 8004a6c:	e08d      	b.n	8004b8a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	461a      	mov	r2, r3
 8004a74:	4b47      	ldr	r3, [pc, #284]	@ (8004b94 <HAL_DMA_Init+0x138>)
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d80f      	bhi.n	8004a9a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	461a      	mov	r2, r3
 8004a80:	4b45      	ldr	r3, [pc, #276]	@ (8004b98 <HAL_DMA_Init+0x13c>)
 8004a82:	4413      	add	r3, r2
 8004a84:	4a45      	ldr	r2, [pc, #276]	@ (8004b9c <HAL_DMA_Init+0x140>)
 8004a86:	fba2 2303 	umull	r2, r3, r2, r3
 8004a8a:	091b      	lsrs	r3, r3, #4
 8004a8c:	009a      	lsls	r2, r3, #2
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a42      	ldr	r2, [pc, #264]	@ (8004ba0 <HAL_DMA_Init+0x144>)
 8004a96:	641a      	str	r2, [r3, #64]	@ 0x40
 8004a98:	e00e      	b.n	8004ab8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	4b40      	ldr	r3, [pc, #256]	@ (8004ba4 <HAL_DMA_Init+0x148>)
 8004aa2:	4413      	add	r3, r2
 8004aa4:	4a3d      	ldr	r2, [pc, #244]	@ (8004b9c <HAL_DMA_Init+0x140>)
 8004aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aaa:	091b      	lsrs	r3, r3, #4
 8004aac:	009a      	lsls	r2, r3, #2
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ba8 <HAL_DMA_Init+0x14c>)
 8004ab6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2202      	movs	r2, #2
 8004abc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004ace:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004ad2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	691b      	ldr	r3, [r3, #16]
 8004ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	6a1b      	ldr	r3, [r3, #32]
 8004afa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68fa      	ldr	r2, [r7, #12]
 8004b08:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 fa82 	bl	8005014 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b18:	d102      	bne.n	8004b20 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b28:	b2d2      	uxtb	r2, r2
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004b34:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d010      	beq.n	8004b60 <HAL_DMA_Init+0x104>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b04      	cmp	r3, #4
 8004b44:	d80c      	bhi.n	8004b60 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f000 faa2 	bl	8005090 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b50:	2200      	movs	r2, #0
 8004b52:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b58:	687a      	ldr	r2, [r7, #4]
 8004b5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004b5c:	605a      	str	r2, [r3, #4]
 8004b5e:	e008      	b.n	8004b72 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2200      	movs	r2, #0
 8004b76:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3710      	adds	r7, #16
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	40020407 	.word	0x40020407
 8004b98:	bffdfff8 	.word	0xbffdfff8
 8004b9c:	cccccccd 	.word	0xcccccccd
 8004ba0:	40020000 	.word	0x40020000
 8004ba4:	bffdfbf8 	.word	0xbffdfbf8
 8004ba8:	40020400 	.word	0x40020400

08004bac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b086      	sub	sp, #24
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	60f8      	str	r0, [r7, #12]
 8004bb4:	60b9      	str	r1, [r7, #8]
 8004bb6:	607a      	str	r2, [r7, #4]
 8004bb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bc4:	2b01      	cmp	r3, #1
 8004bc6:	d101      	bne.n	8004bcc <HAL_DMA_Start_IT+0x20>
 8004bc8:	2302      	movs	r3, #2
 8004bca:	e066      	b.n	8004c9a <HAL_DMA_Start_IT+0xee>
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2201      	movs	r2, #1
 8004bd0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004bda:	b2db      	uxtb	r3, r3
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d155      	bne.n	8004c8c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f022 0201 	bic.w	r2, r2, #1
 8004bfc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	68b9      	ldr	r1, [r7, #8]
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f9c7 	bl	8004f98 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d008      	beq.n	8004c24 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 020e 	orr.w	r2, r2, #14
 8004c20:	601a      	str	r2, [r3, #0]
 8004c22:	e00f      	b.n	8004c44 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f022 0204 	bic.w	r2, r2, #4
 8004c32:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 020a 	orr.w	r2, r2, #10
 8004c42:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c5c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c60:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d007      	beq.n	8004c7a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c78:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
 8004c8a:	e005      	b.n	8004c98 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004c94:	2302      	movs	r3, #2
 8004c96:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004c98:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	3718      	adds	r7, #24
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b085      	sub	sp, #20
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004caa:	2300      	movs	r3, #0
 8004cac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d005      	beq.n	8004cc6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2204      	movs	r2, #4
 8004cbe:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004cc0:	2301      	movs	r3, #1
 8004cc2:	73fb      	strb	r3, [r7, #15]
 8004cc4:	e037      	b.n	8004d36 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f022 020e 	bic.w	r2, r2, #14
 8004cd4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004cda:	681a      	ldr	r2, [r3, #0]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ce0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ce4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f022 0201 	bic.w	r2, r2, #1
 8004cf4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	f003 021f 	and.w	r2, r3, #31
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	2101      	movs	r1, #1
 8004d04:	fa01 f202 	lsl.w	r2, r1, r2
 8004d08:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004d12:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d00c      	beq.n	8004d36 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d20:	681a      	ldr	r2, [r3, #0]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004d2a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004d34:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004d46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d00d      	beq.n	8004d88 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2204      	movs	r2, #4
 8004d70:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	73fb      	strb	r3, [r7, #15]
 8004d86:	e047      	b.n	8004e18 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f022 020e 	bic.w	r2, r2, #14
 8004d96:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 0201 	bic.w	r2, r2, #1
 8004da6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004db2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004db6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dbc:	f003 021f 	and.w	r2, r3, #31
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc4:	2101      	movs	r1, #1
 8004dc6:	fa01 f202 	lsl.w	r2, r1, r2
 8004dca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004dd4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00c      	beq.n	8004df8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004dec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004df6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d003      	beq.n	8004e18 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	4798      	blx	r3
    }
  }
  return status;
 8004e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3710      	adds	r7, #16
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b084      	sub	sp, #16
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e3e:	f003 031f 	and.w	r3, r3, #31
 8004e42:	2204      	movs	r2, #4
 8004e44:	409a      	lsls	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d026      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x7a>
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	f003 0304 	and.w	r3, r3, #4
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d021      	beq.n	8004e9c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0320 	and.w	r3, r3, #32
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d107      	bne.n	8004e76 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f022 0204 	bic.w	r2, r2, #4
 8004e74:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e7a:	f003 021f 	and.w	r2, r3, #31
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	2104      	movs	r1, #4
 8004e84:	fa01 f202 	lsl.w	r2, r1, r2
 8004e88:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d071      	beq.n	8004f76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004e9a:	e06c      	b.n	8004f76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea0:	f003 031f 	and.w	r3, r3, #31
 8004ea4:	2202      	movs	r2, #2
 8004ea6:	409a      	lsls	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4013      	ands	r3, r2
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d02e      	beq.n	8004f0e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d029      	beq.n	8004f0e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10b      	bne.n	8004ee0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 020a 	bic.w	r2, r2, #10
 8004ed6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ee4:	f003 021f 	and.w	r2, r3, #31
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004eec:	2102      	movs	r1, #2
 8004eee:	fa01 f202 	lsl.w	r2, r1, r2
 8004ef2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d038      	beq.n	8004f76 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f0c:	e033      	b.n	8004f76 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f12:	f003 031f 	and.w	r3, r3, #31
 8004f16:	2208      	movs	r2, #8
 8004f18:	409a      	lsls	r2, r3
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4013      	ands	r3, r2
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d02a      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d025      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681a      	ldr	r2, [r3, #0]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f022 020e 	bic.w	r2, r2, #14
 8004f3a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f40:	f003 021f 	and.w	r2, r3, #31
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f48:	2101      	movs	r1, #1
 8004f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8004f4e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2201      	movs	r2, #1
 8004f5a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d004      	beq.n	8004f78 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f76:	bf00      	nop
 8004f78:	bf00      	nop
}
 8004f7a:	3710      	adds	r7, #16
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bd80      	pop	{r7, pc}

08004f80 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004f80:	b480      	push	{r7}
 8004f82:	b083      	sub	sp, #12
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
 8004fa4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fae:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d004      	beq.n	8004fc2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004fc0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fc6:	f003 021f 	and.w	r2, r3, #31
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fce:	2101      	movs	r1, #1
 8004fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8004fd4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b10      	cmp	r3, #16
 8004fe4:	d108      	bne.n	8004ff8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68ba      	ldr	r2, [r7, #8]
 8004ff4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004ff6:	e007      	b.n	8005008 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68ba      	ldr	r2, [r7, #8]
 8004ffe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	60da      	str	r2, [r3, #12]
}
 8005008:	bf00      	nop
 800500a:	3714      	adds	r7, #20
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005014:	b480      	push	{r7}
 8005016:	b087      	sub	sp, #28
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	461a      	mov	r2, r3
 8005022:	4b16      	ldr	r3, [pc, #88]	@ (800507c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005024:	429a      	cmp	r2, r3
 8005026:	d802      	bhi.n	800502e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005028:	4b15      	ldr	r3, [pc, #84]	@ (8005080 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	e001      	b.n	8005032 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800502e:	4b15      	ldr	r3, [pc, #84]	@ (8005084 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005030:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	b2db      	uxtb	r3, r3
 800503c:	3b08      	subs	r3, #8
 800503e:	4a12      	ldr	r2, [pc, #72]	@ (8005088 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005040:	fba2 2303 	umull	r2, r3, r2, r3
 8005044:	091b      	lsrs	r3, r3, #4
 8005046:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504c:	089b      	lsrs	r3, r3, #2
 800504e:	009a      	lsls	r2, r3, #2
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	4413      	add	r3, r2
 8005054:	461a      	mov	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a0b      	ldr	r2, [pc, #44]	@ (800508c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800505e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f003 031f 	and.w	r3, r3, #31
 8005066:	2201      	movs	r2, #1
 8005068:	409a      	lsls	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40020407 	.word	0x40020407
 8005080:	40020800 	.word	0x40020800
 8005084:	40020820 	.word	0x40020820
 8005088:	cccccccd 	.word	0xcccccccd
 800508c:	40020880 	.word	0x40020880

08005090 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	b2db      	uxtb	r3, r3
 800509e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050a4:	4413      	add	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	461a      	mov	r2, r3
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a08      	ldr	r2, [pc, #32]	@ (80050d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050b2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	f003 031f 	and.w	r3, r3, #31
 80050bc:	2201      	movs	r2, #1
 80050be:	409a      	lsls	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80050c4:	bf00      	nop
 80050c6:	3714      	adds	r7, #20
 80050c8:	46bd      	mov	sp, r7
 80050ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ce:	4770      	bx	lr
 80050d0:	1000823f 	.word	0x1000823f
 80050d4:	40020940 	.word	0x40020940

080050d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d8:	b480      	push	{r7}
 80050da:	b087      	sub	sp, #28
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050e2:	2300      	movs	r3, #0
 80050e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050e6:	e15a      	b.n	800539e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	2101      	movs	r1, #1
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	fa01 f303 	lsl.w	r3, r1, r3
 80050f4:	4013      	ands	r3, r2
 80050f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 814c 	beq.w	8005398 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	f003 0303 	and.w	r3, r3, #3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d005      	beq.n	8005118 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005114:	2b02      	cmp	r3, #2
 8005116:	d130      	bne.n	800517a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	2203      	movs	r2, #3
 8005124:	fa02 f303 	lsl.w	r3, r2, r3
 8005128:	43db      	mvns	r3, r3
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4013      	ands	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005130:	683b      	ldr	r3, [r7, #0]
 8005132:	68da      	ldr	r2, [r3, #12]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	005b      	lsls	r3, r3, #1
 8005138:	fa02 f303 	lsl.w	r3, r2, r3
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	4313      	orrs	r3, r2
 8005140:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	693a      	ldr	r2, [r7, #16]
 8005146:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800514e:	2201      	movs	r2, #1
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	fa02 f303 	lsl.w	r3, r2, r3
 8005156:	43db      	mvns	r3, r3
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	4013      	ands	r3, r2
 800515c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	091b      	lsrs	r3, r3, #4
 8005164:	f003 0201 	and.w	r2, r3, #1
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	4313      	orrs	r3, r2
 8005172:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b03      	cmp	r3, #3
 8005184:	d017      	beq.n	80051b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	68db      	ldr	r3, [r3, #12]
 800518a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	2203      	movs	r2, #3
 8005192:	fa02 f303 	lsl.w	r3, r2, r3
 8005196:	43db      	mvns	r3, r3
 8005198:	693a      	ldr	r2, [r7, #16]
 800519a:	4013      	ands	r3, r2
 800519c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	005b      	lsls	r3, r3, #1
 80051a6:	fa02 f303 	lsl.w	r3, r2, r3
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	f003 0303 	and.w	r3, r3, #3
 80051be:	2b02      	cmp	r3, #2
 80051c0:	d123      	bne.n	800520a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	08da      	lsrs	r2, r3, #3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	3208      	adds	r2, #8
 80051ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f003 0307 	and.w	r3, r3, #7
 80051d6:	009b      	lsls	r3, r3, #2
 80051d8:	220f      	movs	r2, #15
 80051da:	fa02 f303 	lsl.w	r3, r2, r3
 80051de:	43db      	mvns	r3, r3
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4013      	ands	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	691a      	ldr	r2, [r3, #16]
 80051ea:	697b      	ldr	r3, [r7, #20]
 80051ec:	f003 0307 	and.w	r3, r3, #7
 80051f0:	009b      	lsls	r3, r3, #2
 80051f2:	fa02 f303 	lsl.w	r3, r2, r3
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	08da      	lsrs	r2, r3, #3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	3208      	adds	r2, #8
 8005204:	6939      	ldr	r1, [r7, #16]
 8005206:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	2203      	movs	r2, #3
 8005216:	fa02 f303 	lsl.w	r3, r2, r3
 800521a:	43db      	mvns	r3, r3
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4013      	ands	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f003 0203 	and.w	r2, r3, #3
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	005b      	lsls	r3, r3, #1
 800522e:	fa02 f303 	lsl.w	r3, r2, r3
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	4313      	orrs	r3, r2
 8005236:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	693a      	ldr	r2, [r7, #16]
 800523c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005246:	2b00      	cmp	r3, #0
 8005248:	f000 80a6 	beq.w	8005398 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800524c:	4b5b      	ldr	r3, [pc, #364]	@ (80053bc <HAL_GPIO_Init+0x2e4>)
 800524e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005250:	4a5a      	ldr	r2, [pc, #360]	@ (80053bc <HAL_GPIO_Init+0x2e4>)
 8005252:	f043 0301 	orr.w	r3, r3, #1
 8005256:	6613      	str	r3, [r2, #96]	@ 0x60
 8005258:	4b58      	ldr	r3, [pc, #352]	@ (80053bc <HAL_GPIO_Init+0x2e4>)
 800525a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800525c:	f003 0301 	and.w	r3, r3, #1
 8005260:	60bb      	str	r3, [r7, #8]
 8005262:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005264:	4a56      	ldr	r2, [pc, #344]	@ (80053c0 <HAL_GPIO_Init+0x2e8>)
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	3302      	adds	r3, #2
 800526c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005270:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	f003 0303 	and.w	r3, r3, #3
 8005278:	009b      	lsls	r3, r3, #2
 800527a:	220f      	movs	r2, #15
 800527c:	fa02 f303 	lsl.w	r3, r2, r3
 8005280:	43db      	mvns	r3, r3
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	4013      	ands	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800528e:	d01f      	beq.n	80052d0 <HAL_GPIO_Init+0x1f8>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	4a4c      	ldr	r2, [pc, #304]	@ (80053c4 <HAL_GPIO_Init+0x2ec>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d019      	beq.n	80052cc <HAL_GPIO_Init+0x1f4>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	4a4b      	ldr	r2, [pc, #300]	@ (80053c8 <HAL_GPIO_Init+0x2f0>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d013      	beq.n	80052c8 <HAL_GPIO_Init+0x1f0>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a4a      	ldr	r2, [pc, #296]	@ (80053cc <HAL_GPIO_Init+0x2f4>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00d      	beq.n	80052c4 <HAL_GPIO_Init+0x1ec>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a49      	ldr	r2, [pc, #292]	@ (80053d0 <HAL_GPIO_Init+0x2f8>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d007      	beq.n	80052c0 <HAL_GPIO_Init+0x1e8>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a48      	ldr	r2, [pc, #288]	@ (80053d4 <HAL_GPIO_Init+0x2fc>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d101      	bne.n	80052bc <HAL_GPIO_Init+0x1e4>
 80052b8:	2305      	movs	r3, #5
 80052ba:	e00a      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052bc:	2306      	movs	r3, #6
 80052be:	e008      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052c0:	2304      	movs	r3, #4
 80052c2:	e006      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052c4:	2303      	movs	r3, #3
 80052c6:	e004      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052c8:	2302      	movs	r3, #2
 80052ca:	e002      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <HAL_GPIO_Init+0x1fa>
 80052d0:	2300      	movs	r3, #0
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	f002 0203 	and.w	r2, r2, #3
 80052d8:	0092      	lsls	r2, r2, #2
 80052da:	4093      	lsls	r3, r2
 80052dc:	693a      	ldr	r2, [r7, #16]
 80052de:	4313      	orrs	r3, r2
 80052e0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052e2:	4937      	ldr	r1, [pc, #220]	@ (80053c0 <HAL_GPIO_Init+0x2e8>)
 80052e4:	697b      	ldr	r3, [r7, #20]
 80052e6:	089b      	lsrs	r3, r3, #2
 80052e8:	3302      	adds	r3, #2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052f0:	4b39      	ldr	r3, [pc, #228]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	43db      	mvns	r3, r3
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	4013      	ands	r3, r2
 80052fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005308:	2b00      	cmp	r3, #0
 800530a:	d003      	beq.n	8005314 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4313      	orrs	r3, r2
 8005312:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005314:	4a30      	ldr	r2, [pc, #192]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800531a:	4b2f      	ldr	r3, [pc, #188]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	43db      	mvns	r3, r3
 8005324:	693a      	ldr	r2, [r7, #16]
 8005326:	4013      	ands	r3, r2
 8005328:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005336:	693a      	ldr	r2, [r7, #16]
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4313      	orrs	r3, r2
 800533c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800533e:	4a26      	ldr	r2, [pc, #152]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005344:	4b24      	ldr	r3, [pc, #144]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	43db      	mvns	r3, r3
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	4013      	ands	r3, r2
 8005352:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d003      	beq.n	8005368 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005360:	693a      	ldr	r2, [r7, #16]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005368:	4a1b      	ldr	r2, [pc, #108]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800536e:	4b1a      	ldr	r3, [pc, #104]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	43db      	mvns	r3, r3
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4013      	ands	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800538a:	693a      	ldr	r2, [r7, #16]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005392:	4a11      	ldr	r2, [pc, #68]	@ (80053d8 <HAL_GPIO_Init+0x300>)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	3301      	adds	r3, #1
 800539c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	fa22 f303 	lsr.w	r3, r2, r3
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f47f ae9d 	bne.w	80050e8 <HAL_GPIO_Init+0x10>
  }
}
 80053ae:	bf00      	nop
 80053b0:	bf00      	nop
 80053b2:	371c      	adds	r7, #28
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	40021000 	.word	0x40021000
 80053c0:	40010000 	.word	0x40010000
 80053c4:	48000400 	.word	0x48000400
 80053c8:	48000800 	.word	0x48000800
 80053cc:	48000c00 	.word	0x48000c00
 80053d0:	48001000 	.word	0x48001000
 80053d4:	48001400 	.word	0x48001400
 80053d8:	40010400 	.word	0x40010400

080053dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80053dc:	b480      	push	{r7}
 80053de:	b083      	sub	sp, #12
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	460b      	mov	r3, r1
 80053e6:	807b      	strh	r3, [r7, #2]
 80053e8:	4613      	mov	r3, r2
 80053ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053ec:	787b      	ldrb	r3, [r7, #1]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053f2:	887a      	ldrh	r2, [r7, #2]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053f8:	e002      	b.n	8005400 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053fa:	887a      	ldrh	r2, [r7, #2]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005416:	4b08      	ldr	r3, [pc, #32]	@ (8005438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	88fb      	ldrh	r3, [r7, #6]
 800541c:	4013      	ands	r3, r2
 800541e:	2b00      	cmp	r3, #0
 8005420:	d006      	beq.n	8005430 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005422:	4a05      	ldr	r2, [pc, #20]	@ (8005438 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005424:	88fb      	ldrh	r3, [r7, #6]
 8005426:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005428:	88fb      	ldrh	r3, [r7, #6]
 800542a:	4618      	mov	r0, r3
 800542c:	f000 f806 	bl	800543c <HAL_GPIO_EXTI_Callback>
  }
}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40010400 	.word	0x40010400

0800543c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800543c:	b480      	push	{r7}
 800543e:	b083      	sub	sp, #12
 8005440:	af00      	add	r7, sp, #0
 8005442:	4603      	mov	r3, r0
 8005444:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005446:	bf00      	nop
 8005448:	370c      	adds	r7, #12
 800544a:	46bd      	mov	sp, r7
 800544c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005450:	4770      	bx	lr

08005452 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005452:	b580      	push	{r7, lr}
 8005454:	b082      	sub	sp, #8
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e08d      	b.n	8005580 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800546a:	b2db      	uxtb	r3, r3
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7fc ff09 	bl	8002290 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2224      	movs	r2, #36	@ 0x24
 8005482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	681a      	ldr	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0201 	bic.w	r2, r2, #1
 8005494:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685a      	ldr	r2, [r3, #4]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80054a2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689a      	ldr	r2, [r3, #8]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80054b2:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	2b01      	cmp	r3, #1
 80054ba:	d107      	bne.n	80054cc <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689a      	ldr	r2, [r3, #8]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054c8:	609a      	str	r2, [r3, #8]
 80054ca:	e006      	b.n	80054da <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80054d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	2b02      	cmp	r3, #2
 80054e0:	d108      	bne.n	80054f4 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	685a      	ldr	r2, [r3, #4]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054f0:	605a      	str	r2, [r3, #4]
 80054f2:	e007      	b.n	8005504 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	685a      	ldr	r2, [r3, #4]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005502:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	6812      	ldr	r2, [r2, #0]
 800550e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005512:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005516:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	68da      	ldr	r2, [r3, #12]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005526:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	691a      	ldr	r2, [r3, #16]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	695b      	ldr	r3, [r3, #20]
 8005530:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	699b      	ldr	r3, [r3, #24]
 8005538:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	430a      	orrs	r2, r1
 8005540:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	69d9      	ldr	r1, [r3, #28]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6a1a      	ldr	r2, [r3, #32]
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	430a      	orrs	r2, r1
 8005550:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	681a      	ldr	r2, [r3, #0]
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f042 0201 	orr.w	r2, r2, #1
 8005560:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2200      	movs	r2, #0
 8005566:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800557e:	2300      	movs	r3, #0
}
 8005580:	4618      	mov	r0, r3
 8005582:	3708      	adds	r7, #8
 8005584:	46bd      	mov	sp, r7
 8005586:	bd80      	pop	{r7, pc}

08005588 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
 8005590:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b20      	cmp	r3, #32
 800559c:	d138      	bne.n	8005610 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055a4:	2b01      	cmp	r3, #1
 80055a6:	d101      	bne.n	80055ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80055a8:	2302      	movs	r3, #2
 80055aa:	e032      	b.n	8005612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2201      	movs	r2, #1
 80055b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2224      	movs	r2, #36	@ 0x24
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f022 0201 	bic.w	r2, r2, #1
 80055ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80055da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6819      	ldr	r1, [r3, #0]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	683a      	ldr	r2, [r7, #0]
 80055e8:	430a      	orrs	r2, r1
 80055ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	681a      	ldr	r2, [r3, #0]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f042 0201 	orr.w	r2, r2, #1
 80055fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2220      	movs	r2, #32
 8005600:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2200      	movs	r2, #0
 8005608:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800560c:	2300      	movs	r3, #0
 800560e:	e000      	b.n	8005612 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005610:	2302      	movs	r3, #2
  }
}
 8005612:	4618      	mov	r0, r3
 8005614:	370c      	adds	r7, #12
 8005616:	46bd      	mov	sp, r7
 8005618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561c:	4770      	bx	lr

0800561e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800561e:	b480      	push	{r7}
 8005620:	b085      	sub	sp, #20
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
 8005626:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b20      	cmp	r3, #32
 8005632:	d139      	bne.n	80056a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800563a:	2b01      	cmp	r3, #1
 800563c:	d101      	bne.n	8005642 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800563e:	2302      	movs	r3, #2
 8005640:	e033      	b.n	80056aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2201      	movs	r2, #1
 8005646:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2224      	movs	r2, #36	@ 0x24
 800564e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f022 0201 	bic.w	r2, r2, #1
 8005660:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8005670:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	021b      	lsls	r3, r3, #8
 8005676:	68fa      	ldr	r2, [r7, #12]
 8005678:	4313      	orrs	r3, r2
 800567a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f042 0201 	orr.w	r2, r2, #1
 8005692:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2220      	movs	r2, #32
 8005698:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2200      	movs	r2, #0
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	e000      	b.n	80056aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80056a8:	2302      	movs	r3, #2
  }
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3714      	adds	r7, #20
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b084      	sub	sp, #16
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d101      	bne.n	80056c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80056c4:	2301      	movs	r3, #1
 80056c6:	e0c0      	b.n	800584a <HAL_PCD_Init+0x194>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3291 	ldrb.w	r3, [r3, #657]	@ 0x291
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d106      	bne.n	80056e2 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f883 2290 	strb.w	r2, [r3, #656]	@ 0x290

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f7fd fd7f 	bl	80031e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2203      	movs	r2, #3
 80056e6:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4618      	mov	r0, r3
 80056f0:	f004 fdfa 	bl	800a2e8 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056f4:	2300      	movs	r3, #0
 80056f6:	73fb      	strb	r3, [r7, #15]
 80056f8:	e03e      	b.n	8005778 <HAL_PCD_Init+0xc2>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80056fa:	7bfa      	ldrb	r2, [r7, #15]
 80056fc:	6879      	ldr	r1, [r7, #4]
 80056fe:	4613      	mov	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4413      	add	r3, r2
 8005704:	00db      	lsls	r3, r3, #3
 8005706:	440b      	add	r3, r1
 8005708:	3311      	adds	r3, #17
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800570e:	7bfa      	ldrb	r2, [r7, #15]
 8005710:	6879      	ldr	r1, [r7, #4]
 8005712:	4613      	mov	r3, r2
 8005714:	009b      	lsls	r3, r3, #2
 8005716:	4413      	add	r3, r2
 8005718:	00db      	lsls	r3, r3, #3
 800571a:	440b      	add	r3, r1
 800571c:	3310      	adds	r3, #16
 800571e:	7bfa      	ldrb	r2, [r7, #15]
 8005720:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005722:	7bfa      	ldrb	r2, [r7, #15]
 8005724:	6879      	ldr	r1, [r7, #4]
 8005726:	4613      	mov	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	4413      	add	r3, r2
 800572c:	00db      	lsls	r3, r3, #3
 800572e:	440b      	add	r3, r1
 8005730:	3313      	adds	r3, #19
 8005732:	2200      	movs	r2, #0
 8005734:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005736:	7bfa      	ldrb	r2, [r7, #15]
 8005738:	6879      	ldr	r1, [r7, #4]
 800573a:	4613      	mov	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4413      	add	r3, r2
 8005740:	00db      	lsls	r3, r3, #3
 8005742:	440b      	add	r3, r1
 8005744:	3320      	adds	r3, #32
 8005746:	2200      	movs	r2, #0
 8005748:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800574a:	7bfa      	ldrb	r2, [r7, #15]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	009b      	lsls	r3, r3, #2
 8005752:	4413      	add	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	440b      	add	r3, r1
 8005758:	3324      	adds	r3, #36	@ 0x24
 800575a:	2200      	movs	r2, #0
 800575c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800575e:	7bfb      	ldrb	r3, [r7, #15]
 8005760:	6879      	ldr	r1, [r7, #4]
 8005762:	1c5a      	adds	r2, r3, #1
 8005764:	4613      	mov	r3, r2
 8005766:	009b      	lsls	r3, r3, #2
 8005768:	4413      	add	r3, r2
 800576a:	00db      	lsls	r3, r3, #3
 800576c:	440b      	add	r3, r1
 800576e:	2200      	movs	r2, #0
 8005770:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005772:	7bfb      	ldrb	r3, [r7, #15]
 8005774:	3301      	adds	r3, #1
 8005776:	73fb      	strb	r3, [r7, #15]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	791b      	ldrb	r3, [r3, #4]
 800577c:	7bfa      	ldrb	r2, [r7, #15]
 800577e:	429a      	cmp	r2, r3
 8005780:	d3bb      	bcc.n	80056fa <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005782:	2300      	movs	r3, #0
 8005784:	73fb      	strb	r3, [r7, #15]
 8005786:	e044      	b.n	8005812 <HAL_PCD_Init+0x15c>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005788:	7bfa      	ldrb	r2, [r7, #15]
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	4613      	mov	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	4413      	add	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	440b      	add	r3, r1
 8005796:	f203 1351 	addw	r3, r3, #337	@ 0x151
 800579a:	2200      	movs	r2, #0
 800579c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800579e:	7bfa      	ldrb	r2, [r7, #15]
 80057a0:	6879      	ldr	r1, [r7, #4]
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	440b      	add	r3, r1
 80057ac:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80057b0:	7bfa      	ldrb	r2, [r7, #15]
 80057b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80057b4:	7bfa      	ldrb	r2, [r7, #15]
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	4613      	mov	r3, r2
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	00db      	lsls	r3, r3, #3
 80057c0:	440b      	add	r3, r1
 80057c2:	f203 1353 	addw	r3, r3, #339	@ 0x153
 80057c6:	2200      	movs	r2, #0
 80057c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80057ca:	7bfa      	ldrb	r2, [r7, #15]
 80057cc:	6879      	ldr	r1, [r7, #4]
 80057ce:	4613      	mov	r3, r2
 80057d0:	009b      	lsls	r3, r3, #2
 80057d2:	4413      	add	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	440b      	add	r3, r1
 80057d8:	f503 73b0 	add.w	r3, r3, #352	@ 0x160
 80057dc:	2200      	movs	r2, #0
 80057de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80057e0:	7bfa      	ldrb	r2, [r7, #15]
 80057e2:	6879      	ldr	r1, [r7, #4]
 80057e4:	4613      	mov	r3, r2
 80057e6:	009b      	lsls	r3, r3, #2
 80057e8:	4413      	add	r3, r2
 80057ea:	00db      	lsls	r3, r3, #3
 80057ec:	440b      	add	r3, r1
 80057ee:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80057f2:	2200      	movs	r2, #0
 80057f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80057f6:	7bfa      	ldrb	r2, [r7, #15]
 80057f8:	6879      	ldr	r1, [r7, #4]
 80057fa:	4613      	mov	r3, r2
 80057fc:	009b      	lsls	r3, r3, #2
 80057fe:	4413      	add	r3, r2
 8005800:	00db      	lsls	r3, r3, #3
 8005802:	440b      	add	r3, r1
 8005804:	f503 73b4 	add.w	r3, r3, #360	@ 0x168
 8005808:	2200      	movs	r2, #0
 800580a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800580c:	7bfb      	ldrb	r3, [r7, #15]
 800580e:	3301      	adds	r3, #1
 8005810:	73fb      	strb	r3, [r7, #15]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	791b      	ldrb	r3, [r3, #4]
 8005816:	7bfa      	ldrb	r2, [r7, #15]
 8005818:	429a      	cmp	r2, r3
 800581a:	d3b5      	bcc.n	8005788 <HAL_PCD_Init+0xd2>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6818      	ldr	r0, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	3304      	adds	r3, #4
 8005824:	e893 0006 	ldmia.w	r3, {r1, r2}
 8005828:	f004 fd79 	bl	800a31e <USB_DevInit>

  hpcd->USB_Address = 0U;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	731a      	strb	r2, [r3, #12]
  hpcd->State = HAL_PCD_STATE_READY;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2201      	movs	r2, #1
 8005836:	f883 2291 	strb.w	r2, [r3, #657]	@ 0x291

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7a9b      	ldrb	r3, [r3, #10]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d102      	bne.n	8005848 <HAL_PCD_Init+0x192>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f805 	bl	8005852 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8005848:	2300      	movs	r3, #0
}
 800584a:	4618      	mov	r0, r3
 800584c:	3710      	adds	r7, #16
 800584e:	46bd      	mov	sp, r7
 8005850:	bd80      	pop	{r7, pc}

08005852 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005852:	b480      	push	{r7}
 8005854:	b085      	sub	sp, #20
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  hpcd->LPM_State = LPM_L0;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8005876:	b29b      	uxth	r3, r3
 8005878:	f043 0301 	orr.w	r3, r3, #1
 800587c:	b29a      	uxth	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 800588a:	b29b      	uxth	r3, r3
 800588c:	f043 0302 	orr.w	r3, r3, #2
 8005890:	b29a      	uxth	r2, r3
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	3714      	adds	r7, #20
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
	...

080058a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b085      	sub	sp, #20
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d141      	bne.n	800593a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80058b6:	4b4b      	ldr	r3, [pc, #300]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80058be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80058c2:	d131      	bne.n	8005928 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80058c4:	4b47      	ldr	r3, [pc, #284]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80058ca:	4a46      	ldr	r2, [pc, #280]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80058d4:	4b43      	ldr	r3, [pc, #268]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80058dc:	4a41      	ldr	r2, [pc, #260]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80058de:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80058e2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80058e4:	4b40      	ldr	r3, [pc, #256]	@ (80059e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2232      	movs	r2, #50	@ 0x32
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	4a3f      	ldr	r2, [pc, #252]	@ (80059ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 80058f0:	fba2 2303 	umull	r2, r3, r2, r3
 80058f4:	0c9b      	lsrs	r3, r3, #18
 80058f6:	3301      	adds	r3, #1
 80058f8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80058fa:	e002      	b.n	8005902 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	3b01      	subs	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005902:	4b38      	ldr	r3, [pc, #224]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800590a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800590e:	d102      	bne.n	8005916 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d1f2      	bne.n	80058fc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005916:	4b33      	ldr	r3, [pc, #204]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005922:	d158      	bne.n	80059d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005924:	2303      	movs	r3, #3
 8005926:	e057      	b.n	80059d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005928:	4b2e      	ldr	r3, [pc, #184]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800592a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800592e:	4a2d      	ldr	r2, [pc, #180]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005930:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005934:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005938:	e04d      	b.n	80059d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005940:	d141      	bne.n	80059c6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005942:	4b28      	ldr	r3, [pc, #160]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800594a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800594e:	d131      	bne.n	80059b4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005950:	4b24      	ldr	r3, [pc, #144]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005952:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005956:	4a23      	ldr	r2, [pc, #140]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005958:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800595c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005960:	4b20      	ldr	r3, [pc, #128]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005968:	4a1e      	ldr	r2, [pc, #120]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800596a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800596e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005970:	4b1d      	ldr	r3, [pc, #116]	@ (80059e8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2232      	movs	r2, #50	@ 0x32
 8005976:	fb02 f303 	mul.w	r3, r2, r3
 800597a:	4a1c      	ldr	r2, [pc, #112]	@ (80059ec <HAL_PWREx_ControlVoltageScaling+0x144>)
 800597c:	fba2 2303 	umull	r2, r3, r2, r3
 8005980:	0c9b      	lsrs	r3, r3, #18
 8005982:	3301      	adds	r3, #1
 8005984:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005986:	e002      	b.n	800598e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	3b01      	subs	r3, #1
 800598c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800598e:	4b15      	ldr	r3, [pc, #84]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800599a:	d102      	bne.n	80059a2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d1f2      	bne.n	8005988 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80059a2:	4b10      	ldr	r3, [pc, #64]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80059ae:	d112      	bne.n	80059d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e011      	b.n	80059d8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80059b4:	4b0b      	ldr	r3, [pc, #44]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80059ba:	4a0a      	ldr	r2, [pc, #40]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059c0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80059c4:	e007      	b.n	80059d6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80059c6:	4b07      	ldr	r3, [pc, #28]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80059ce:	4a05      	ldr	r2, [pc, #20]	@ (80059e4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80059d0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059d4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80059d6:	2300      	movs	r3, #0
}
 80059d8:	4618      	mov	r0, r3
 80059da:	3714      	adds	r7, #20
 80059dc:	46bd      	mov	sp, r7
 80059de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e2:	4770      	bx	lr
 80059e4:	40007000 	.word	0x40007000
 80059e8:	2000000c 	.word	0x2000000c
 80059ec:	431bde83 	.word	0x431bde83

080059f0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80059f0:	b480      	push	{r7}
 80059f2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80059f4:	4b05      	ldr	r3, [pc, #20]	@ (8005a0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	4a04      	ldr	r2, [pc, #16]	@ (8005a0c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80059fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80059fe:	6093      	str	r3, [r2, #8]
}
 8005a00:	bf00      	nop
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40007000 	.word	0x40007000

08005a10 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b088      	sub	sp, #32
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d101      	bne.n	8005a22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e2fe      	b.n	8006020 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f003 0301 	and.w	r3, r3, #1
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d075      	beq.n	8005b1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a2e:	4b97      	ldr	r3, [pc, #604]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005a30:	689b      	ldr	r3, [r3, #8]
 8005a32:	f003 030c 	and.w	r3, r3, #12
 8005a36:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a38:	4b94      	ldr	r3, [pc, #592]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0303 	and.w	r3, r3, #3
 8005a40:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005a42:	69bb      	ldr	r3, [r7, #24]
 8005a44:	2b0c      	cmp	r3, #12
 8005a46:	d102      	bne.n	8005a4e <HAL_RCC_OscConfig+0x3e>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b03      	cmp	r3, #3
 8005a4c:	d002      	beq.n	8005a54 <HAL_RCC_OscConfig+0x44>
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	2b08      	cmp	r3, #8
 8005a52:	d10b      	bne.n	8005a6c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a54:	4b8d      	ldr	r3, [pc, #564]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d05b      	beq.n	8005b18 <HAL_RCC_OscConfig+0x108>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	685b      	ldr	r3, [r3, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d157      	bne.n	8005b18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e2d9      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a74:	d106      	bne.n	8005a84 <HAL_RCC_OscConfig+0x74>
 8005a76:	4b85      	ldr	r3, [pc, #532]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a84      	ldr	r2, [pc, #528]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005a7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a80:	6013      	str	r3, [r2, #0]
 8005a82:	e01d      	b.n	8005ac0 <HAL_RCC_OscConfig+0xb0>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a8c:	d10c      	bne.n	8005aa8 <HAL_RCC_OscConfig+0x98>
 8005a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a7e      	ldr	r2, [pc, #504]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005a94:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4a7b      	ldr	r2, [pc, #492]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005aa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005aa4:	6013      	str	r3, [r2, #0]
 8005aa6:	e00b      	b.n	8005ac0 <HAL_RCC_OscConfig+0xb0>
 8005aa8:	4b78      	ldr	r3, [pc, #480]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a77      	ldr	r2, [pc, #476]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005aae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ab2:	6013      	str	r3, [r2, #0]
 8005ab4:	4b75      	ldr	r3, [pc, #468]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a74      	ldr	r2, [pc, #464]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005aba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005abe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d013      	beq.n	8005af0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac8:	f7fd fc4c 	bl	8003364 <HAL_GetTick>
 8005acc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ace:	e008      	b.n	8005ae2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ad0:	f7fd fc48 	bl	8003364 <HAL_GetTick>
 8005ad4:	4602      	mov	r2, r0
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	1ad3      	subs	r3, r2, r3
 8005ada:	2b64      	cmp	r3, #100	@ 0x64
 8005adc:	d901      	bls.n	8005ae2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ade:	2303      	movs	r3, #3
 8005ae0:	e29e      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ae2:	4b6a      	ldr	r3, [pc, #424]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d0f0      	beq.n	8005ad0 <HAL_RCC_OscConfig+0xc0>
 8005aee:	e014      	b.n	8005b1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005af0:	f7fd fc38 	bl	8003364 <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005af8:	f7fd fc34 	bl	8003364 <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b64      	cmp	r3, #100	@ 0x64
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e28a      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005b0a:	4b60      	ldr	r3, [pc, #384]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d1f0      	bne.n	8005af8 <HAL_RCC_OscConfig+0xe8>
 8005b16:	e000      	b.n	8005b1a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d075      	beq.n	8005c12 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b26:	4b59      	ldr	r3, [pc, #356]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f003 030c 	and.w	r3, r3, #12
 8005b2e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b30:	4b56      	ldr	r3, [pc, #344]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0303 	and.w	r3, r3, #3
 8005b38:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	2b0c      	cmp	r3, #12
 8005b3e:	d102      	bne.n	8005b46 <HAL_RCC_OscConfig+0x136>
 8005b40:	697b      	ldr	r3, [r7, #20]
 8005b42:	2b02      	cmp	r3, #2
 8005b44:	d002      	beq.n	8005b4c <HAL_RCC_OscConfig+0x13c>
 8005b46:	69bb      	ldr	r3, [r7, #24]
 8005b48:	2b04      	cmp	r3, #4
 8005b4a:	d11f      	bne.n	8005b8c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005b4c:	4b4f      	ldr	r3, [pc, #316]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d005      	beq.n	8005b64 <HAL_RCC_OscConfig+0x154>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d101      	bne.n	8005b64 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005b60:	2301      	movs	r3, #1
 8005b62:	e25d      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b64:	4b49      	ldr	r3, [pc, #292]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005b66:	685b      	ldr	r3, [r3, #4]
 8005b68:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	061b      	lsls	r3, r3, #24
 8005b72:	4946      	ldr	r1, [pc, #280]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005b78:	4b45      	ldr	r3, [pc, #276]	@ (8005c90 <HAL_RCC_OscConfig+0x280>)
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7fd fba5 	bl	80032cc <HAL_InitTick>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d043      	beq.n	8005c10 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	e249      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d023      	beq.n	8005bdc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005b94:	4b3d      	ldr	r3, [pc, #244]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a3c      	ldr	r2, [pc, #240]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005b9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ba0:	f7fd fbe0 	bl	8003364 <HAL_GetTick>
 8005ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ba6:	e008      	b.n	8005bba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ba8:	f7fd fbdc 	bl	8003364 <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d901      	bls.n	8005bba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	e232      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bba:	4b34      	ldr	r3, [pc, #208]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d0f0      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bc6:	4b31      	ldr	r3, [pc, #196]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	061b      	lsls	r3, r3, #24
 8005bd4:	492d      	ldr	r1, [pc, #180]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	604b      	str	r3, [r1, #4]
 8005bda:	e01a      	b.n	8005c12 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bdc:	4b2b      	ldr	r3, [pc, #172]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a2a      	ldr	r2, [pc, #168]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005be2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005be6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005be8:	f7fd fbbc 	bl	8003364 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bf0:	f7fd fbb8 	bl	8003364 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e20e      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005c02:	4b22      	ldr	r3, [pc, #136]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x1e0>
 8005c0e:	e000      	b.n	8005c12 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005c10:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0308 	and.w	r3, r3, #8
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d041      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d01c      	beq.n	8005c60 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c26:	4b19      	ldr	r3, [pc, #100]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005c28:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c2c:	4a17      	ldr	r2, [pc, #92]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c36:	f7fd fb95 	bl	8003364 <HAL_GetTick>
 8005c3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c3c:	e008      	b.n	8005c50 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c3e:	f7fd fb91 	bl	8003364 <HAL_GetTick>
 8005c42:	4602      	mov	r2, r0
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	1ad3      	subs	r3, r2, r3
 8005c48:	2b02      	cmp	r3, #2
 8005c4a:	d901      	bls.n	8005c50 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005c4c:	2303      	movs	r3, #3
 8005c4e:	e1e7      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c50:	4b0e      	ldr	r3, [pc, #56]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005c52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c56:	f003 0302 	and.w	r3, r3, #2
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0ef      	beq.n	8005c3e <HAL_RCC_OscConfig+0x22e>
 8005c5e:	e020      	b.n	8005ca2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c60:	4b0a      	ldr	r3, [pc, #40]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c66:	4a09      	ldr	r2, [pc, #36]	@ (8005c8c <HAL_RCC_OscConfig+0x27c>)
 8005c68:	f023 0301 	bic.w	r3, r3, #1
 8005c6c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c70:	f7fd fb78 	bl	8003364 <HAL_GetTick>
 8005c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c76:	e00d      	b.n	8005c94 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c78:	f7fd fb74 	bl	8003364 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	693b      	ldr	r3, [r7, #16]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d906      	bls.n	8005c94 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	e1ca      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
 8005c8a:	bf00      	nop
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	20000010 	.word	0x20000010
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005c94:	4b8c      	ldr	r3, [pc, #560]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005c96:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005c9a:	f003 0302 	and.w	r3, r3, #2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d1ea      	bne.n	8005c78 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 80a6 	beq.w	8005dfc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005cb4:	4b84      	ldr	r3, [pc, #528]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cb8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d101      	bne.n	8005cc4 <HAL_RCC_OscConfig+0x2b4>
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	e000      	b.n	8005cc6 <HAL_RCC_OscConfig+0x2b6>
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d00d      	beq.n	8005ce6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cca:	4b7f      	ldr	r3, [pc, #508]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cce:	4a7e      	ldr	r2, [pc, #504]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cde:	60fb      	str	r3, [r7, #12]
 8005ce0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ce6:	4b79      	ldr	r3, [pc, #484]	@ (8005ecc <HAL_RCC_OscConfig+0x4bc>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d118      	bne.n	8005d24 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cf2:	4b76      	ldr	r3, [pc, #472]	@ (8005ecc <HAL_RCC_OscConfig+0x4bc>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	4a75      	ldr	r2, [pc, #468]	@ (8005ecc <HAL_RCC_OscConfig+0x4bc>)
 8005cf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005cfe:	f7fd fb31 	bl	8003364 <HAL_GetTick>
 8005d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d04:	e008      	b.n	8005d18 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d06:	f7fd fb2d 	bl	8003364 <HAL_GetTick>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	2b02      	cmp	r3, #2
 8005d12:	d901      	bls.n	8005d18 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005d14:	2303      	movs	r3, #3
 8005d16:	e183      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005d18:	4b6c      	ldr	r3, [pc, #432]	@ (8005ecc <HAL_RCC_OscConfig+0x4bc>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0f0      	beq.n	8005d06 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d108      	bne.n	8005d3e <HAL_RCC_OscConfig+0x32e>
 8005d2c:	4b66      	ldr	r3, [pc, #408]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d32:	4a65      	ldr	r2, [pc, #404]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005d34:	f043 0301 	orr.w	r3, r3, #1
 8005d38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d3c:	e024      	b.n	8005d88 <HAL_RCC_OscConfig+0x378>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	2b05      	cmp	r3, #5
 8005d44:	d110      	bne.n	8005d68 <HAL_RCC_OscConfig+0x358>
 8005d46:	4b60      	ldr	r3, [pc, #384]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d4c:	4a5e      	ldr	r2, [pc, #376]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005d4e:	f043 0304 	orr.w	r3, r3, #4
 8005d52:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d56:	4b5c      	ldr	r3, [pc, #368]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5c:	4a5a      	ldr	r2, [pc, #360]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005d5e:	f043 0301 	orr.w	r3, r3, #1
 8005d62:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d66:	e00f      	b.n	8005d88 <HAL_RCC_OscConfig+0x378>
 8005d68:	4b57      	ldr	r3, [pc, #348]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6e:	4a56      	ldr	r2, [pc, #344]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005d70:	f023 0301 	bic.w	r3, r3, #1
 8005d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005d78:	4b53      	ldr	r3, [pc, #332]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005d7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d7e:	4a52      	ldr	r2, [pc, #328]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005d80:	f023 0304 	bic.w	r3, r3, #4
 8005d84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	689b      	ldr	r3, [r3, #8]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d016      	beq.n	8005dbe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d90:	f7fd fae8 	bl	8003364 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d98:	f7fd fae4 	bl	8003364 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e138      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dae:	4b46      	ldr	r3, [pc, #280]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db4:	f003 0302 	and.w	r3, r3, #2
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d0ed      	beq.n	8005d98 <HAL_RCC_OscConfig+0x388>
 8005dbc:	e015      	b.n	8005dea <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dbe:	f7fd fad1 	bl	8003364 <HAL_GetTick>
 8005dc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005dc4:	e00a      	b.n	8005ddc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dc6:	f7fd facd 	bl	8003364 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d901      	bls.n	8005ddc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005dd8:	2303      	movs	r3, #3
 8005dda:	e121      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005ddc:	4b3a      	ldr	r3, [pc, #232]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de2:	f003 0302 	and.w	r3, r3, #2
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d1ed      	bne.n	8005dc6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005dea:	7ffb      	ldrb	r3, [r7, #31]
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	d105      	bne.n	8005dfc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005df0:	4b35      	ldr	r3, [pc, #212]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df4:	4a34      	ldr	r2, [pc, #208]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005df6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005dfa:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f003 0320 	and.w	r3, r3, #32
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d03c      	beq.n	8005e82 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	699b      	ldr	r3, [r3, #24]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01c      	beq.n	8005e4a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005e10:	4b2d      	ldr	r3, [pc, #180]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005e12:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e16:	4a2c      	ldr	r2, [pc, #176]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005e18:	f043 0301 	orr.w	r3, r3, #1
 8005e1c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e20:	f7fd faa0 	bl	8003364 <HAL_GetTick>
 8005e24:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e26:	e008      	b.n	8005e3a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e28:	f7fd fa9c 	bl	8003364 <HAL_GetTick>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	1ad3      	subs	r3, r2, r3
 8005e32:	2b02      	cmp	r3, #2
 8005e34:	d901      	bls.n	8005e3a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005e36:	2303      	movs	r3, #3
 8005e38:	e0f2      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005e3a:	4b23      	ldr	r3, [pc, #140]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005e3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e40:	f003 0302 	and.w	r3, r3, #2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d0ef      	beq.n	8005e28 <HAL_RCC_OscConfig+0x418>
 8005e48:	e01b      	b.n	8005e82 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005e4a:	4b1f      	ldr	r3, [pc, #124]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005e4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e50:	4a1d      	ldr	r2, [pc, #116]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005e52:	f023 0301 	bic.w	r3, r3, #1
 8005e56:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e5a:	f7fd fa83 	bl	8003364 <HAL_GetTick>
 8005e5e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e60:	e008      	b.n	8005e74 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005e62:	f7fd fa7f 	bl	8003364 <HAL_GetTick>
 8005e66:	4602      	mov	r2, r0
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	1ad3      	subs	r3, r2, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e0d5      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005e74:	4b14      	ldr	r3, [pc, #80]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005e76:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ef      	bne.n	8005e62 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	69db      	ldr	r3, [r3, #28]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	f000 80c9 	beq.w	800601e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f003 030c 	and.w	r3, r3, #12
 8005e94:	2b0c      	cmp	r3, #12
 8005e96:	f000 8083 	beq.w	8005fa0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	2b02      	cmp	r3, #2
 8005ea0:	d15e      	bne.n	8005f60 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ea2:	4b09      	ldr	r3, [pc, #36]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a08      	ldr	r2, [pc, #32]	@ (8005ec8 <HAL_RCC_OscConfig+0x4b8>)
 8005ea8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005eac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eae:	f7fd fa59 	bl	8003364 <HAL_GetTick>
 8005eb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005eb4:	e00c      	b.n	8005ed0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005eb6:	f7fd fa55 	bl	8003364 <HAL_GetTick>
 8005eba:	4602      	mov	r2, r0
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	1ad3      	subs	r3, r2, r3
 8005ec0:	2b02      	cmp	r3, #2
 8005ec2:	d905      	bls.n	8005ed0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e0ab      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005ed0:	4b55      	ldr	r3, [pc, #340]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d1ec      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005edc:	4b52      	ldr	r3, [pc, #328]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	4b52      	ldr	r3, [pc, #328]	@ (800602c <HAL_RCC_OscConfig+0x61c>)
 8005ee2:	4013      	ands	r3, r2
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	6a11      	ldr	r1, [r2, #32]
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005eec:	3a01      	subs	r2, #1
 8005eee:	0112      	lsls	r2, r2, #4
 8005ef0:	4311      	orrs	r1, r2
 8005ef2:	687a      	ldr	r2, [r7, #4]
 8005ef4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005ef6:	0212      	lsls	r2, r2, #8
 8005ef8:	4311      	orrs	r1, r2
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005efe:	0852      	lsrs	r2, r2, #1
 8005f00:	3a01      	subs	r2, #1
 8005f02:	0552      	lsls	r2, r2, #21
 8005f04:	4311      	orrs	r1, r2
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005f0a:	0852      	lsrs	r2, r2, #1
 8005f0c:	3a01      	subs	r2, #1
 8005f0e:	0652      	lsls	r2, r2, #25
 8005f10:	4311      	orrs	r1, r2
 8005f12:	687a      	ldr	r2, [r7, #4]
 8005f14:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005f16:	06d2      	lsls	r2, r2, #27
 8005f18:	430a      	orrs	r2, r1
 8005f1a:	4943      	ldr	r1, [pc, #268]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f20:	4b41      	ldr	r3, [pc, #260]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a40      	ldr	r2, [pc, #256]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f26:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f2a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005f2c:	4b3e      	ldr	r3, [pc, #248]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4a3d      	ldr	r2, [pc, #244]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f32:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005f36:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f38:	f7fd fa14 	bl	8003364 <HAL_GetTick>
 8005f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f3e:	e008      	b.n	8005f52 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f40:	f7fd fa10 	bl	8003364 <HAL_GetTick>
 8005f44:	4602      	mov	r2, r0
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	1ad3      	subs	r3, r2, r3
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d901      	bls.n	8005f52 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005f4e:	2303      	movs	r3, #3
 8005f50:	e066      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005f52:	4b35      	ldr	r3, [pc, #212]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0f0      	beq.n	8005f40 <HAL_RCC_OscConfig+0x530>
 8005f5e:	e05e      	b.n	800601e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f60:	4b31      	ldr	r3, [pc, #196]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	4a30      	ldr	r2, [pc, #192]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005f6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6c:	f7fd f9fa 	bl	8003364 <HAL_GetTick>
 8005f70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f72:	e008      	b.n	8005f86 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005f74:	f7fd f9f6 	bl	8003364 <HAL_GetTick>
 8005f78:	4602      	mov	r2, r0
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	2b02      	cmp	r3, #2
 8005f80:	d901      	bls.n	8005f86 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005f82:	2303      	movs	r3, #3
 8005f84:	e04c      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005f86:	4b28      	ldr	r3, [pc, #160]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d1f0      	bne.n	8005f74 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005f92:	4b25      	ldr	r3, [pc, #148]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	4924      	ldr	r1, [pc, #144]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005f98:	4b25      	ldr	r3, [pc, #148]	@ (8006030 <HAL_RCC_OscConfig+0x620>)
 8005f9a:	4013      	ands	r3, r2
 8005f9c:	60cb      	str	r3, [r1, #12]
 8005f9e:	e03e      	b.n	800601e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	69db      	ldr	r3, [r3, #28]
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d101      	bne.n	8005fac <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	e039      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005fac:	4b1e      	ldr	r3, [pc, #120]	@ (8006028 <HAL_RCC_OscConfig+0x618>)
 8005fae:	68db      	ldr	r3, [r3, #12]
 8005fb0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fb2:	697b      	ldr	r3, [r7, #20]
 8005fb4:	f003 0203 	and.w	r2, r3, #3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a1b      	ldr	r3, [r3, #32]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d12c      	bne.n	800601a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d123      	bne.n	800601a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fdc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d11b      	bne.n	800601a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005fe2:	697b      	ldr	r3, [r7, #20]
 8005fe4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d113      	bne.n	800601a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffc:	085b      	lsrs	r3, r3, #1
 8005ffe:	3b01      	subs	r3, #1
 8006000:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006002:	429a      	cmp	r2, r3
 8006004:	d109      	bne.n	800601a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006010:	085b      	lsrs	r3, r3, #1
 8006012:	3b01      	subs	r3, #1
 8006014:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006016:	429a      	cmp	r2, r3
 8006018:	d001      	beq.n	800601e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	e000      	b.n	8006020 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3720      	adds	r7, #32
 8006024:	46bd      	mov	sp, r7
 8006026:	bd80      	pop	{r7, pc}
 8006028:	40021000 	.word	0x40021000
 800602c:	019f800c 	.word	0x019f800c
 8006030:	feeefffc 	.word	0xfeeefffc

08006034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800603e:	2300      	movs	r3, #0
 8006040:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d101      	bne.n	800604c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006048:	2301      	movs	r3, #1
 800604a:	e11e      	b.n	800628a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800604c:	4b91      	ldr	r3, [pc, #580]	@ (8006294 <HAL_RCC_ClockConfig+0x260>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 030f 	and.w	r3, r3, #15
 8006054:	683a      	ldr	r2, [r7, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d910      	bls.n	800607c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800605a:	4b8e      	ldr	r3, [pc, #568]	@ (8006294 <HAL_RCC_ClockConfig+0x260>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f023 020f 	bic.w	r2, r3, #15
 8006062:	498c      	ldr	r1, [pc, #560]	@ (8006294 <HAL_RCC_ClockConfig+0x260>)
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	4313      	orrs	r3, r2
 8006068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800606a:	4b8a      	ldr	r3, [pc, #552]	@ (8006294 <HAL_RCC_ClockConfig+0x260>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 030f 	and.w	r3, r3, #15
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d001      	beq.n	800607c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e106      	b.n	800628a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d073      	beq.n	8006170 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	2b03      	cmp	r3, #3
 800608e:	d129      	bne.n	80060e4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006090:	4b81      	ldr	r3, [pc, #516]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d101      	bne.n	80060a0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800609c:	2301      	movs	r3, #1
 800609e:	e0f4      	b.n	800628a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80060a0:	f000 f99c 	bl	80063dc <RCC_GetSysClockFreqFromPLLSource>
 80060a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	4a7c      	ldr	r2, [pc, #496]	@ (800629c <HAL_RCC_ClockConfig+0x268>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d93f      	bls.n	800612e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80060ae:	4b7a      	ldr	r3, [pc, #488]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80060b0:	689b      	ldr	r3, [r3, #8]
 80060b2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d009      	beq.n	80060ce <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d033      	beq.n	800612e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d12f      	bne.n	800612e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80060ce:	4b72      	ldr	r3, [pc, #456]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80060d6:	4a70      	ldr	r2, [pc, #448]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80060d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80060dc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80060de:	2380      	movs	r3, #128	@ 0x80
 80060e0:	617b      	str	r3, [r7, #20]
 80060e2:	e024      	b.n	800612e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d107      	bne.n	80060fc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80060ec:	4b6a      	ldr	r3, [pc, #424]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d109      	bne.n	800610c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e0c6      	b.n	800628a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80060fc:	4b66      	ldr	r3, [pc, #408]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006104:	2b00      	cmp	r3, #0
 8006106:	d101      	bne.n	800610c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8006108:	2301      	movs	r3, #1
 800610a:	e0be      	b.n	800628a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800610c:	f000 f8ce 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 8006110:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	4a61      	ldr	r2, [pc, #388]	@ (800629c <HAL_RCC_ClockConfig+0x268>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d909      	bls.n	800612e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800611a:	4b5f      	ldr	r3, [pc, #380]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006122:	4a5d      	ldr	r2, [pc, #372]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 8006124:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006128:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800612a:	2380      	movs	r3, #128	@ 0x80
 800612c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800612e:	4b5a      	ldr	r3, [pc, #360]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	f023 0203 	bic.w	r2, r3, #3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	4957      	ldr	r1, [pc, #348]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 800613c:	4313      	orrs	r3, r2
 800613e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006140:	f7fd f910 	bl	8003364 <HAL_GetTick>
 8006144:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006146:	e00a      	b.n	800615e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006148:	f7fd f90c 	bl	8003364 <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006156:	4293      	cmp	r3, r2
 8006158:	d901      	bls.n	800615e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	e095      	b.n	800628a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615e:	4b4e      	ldr	r3, [pc, #312]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 8006160:	689b      	ldr	r3, [r3, #8]
 8006162:	f003 020c 	and.w	r2, r3, #12
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	429a      	cmp	r2, r3
 800616e:	d1eb      	bne.n	8006148 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d023      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	d005      	beq.n	8006194 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006188:	4b43      	ldr	r3, [pc, #268]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 800618a:	689b      	ldr	r3, [r3, #8]
 800618c:	4a42      	ldr	r2, [pc, #264]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 800618e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8006192:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b00      	cmp	r3, #0
 800619e:	d007      	beq.n	80061b0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80061a0:	4b3d      	ldr	r3, [pc, #244]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80061a2:	689b      	ldr	r3, [r3, #8]
 80061a4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80061a8:	4a3b      	ldr	r2, [pc, #236]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80061aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80061ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061b0:	4b39      	ldr	r3, [pc, #228]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80061b2:	689b      	ldr	r3, [r3, #8]
 80061b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	4936      	ldr	r1, [pc, #216]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80061be:	4313      	orrs	r3, r2
 80061c0:	608b      	str	r3, [r1, #8]
 80061c2:	e008      	b.n	80061d6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b80      	cmp	r3, #128	@ 0x80
 80061c8:	d105      	bne.n	80061d6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80061ca:	4b33      	ldr	r3, [pc, #204]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80061cc:	689b      	ldr	r3, [r3, #8]
 80061ce:	4a32      	ldr	r2, [pc, #200]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 80061d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80061d4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80061d6:	4b2f      	ldr	r3, [pc, #188]	@ (8006294 <HAL_RCC_ClockConfig+0x260>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f003 030f 	and.w	r3, r3, #15
 80061de:	683a      	ldr	r2, [r7, #0]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d21d      	bcs.n	8006220 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061e4:	4b2b      	ldr	r3, [pc, #172]	@ (8006294 <HAL_RCC_ClockConfig+0x260>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f023 020f 	bic.w	r2, r3, #15
 80061ec:	4929      	ldr	r1, [pc, #164]	@ (8006294 <HAL_RCC_ClockConfig+0x260>)
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80061f4:	f7fd f8b6 	bl	8003364 <HAL_GetTick>
 80061f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80061fa:	e00a      	b.n	8006212 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80061fc:	f7fd f8b2 	bl	8003364 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800620a:	4293      	cmp	r3, r2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e03b      	b.n	800628a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006212:	4b20      	ldr	r3, [pc, #128]	@ (8006294 <HAL_RCC_ClockConfig+0x260>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 030f 	and.w	r3, r3, #15
 800621a:	683a      	ldr	r2, [r7, #0]
 800621c:	429a      	cmp	r2, r3
 800621e:	d1ed      	bne.n	80061fc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f003 0304 	and.w	r3, r3, #4
 8006228:	2b00      	cmp	r3, #0
 800622a:	d008      	beq.n	800623e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800622c:	4b1a      	ldr	r3, [pc, #104]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	4917      	ldr	r1, [pc, #92]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 800623a:	4313      	orrs	r3, r2
 800623c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f003 0308 	and.w	r3, r3, #8
 8006246:	2b00      	cmp	r3, #0
 8006248:	d009      	beq.n	800625e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800624a:	4b13      	ldr	r3, [pc, #76]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	691b      	ldr	r3, [r3, #16]
 8006256:	00db      	lsls	r3, r3, #3
 8006258:	490f      	ldr	r1, [pc, #60]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 800625a:	4313      	orrs	r3, r2
 800625c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800625e:	f000 f825 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 8006262:	4602      	mov	r2, r0
 8006264:	4b0c      	ldr	r3, [pc, #48]	@ (8006298 <HAL_RCC_ClockConfig+0x264>)
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	091b      	lsrs	r3, r3, #4
 800626a:	f003 030f 	and.w	r3, r3, #15
 800626e:	490c      	ldr	r1, [pc, #48]	@ (80062a0 <HAL_RCC_ClockConfig+0x26c>)
 8006270:	5ccb      	ldrb	r3, [r1, r3]
 8006272:	f003 031f 	and.w	r3, r3, #31
 8006276:	fa22 f303 	lsr.w	r3, r2, r3
 800627a:	4a0a      	ldr	r2, [pc, #40]	@ (80062a4 <HAL_RCC_ClockConfig+0x270>)
 800627c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800627e:	4b0a      	ldr	r3, [pc, #40]	@ (80062a8 <HAL_RCC_ClockConfig+0x274>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4618      	mov	r0, r3
 8006284:	f7fd f822 	bl	80032cc <HAL_InitTick>
 8006288:	4603      	mov	r3, r0
}
 800628a:	4618      	mov	r0, r3
 800628c:	3718      	adds	r7, #24
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	40022000 	.word	0x40022000
 8006298:	40021000 	.word	0x40021000
 800629c:	04c4b400 	.word	0x04c4b400
 80062a0:	080109b0 	.word	0x080109b0
 80062a4:	2000000c 	.word	0x2000000c
 80062a8:	20000010 	.word	0x20000010

080062ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80062b2:	4b2c      	ldr	r3, [pc, #176]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	f003 030c 	and.w	r3, r3, #12
 80062ba:	2b04      	cmp	r3, #4
 80062bc:	d102      	bne.n	80062c4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80062be:	4b2a      	ldr	r3, [pc, #168]	@ (8006368 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062c0:	613b      	str	r3, [r7, #16]
 80062c2:	e047      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80062c4:	4b27      	ldr	r3, [pc, #156]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	f003 030c 	and.w	r3, r3, #12
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d102      	bne.n	80062d6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80062d0:	4b25      	ldr	r3, [pc, #148]	@ (8006368 <HAL_RCC_GetSysClockFreq+0xbc>)
 80062d2:	613b      	str	r3, [r7, #16]
 80062d4:	e03e      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80062d6:	4b23      	ldr	r3, [pc, #140]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 030c 	and.w	r3, r3, #12
 80062de:	2b0c      	cmp	r3, #12
 80062e0:	d136      	bne.n	8006350 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80062e2:	4b20      	ldr	r3, [pc, #128]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	f003 0303 	and.w	r3, r3, #3
 80062ea:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80062ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xb8>)
 80062ee:	68db      	ldr	r3, [r3, #12]
 80062f0:	091b      	lsrs	r3, r3, #4
 80062f2:	f003 030f 	and.w	r3, r3, #15
 80062f6:	3301      	adds	r3, #1
 80062f8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	2b03      	cmp	r3, #3
 80062fe:	d10c      	bne.n	800631a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006300:	4a19      	ldr	r2, [pc, #100]	@ (8006368 <HAL_RCC_GetSysClockFreq+0xbc>)
 8006302:	68bb      	ldr	r3, [r7, #8]
 8006304:	fbb2 f3f3 	udiv	r3, r2, r3
 8006308:	4a16      	ldr	r2, [pc, #88]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xb8>)
 800630a:	68d2      	ldr	r2, [r2, #12]
 800630c:	0a12      	lsrs	r2, r2, #8
 800630e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006312:	fb02 f303 	mul.w	r3, r2, r3
 8006316:	617b      	str	r3, [r7, #20]
      break;
 8006318:	e00c      	b.n	8006334 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800631a:	4a13      	ldr	r2, [pc, #76]	@ (8006368 <HAL_RCC_GetSysClockFreq+0xbc>)
 800631c:	68bb      	ldr	r3, [r7, #8]
 800631e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006322:	4a10      	ldr	r2, [pc, #64]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006324:	68d2      	ldr	r2, [r2, #12]
 8006326:	0a12      	lsrs	r2, r2, #8
 8006328:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800632c:	fb02 f303 	mul.w	r3, r2, r3
 8006330:	617b      	str	r3, [r7, #20]
      break;
 8006332:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006334:	4b0b      	ldr	r3, [pc, #44]	@ (8006364 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	0e5b      	lsrs	r3, r3, #25
 800633a:	f003 0303 	and.w	r3, r3, #3
 800633e:	3301      	adds	r3, #1
 8006340:	005b      	lsls	r3, r3, #1
 8006342:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8006344:	697a      	ldr	r2, [r7, #20]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	fbb2 f3f3 	udiv	r3, r2, r3
 800634c:	613b      	str	r3, [r7, #16]
 800634e:	e001      	b.n	8006354 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8006350:	2300      	movs	r3, #0
 8006352:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006354:	693b      	ldr	r3, [r7, #16]
}
 8006356:	4618      	mov	r0, r3
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	40021000 	.word	0x40021000
 8006368:	00f42400 	.word	0x00f42400

0800636c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006370:	4b03      	ldr	r3, [pc, #12]	@ (8006380 <HAL_RCC_GetHCLKFreq+0x14>)
 8006372:	681b      	ldr	r3, [r3, #0]
}
 8006374:	4618      	mov	r0, r3
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	2000000c 	.word	0x2000000c

08006384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006388:	f7ff fff0 	bl	800636c <HAL_RCC_GetHCLKFreq>
 800638c:	4602      	mov	r2, r0
 800638e:	4b06      	ldr	r3, [pc, #24]	@ (80063a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	0a1b      	lsrs	r3, r3, #8
 8006394:	f003 0307 	and.w	r3, r3, #7
 8006398:	4904      	ldr	r1, [pc, #16]	@ (80063ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800639a:	5ccb      	ldrb	r3, [r1, r3]
 800639c:	f003 031f 	and.w	r3, r3, #31
 80063a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063a4:	4618      	mov	r0, r3
 80063a6:	bd80      	pop	{r7, pc}
 80063a8:	40021000 	.word	0x40021000
 80063ac:	080109c0 	.word	0x080109c0

080063b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80063b4:	f7ff ffda 	bl	800636c <HAL_RCC_GetHCLKFreq>
 80063b8:	4602      	mov	r2, r0
 80063ba:	4b06      	ldr	r3, [pc, #24]	@ (80063d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	0adb      	lsrs	r3, r3, #11
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	4904      	ldr	r1, [pc, #16]	@ (80063d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80063c6:	5ccb      	ldrb	r3, [r1, r3]
 80063c8:	f003 031f 	and.w	r3, r3, #31
 80063cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	40021000 	.word	0x40021000
 80063d8:	080109c0 	.word	0x080109c0

080063dc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	b087      	sub	sp, #28
 80063e0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80063e2:	4b1e      	ldr	r3, [pc, #120]	@ (800645c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80063ec:	4b1b      	ldr	r3, [pc, #108]	@ (800645c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	091b      	lsrs	r3, r3, #4
 80063f2:	f003 030f 	and.w	r3, r3, #15
 80063f6:	3301      	adds	r3, #1
 80063f8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d10c      	bne.n	800641a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006400:	4a17      	ldr	r2, [pc, #92]	@ (8006460 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	fbb2 f3f3 	udiv	r3, r2, r3
 8006408:	4a14      	ldr	r2, [pc, #80]	@ (800645c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800640a:	68d2      	ldr	r2, [r2, #12]
 800640c:	0a12      	lsrs	r2, r2, #8
 800640e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006412:	fb02 f303 	mul.w	r3, r2, r3
 8006416:	617b      	str	r3, [r7, #20]
    break;
 8006418:	e00c      	b.n	8006434 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800641a:	4a11      	ldr	r2, [pc, #68]	@ (8006460 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006422:	4a0e      	ldr	r2, [pc, #56]	@ (800645c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006424:	68d2      	ldr	r2, [r2, #12]
 8006426:	0a12      	lsrs	r2, r2, #8
 8006428:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800642c:	fb02 f303 	mul.w	r3, r2, r3
 8006430:	617b      	str	r3, [r7, #20]
    break;
 8006432:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006434:	4b09      	ldr	r3, [pc, #36]	@ (800645c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	0e5b      	lsrs	r3, r3, #25
 800643a:	f003 0303 	and.w	r3, r3, #3
 800643e:	3301      	adds	r3, #1
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	68bb      	ldr	r3, [r7, #8]
 8006448:	fbb2 f3f3 	udiv	r3, r2, r3
 800644c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800644e:	687b      	ldr	r3, [r7, #4]
}
 8006450:	4618      	mov	r0, r3
 8006452:	371c      	adds	r7, #28
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	40021000 	.word	0x40021000
 8006460:	00f42400 	.word	0x00f42400

08006464 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b086      	sub	sp, #24
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800646c:	2300      	movs	r3, #0
 800646e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006470:	2300      	movs	r3, #0
 8006472:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800647c:	2b00      	cmp	r3, #0
 800647e:	f000 8098 	beq.w	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006482:	2300      	movs	r3, #0
 8006484:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006486:	4b43      	ldr	r3, [pc, #268]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006488:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800648a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800648e:	2b00      	cmp	r3, #0
 8006490:	d10d      	bne.n	80064ae <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006492:	4b40      	ldr	r3, [pc, #256]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006494:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006496:	4a3f      	ldr	r2, [pc, #252]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006498:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800649c:	6593      	str	r3, [r2, #88]	@ 0x58
 800649e:	4b3d      	ldr	r3, [pc, #244]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80064a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80064a6:	60bb      	str	r3, [r7, #8]
 80064a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80064aa:	2301      	movs	r3, #1
 80064ac:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80064ae:	4b3a      	ldr	r3, [pc, #232]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a39      	ldr	r2, [pc, #228]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80064b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80064ba:	f7fc ff53 	bl	8003364 <HAL_GetTick>
 80064be:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064c0:	e009      	b.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80064c2:	f7fc ff4f 	bl	8003364 <HAL_GetTick>
 80064c6:	4602      	mov	r2, r0
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	2b02      	cmp	r3, #2
 80064ce:	d902      	bls.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80064d0:	2303      	movs	r3, #3
 80064d2:	74fb      	strb	r3, [r7, #19]
        break;
 80064d4:	e005      	b.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80064d6:	4b30      	ldr	r3, [pc, #192]	@ (8006598 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0ef      	beq.n	80064c2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80064e2:	7cfb      	ldrb	r3, [r7, #19]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d159      	bne.n	800659c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80064e8:	4b2a      	ldr	r3, [pc, #168]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80064ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80064ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80064f2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d01e      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	429a      	cmp	r2, r3
 8006502:	d019      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006504:	4b23      	ldr	r3, [pc, #140]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006506:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800650a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800650e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006510:	4b20      	ldr	r3, [pc, #128]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006512:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006516:	4a1f      	ldr	r2, [pc, #124]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800651c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006520:	4b1c      	ldr	r3, [pc, #112]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006526:	4a1b      	ldr	r2, [pc, #108]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800652c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006530:	4a18      	ldr	r2, [pc, #96]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	f003 0301 	and.w	r3, r3, #1
 800653e:	2b00      	cmp	r3, #0
 8006540:	d016      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006542:	f7fc ff0f 	bl	8003364 <HAL_GetTick>
 8006546:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006548:	e00b      	b.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800654a:	f7fc ff0b 	bl	8003364 <HAL_GetTick>
 800654e:	4602      	mov	r2, r0
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	1ad3      	subs	r3, r2, r3
 8006554:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006558:	4293      	cmp	r3, r2
 800655a:	d902      	bls.n	8006562 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	74fb      	strb	r3, [r7, #19]
            break;
 8006560:	e006      	b.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006562:	4b0c      	ldr	r3, [pc, #48]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006564:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006568:	f003 0302 	and.w	r3, r3, #2
 800656c:	2b00      	cmp	r3, #0
 800656e:	d0ec      	beq.n	800654a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8006570:	7cfb      	ldrb	r3, [r7, #19]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d10b      	bne.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006576:	4b07      	ldr	r3, [pc, #28]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006578:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800657c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006584:	4903      	ldr	r1, [pc, #12]	@ (8006594 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006586:	4313      	orrs	r3, r2
 8006588:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800658c:	e008      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800658e:	7cfb      	ldrb	r3, [r7, #19]
 8006590:	74bb      	strb	r3, [r7, #18]
 8006592:	e005      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8006594:	40021000 	.word	0x40021000
 8006598:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800659c:	7cfb      	ldrb	r3, [r7, #19]
 800659e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80065a0:	7c7b      	ldrb	r3, [r7, #17]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d105      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80065a6:	4ba6      	ldr	r3, [pc, #664]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065aa:	4aa5      	ldr	r2, [pc, #660]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80065b0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f003 0301 	and.w	r3, r3, #1
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00a      	beq.n	80065d4 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80065be:	4ba0      	ldr	r3, [pc, #640]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c4:	f023 0203 	bic.w	r2, r3, #3
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	685b      	ldr	r3, [r3, #4]
 80065cc:	499c      	ldr	r1, [pc, #624]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065ce:	4313      	orrs	r3, r2
 80065d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f003 0302 	and.w	r3, r3, #2
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d00a      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80065e0:	4b97      	ldr	r3, [pc, #604]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065e6:	f023 020c 	bic.w	r2, r3, #12
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	4994      	ldr	r1, [pc, #592]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80065f0:	4313      	orrs	r3, r2
 80065f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0304 	and.w	r3, r3, #4
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00a      	beq.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006602:	4b8f      	ldr	r3, [pc, #572]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006604:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006608:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	68db      	ldr	r3, [r3, #12]
 8006610:	498b      	ldr	r1, [pc, #556]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006612:	4313      	orrs	r3, r2
 8006614:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00a      	beq.n	800663a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006624:	4b86      	ldr	r3, [pc, #536]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800662a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	691b      	ldr	r3, [r3, #16]
 8006632:	4983      	ldr	r1, [pc, #524]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006634:	4313      	orrs	r3, r2
 8006636:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f003 0320 	and.w	r3, r3, #32
 8006642:	2b00      	cmp	r3, #0
 8006644:	d00a      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006646:	4b7e      	ldr	r3, [pc, #504]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006648:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800664c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	695b      	ldr	r3, [r3, #20]
 8006654:	497a      	ldr	r1, [pc, #488]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006656:	4313      	orrs	r3, r2
 8006658:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00a      	beq.n	800667e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006668:	4b75      	ldr	r3, [pc, #468]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800666a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800666e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	699b      	ldr	r3, [r3, #24]
 8006676:	4972      	ldr	r1, [pc, #456]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006678:	4313      	orrs	r3, r2
 800667a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00a      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800668a:	4b6d      	ldr	r3, [pc, #436]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800668c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006690:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	69db      	ldr	r3, [r3, #28]
 8006698:	4969      	ldr	r1, [pc, #420]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800669a:	4313      	orrs	r3, r2
 800669c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d00a      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80066ac:	4b64      	ldr	r3, [pc, #400]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b2:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	4961      	ldr	r1, [pc, #388]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00a      	beq.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066ce:	4b5c      	ldr	r3, [pc, #368]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066d4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066dc:	4958      	ldr	r1, [pc, #352]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066de:	4313      	orrs	r3, r2
 80066e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d015      	beq.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80066f0:	4b53      	ldr	r3, [pc, #332]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066f6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fe:	4950      	ldr	r1, [pc, #320]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006700:	4313      	orrs	r3, r2
 8006702:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800670a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800670e:	d105      	bne.n	800671c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006710:	4b4b      	ldr	r3, [pc, #300]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006712:	68db      	ldr	r3, [r3, #12]
 8006714:	4a4a      	ldr	r2, [pc, #296]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006716:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800671a:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006724:	2b00      	cmp	r3, #0
 8006726:	d015      	beq.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006728:	4b45      	ldr	r3, [pc, #276]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800672a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800672e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006736:	4942      	ldr	r1, [pc, #264]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006738:	4313      	orrs	r3, r2
 800673a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006742:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006746:	d105      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006748:	4b3d      	ldr	r3, [pc, #244]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	4a3c      	ldr	r2, [pc, #240]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800674e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006752:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800675c:	2b00      	cmp	r3, #0
 800675e:	d015      	beq.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006760:	4b37      	ldr	r3, [pc, #220]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006762:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006766:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800676e:	4934      	ldr	r1, [pc, #208]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006770:	4313      	orrs	r3, r2
 8006772:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800677e:	d105      	bne.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006780:	4b2f      	ldr	r3, [pc, #188]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006782:	68db      	ldr	r3, [r3, #12]
 8006784:	4a2e      	ldr	r2, [pc, #184]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006786:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800678a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006794:	2b00      	cmp	r3, #0
 8006796:	d015      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006798:	4b29      	ldr	r3, [pc, #164]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800679a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800679e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067a6:	4926      	ldr	r1, [pc, #152]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067a8:	4313      	orrs	r3, r2
 80067aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80067b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067b6:	d105      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067b8:	4b21      	ldr	r3, [pc, #132]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	4a20      	ldr	r2, [pc, #128]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d015      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80067d0:	4b1b      	ldr	r3, [pc, #108]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067de:	4918      	ldr	r1, [pc, #96]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80067ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80067ee:	d105      	bne.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80067f0:	4b13      	ldr	r3, [pc, #76]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	4a12      	ldr	r2, [pc, #72]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80067fa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006804:	2b00      	cmp	r3, #0
 8006806:	d015      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006808:	4b0d      	ldr	r3, [pc, #52]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800680a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800680e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006816:	490a      	ldr	r1, [pc, #40]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006818:	4313      	orrs	r3, r2
 800681a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006822:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006826:	d105      	bne.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006828:	4b05      	ldr	r3, [pc, #20]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	4a04      	ldr	r2, [pc, #16]	@ (8006840 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800682e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006832:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006834:	7cbb      	ldrb	r3, [r7, #18]
}
 8006836:	4618      	mov	r0, r3
 8006838:	3718      	adds	r7, #24
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	40021000 	.word	0x40021000

08006844 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	b084      	sub	sp, #16
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d101      	bne.n	8006856 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e09d      	b.n	8006992 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800685a:	2b00      	cmp	r3, #0
 800685c:	d108      	bne.n	8006870 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685b      	ldr	r3, [r3, #4]
 8006862:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006866:	d009      	beq.n	800687c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	61da      	str	r2, [r3, #28]
 800686e:	e005      	b.n	800687c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006888:	b2db      	uxtb	r3, r3
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fb fe9a 	bl	80025d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2202      	movs	r2, #2
 80068a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80068b2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68db      	ldr	r3, [r3, #12]
 80068b8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068bc:	d902      	bls.n	80068c4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
 80068c2:	e002      	b.n	80068ca <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80068c4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80068c8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	68db      	ldr	r3, [r3, #12]
 80068ce:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80068d2:	d007      	beq.n	80068e4 <HAL_SPI_Init+0xa0>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	68db      	ldr	r3, [r3, #12]
 80068d8:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80068dc:	d002      	beq.n	80068e4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	689b      	ldr	r3, [r3, #8]
 80068f0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80068f4:	431a      	orrs	r2, r3
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	691b      	ldr	r3, [r3, #16]
 80068fa:	f003 0302 	and.w	r3, r3, #2
 80068fe:	431a      	orrs	r2, r3
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	f003 0301 	and.w	r3, r3, #1
 8006908:	431a      	orrs	r2, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	699b      	ldr	r3, [r3, #24]
 800690e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006912:	431a      	orrs	r2, r3
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	69db      	ldr	r3, [r3, #28]
 8006918:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800691c:	431a      	orrs	r2, r3
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6a1b      	ldr	r3, [r3, #32]
 8006922:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006926:	ea42 0103 	orr.w	r1, r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	430a      	orrs	r2, r1
 8006938:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	699b      	ldr	r3, [r3, #24]
 800693e:	0c1b      	lsrs	r3, r3, #16
 8006940:	f003 0204 	and.w	r2, r3, #4
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006948:	f003 0310 	and.w	r3, r3, #16
 800694c:	431a      	orrs	r2, r3
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006952:	f003 0308 	and.w	r3, r3, #8
 8006956:	431a      	orrs	r2, r3
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006960:	ea42 0103 	orr.w	r1, r2, r3
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	69da      	ldr	r2, [r3, #28]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006980:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	2201      	movs	r2, #1
 800698c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006990:	2300      	movs	r3, #0
}
 8006992:	4618      	mov	r0, r3
 8006994:	3710      	adds	r7, #16
 8006996:	46bd      	mov	sp, r7
 8006998:	bd80      	pop	{r7, pc}

0800699a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800699a:	b580      	push	{r7, lr}
 800699c:	b088      	sub	sp, #32
 800699e:	af00      	add	r7, sp, #0
 80069a0:	60f8      	str	r0, [r7, #12]
 80069a2:	60b9      	str	r1, [r7, #8]
 80069a4:	603b      	str	r3, [r7, #0]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069aa:	f7fc fcdb 	bl	8003364 <HAL_GetTick>
 80069ae:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80069b0:	88fb      	ldrh	r3, [r7, #6]
 80069b2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d001      	beq.n	80069c4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80069c0:	2302      	movs	r3, #2
 80069c2:	e15c      	b.n	8006c7e <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <HAL_SPI_Transmit+0x36>
 80069ca:	88fb      	ldrh	r3, [r7, #6]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d101      	bne.n	80069d4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	e154      	b.n	8006c7e <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d101      	bne.n	80069e2 <HAL_SPI_Transmit+0x48>
 80069de:	2302      	movs	r3, #2
 80069e0:	e14d      	b.n	8006c7e <HAL_SPI_Transmit+0x2e4>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2203      	movs	r2, #3
 80069ee:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	88fa      	ldrh	r2, [r7, #6]
 8006a02:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	88fa      	ldrh	r2, [r7, #6]
 8006a08:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	2200      	movs	r2, #0
 8006a14:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	689b      	ldr	r3, [r3, #8]
 8006a30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a34:	d10f      	bne.n	8006a56 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a44:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006a54:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a60:	2b40      	cmp	r3, #64	@ 0x40
 8006a62:	d007      	beq.n	8006a74 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a7c:	d952      	bls.n	8006b24 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <HAL_SPI_Transmit+0xf2>
 8006a86:	8b7b      	ldrh	r3, [r7, #26]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d145      	bne.n	8006b18 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a90:	881a      	ldrh	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9c:	1c9a      	adds	r2, r3, #2
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006ab0:	e032      	b.n	8006b18 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d112      	bne.n	8006ae6 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ac4:	881a      	ldrh	r2, [r3, #0]
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ad0:	1c9a      	adds	r2, r3, #2
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	3b01      	subs	r3, #1
 8006ade:	b29a      	uxth	r2, r3
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006ae4:	e018      	b.n	8006b18 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ae6:	f7fc fc3d 	bl	8003364 <HAL_GetTick>
 8006aea:	4602      	mov	r2, r0
 8006aec:	69fb      	ldr	r3, [r7, #28]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d803      	bhi.n	8006afe <HAL_SPI_Transmit+0x164>
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006afc:	d102      	bne.n	8006b04 <HAL_SPI_Transmit+0x16a>
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d109      	bne.n	8006b18 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	2201      	movs	r2, #1
 8006b08:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	2200      	movs	r2, #0
 8006b10:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e0b2      	b.n	8006c7e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d1c7      	bne.n	8006ab2 <HAL_SPI_Transmit+0x118>
 8006b22:	e083      	b.n	8006c2c <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d002      	beq.n	8006b32 <HAL_SPI_Transmit+0x198>
 8006b2c:	8b7b      	ldrh	r3, [r7, #26]
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d177      	bne.n	8006c22 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b36:	b29b      	uxth	r3, r3
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d912      	bls.n	8006b62 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b40:	881a      	ldrh	r2, [r3, #0]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b4c:	1c9a      	adds	r2, r3, #2
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	3b02      	subs	r3, #2
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b60:	e05f      	b.n	8006c22 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	330c      	adds	r3, #12
 8006b6c:	7812      	ldrb	r2, [r2, #0]
 8006b6e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b74:	1c5a      	adds	r2, r3, #1
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b7e:	b29b      	uxth	r3, r3
 8006b80:	3b01      	subs	r3, #1
 8006b82:	b29a      	uxth	r2, r3
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006b88:	e04b      	b.n	8006c22 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	689b      	ldr	r3, [r3, #8]
 8006b90:	f003 0302 	and.w	r3, r3, #2
 8006b94:	2b02      	cmp	r3, #2
 8006b96:	d12b      	bne.n	8006bf0 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b9c:	b29b      	uxth	r3, r3
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d912      	bls.n	8006bc8 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba6:	881a      	ldrh	r2, [r3, #0]
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb2:	1c9a      	adds	r2, r3, #2
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	3b02      	subs	r3, #2
 8006bc0:	b29a      	uxth	r2, r3
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bc6:	e02c      	b.n	8006c22 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	330c      	adds	r3, #12
 8006bd2:	7812      	ldrb	r2, [r2, #0]
 8006bd4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bda:	1c5a      	adds	r2, r3, #1
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006be4:	b29b      	uxth	r3, r3
 8006be6:	3b01      	subs	r3, #1
 8006be8:	b29a      	uxth	r2, r3
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bee:	e018      	b.n	8006c22 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bf0:	f7fc fbb8 	bl	8003364 <HAL_GetTick>
 8006bf4:	4602      	mov	r2, r0
 8006bf6:	69fb      	ldr	r3, [r7, #28]
 8006bf8:	1ad3      	subs	r3, r2, r3
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d803      	bhi.n	8006c08 <HAL_SPI_Transmit+0x26e>
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006c06:	d102      	bne.n	8006c0e <HAL_SPI_Transmit+0x274>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d109      	bne.n	8006c22 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2201      	movs	r2, #1
 8006c12:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2200      	movs	r2, #0
 8006c1a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8006c1e:	2303      	movs	r3, #3
 8006c20:	e02d      	b.n	8006c7e <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d1ae      	bne.n	8006b8a <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c2c:	69fa      	ldr	r2, [r7, #28]
 8006c2e:	6839      	ldr	r1, [r7, #0]
 8006c30:	68f8      	ldr	r0, [r7, #12]
 8006c32:	f000 fb73 	bl	800731c <SPI_EndRxTxTransaction>
 8006c36:	4603      	mov	r3, r0
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d002      	beq.n	8006c42 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2220      	movs	r2, #32
 8006c40:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10a      	bne.n	8006c60 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	617b      	str	r3, [r7, #20]
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	68db      	ldr	r3, [r3, #12]
 8006c54:	617b      	str	r3, [r7, #20]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	617b      	str	r3, [r7, #20]
 8006c5e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	2201      	movs	r2, #1
 8006c64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d001      	beq.n	8006c7c <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e000      	b.n	8006c7e <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8006c7c:	2300      	movs	r3, #0
  }
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3720      	adds	r7, #32
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c86:	b580      	push	{r7, lr}
 8006c88:	b08a      	sub	sp, #40	@ 0x28
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	60f8      	str	r0, [r7, #12]
 8006c8e:	60b9      	str	r1, [r7, #8]
 8006c90:	607a      	str	r2, [r7, #4]
 8006c92:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c94:	2301      	movs	r3, #1
 8006c96:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c98:	f7fc fb64 	bl	8003364 <HAL_GetTick>
 8006c9c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006ca4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006cac:	887b      	ldrh	r3, [r7, #2]
 8006cae:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8006cb0:	887b      	ldrh	r3, [r7, #2]
 8006cb2:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006cb4:	7ffb      	ldrb	r3, [r7, #31]
 8006cb6:	2b01      	cmp	r3, #1
 8006cb8:	d00c      	beq.n	8006cd4 <HAL_SPI_TransmitReceive+0x4e>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006cc0:	d106      	bne.n	8006cd0 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d102      	bne.n	8006cd0 <HAL_SPI_TransmitReceive+0x4a>
 8006cca:	7ffb      	ldrb	r3, [r7, #31]
 8006ccc:	2b04      	cmp	r3, #4
 8006cce:	d001      	beq.n	8006cd4 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e1f3      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d005      	beq.n	8006ce6 <HAL_SPI_TransmitReceive+0x60>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d002      	beq.n	8006ce6 <HAL_SPI_TransmitReceive+0x60>
 8006ce0:	887b      	ldrh	r3, [r7, #2]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	e1e8      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d101      	bne.n	8006cf8 <HAL_SPI_TransmitReceive+0x72>
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e1e1      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b04      	cmp	r3, #4
 8006d0a:	d003      	beq.n	8006d14 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2205      	movs	r2, #5
 8006d10:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2200      	movs	r2, #0
 8006d18:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	687a      	ldr	r2, [r7, #4]
 8006d1e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	887a      	ldrh	r2, [r7, #2]
 8006d24:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	887a      	ldrh	r2, [r7, #2]
 8006d2c:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	887a      	ldrh	r2, [r7, #2]
 8006d3a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	887a      	ldrh	r2, [r7, #2]
 8006d40:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2200      	movs	r2, #0
 8006d46:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006d56:	d802      	bhi.n	8006d5e <HAL_SPI_TransmitReceive+0xd8>
 8006d58:	8abb      	ldrh	r3, [r7, #20]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d908      	bls.n	8006d70 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006d6c:	605a      	str	r2, [r3, #4]
 8006d6e:	e007      	b.n	8006d80 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006d7e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d8a:	2b40      	cmp	r3, #64	@ 0x40
 8006d8c:	d007      	beq.n	8006d9e <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681a      	ldr	r2, [r3, #0]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d9c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006da6:	f240 8083 	bls.w	8006eb0 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	685b      	ldr	r3, [r3, #4]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d002      	beq.n	8006db8 <HAL_SPI_TransmitReceive+0x132>
 8006db2:	8afb      	ldrh	r3, [r7, #22]
 8006db4:	2b01      	cmp	r3, #1
 8006db6:	d16f      	bne.n	8006e98 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dbc:	881a      	ldrh	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dc8:	1c9a      	adds	r2, r3, #2
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006dd2:	b29b      	uxth	r3, r3
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ddc:	e05c      	b.n	8006e98 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	f003 0302 	and.w	r3, r3, #2
 8006de8:	2b02      	cmp	r3, #2
 8006dea:	d11b      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x19e>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006df0:	b29b      	uxth	r3, r3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d016      	beq.n	8006e24 <HAL_SPI_TransmitReceive+0x19e>
 8006df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d113      	bne.n	8006e24 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e00:	881a      	ldrh	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e0c:	1c9a      	adds	r2, r3, #2
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006e20:	2300      	movs	r3, #0
 8006e22:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	f003 0301 	and.w	r3, r3, #1
 8006e2e:	2b01      	cmp	r3, #1
 8006e30:	d11c      	bne.n	8006e6c <HAL_SPI_TransmitReceive+0x1e6>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d016      	beq.n	8006e6c <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	68da      	ldr	r2, [r3, #12]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e48:	b292      	uxth	r2, r2
 8006e4a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e50:	1c9a      	adds	r2, r3, #2
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006e5c:	b29b      	uxth	r3, r3
 8006e5e:	3b01      	subs	r3, #1
 8006e60:	b29a      	uxth	r2, r3
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e68:	2301      	movs	r3, #1
 8006e6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e6c:	f7fc fa7a 	bl	8003364 <HAL_GetTick>
 8006e70:	4602      	mov	r2, r0
 8006e72:	6a3b      	ldr	r3, [r7, #32]
 8006e74:	1ad3      	subs	r3, r2, r3
 8006e76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e78:	429a      	cmp	r2, r3
 8006e7a:	d80d      	bhi.n	8006e98 <HAL_SPI_TransmitReceive+0x212>
 8006e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e82:	d009      	beq.n	8006e98 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e111      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e9c:	b29b      	uxth	r3, r3
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d19d      	bne.n	8006dde <HAL_SPI_TransmitReceive+0x158>
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006ea8:	b29b      	uxth	r3, r3
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d197      	bne.n	8006dde <HAL_SPI_TransmitReceive+0x158>
 8006eae:	e0e5      	b.n	800707c <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	685b      	ldr	r3, [r3, #4]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d003      	beq.n	8006ec0 <HAL_SPI_TransmitReceive+0x23a>
 8006eb8:	8afb      	ldrh	r3, [r7, #22]
 8006eba:	2b01      	cmp	r3, #1
 8006ebc:	f040 80d1 	bne.w	8007062 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ec4:	b29b      	uxth	r3, r3
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d912      	bls.n	8006ef0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ece:	881a      	ldrh	r2, [r3, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006eda:	1c9a      	adds	r2, r3, #2
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	3b02      	subs	r3, #2
 8006ee8:	b29a      	uxth	r2, r3
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006eee:	e0b8      	b.n	8007062 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	7812      	ldrb	r2, [r2, #0]
 8006efc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	3b01      	subs	r3, #1
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f16:	e0a4      	b.n	8007062 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 0302 	and.w	r3, r3, #2
 8006f22:	2b02      	cmp	r3, #2
 8006f24:	d134      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x30a>
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f2a:	b29b      	uxth	r3, r3
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d02f      	beq.n	8006f90 <HAL_SPI_TransmitReceive+0x30a>
 8006f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d12c      	bne.n	8006f90 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f3a:	b29b      	uxth	r3, r3
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d912      	bls.n	8006f66 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f44:	881a      	ldrh	r2, [r3, #0]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f50:	1c9a      	adds	r2, r3, #2
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f5a:	b29b      	uxth	r3, r3
 8006f5c:	3b02      	subs	r3, #2
 8006f5e:	b29a      	uxth	r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006f64:	e012      	b.n	8006f8c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	330c      	adds	r3, #12
 8006f70:	7812      	ldrb	r2, [r2, #0]
 8006f72:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f78:	1c5a      	adds	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	3b01      	subs	r3, #1
 8006f86:	b29a      	uxth	r2, r3
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	f003 0301 	and.w	r3, r3, #1
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d148      	bne.n	8007030 <HAL_SPI_TransmitReceive+0x3aa>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d042      	beq.n	8007030 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fb0:	b29b      	uxth	r3, r3
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d923      	bls.n	8006ffe <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	68da      	ldr	r2, [r3, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc0:	b292      	uxth	r2, r2
 8006fc2:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc8:	1c9a      	adds	r2, r3, #2
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b02      	subs	r3, #2
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8006fe6:	b29b      	uxth	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	d81f      	bhi.n	800702c <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006ffa:	605a      	str	r2, [r3, #4]
 8006ffc:	e016      	b.n	800702c <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f103 020c 	add.w	r2, r3, #12
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800700a:	7812      	ldrb	r2, [r2, #0]
 800700c:	b2d2      	uxtb	r2, r2
 800700e:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007014:	1c5a      	adds	r2, r3, #1
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007020:	b29b      	uxth	r3, r3
 8007022:	3b01      	subs	r3, #1
 8007024:	b29a      	uxth	r2, r3
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800702c:	2301      	movs	r3, #1
 800702e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007030:	f7fc f998 	bl	8003364 <HAL_GetTick>
 8007034:	4602      	mov	r2, r0
 8007036:	6a3b      	ldr	r3, [r7, #32]
 8007038:	1ad3      	subs	r3, r2, r3
 800703a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800703c:	429a      	cmp	r2, r3
 800703e:	d803      	bhi.n	8007048 <HAL_SPI_TransmitReceive+0x3c2>
 8007040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007042:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007046:	d102      	bne.n	800704e <HAL_SPI_TransmitReceive+0x3c8>
 8007048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800704a:	2b00      	cmp	r3, #0
 800704c:	d109      	bne.n	8007062 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2201      	movs	r2, #1
 8007052:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	2200      	movs	r2, #0
 800705a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 800705e:	2303      	movs	r3, #3
 8007060:	e02c      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007066:	b29b      	uxth	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	f47f af55 	bne.w	8006f18 <HAL_SPI_TransmitReceive+0x292>
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8007074:	b29b      	uxth	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	f47f af4e 	bne.w	8006f18 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800707c:	6a3a      	ldr	r2, [r7, #32]
 800707e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007080:	68f8      	ldr	r0, [r7, #12]
 8007082:	f000 f94b 	bl	800731c <SPI_EndRxTxTransaction>
 8007086:	4603      	mov	r3, r0
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2220      	movs	r2, #32
 8007090:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e00e      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d001      	beq.n	80070ba <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e000      	b.n	80070bc <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80070ba:	2300      	movs	r3, #0
  }
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3728      	adds	r7, #40	@ 0x28
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}

080070c4 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80070c4:	b480      	push	{r7}
 80070c6:	b083      	sub	sp, #12
 80070c8:	af00      	add	r7, sp, #0
 80070ca:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80070d2:	b2db      	uxtb	r3, r3
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b088      	sub	sp, #32
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	60f8      	str	r0, [r7, #12]
 80070e8:	60b9      	str	r1, [r7, #8]
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	4613      	mov	r3, r2
 80070ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80070f0:	f7fc f938 	bl	8003364 <HAL_GetTick>
 80070f4:	4602      	mov	r2, r0
 80070f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070f8:	1a9b      	subs	r3, r3, r2
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	4413      	add	r3, r2
 80070fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007100:	f7fc f930 	bl	8003364 <HAL_GetTick>
 8007104:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007106:	4b39      	ldr	r3, [pc, #228]	@ (80071ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	015b      	lsls	r3, r3, #5
 800710c:	0d1b      	lsrs	r3, r3, #20
 800710e:	69fa      	ldr	r2, [r7, #28]
 8007110:	fb02 f303 	mul.w	r3, r2, r3
 8007114:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007116:	e054      	b.n	80071c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800711e:	d050      	beq.n	80071c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007120:	f7fc f920 	bl	8003364 <HAL_GetTick>
 8007124:	4602      	mov	r2, r0
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	69fa      	ldr	r2, [r7, #28]
 800712c:	429a      	cmp	r2, r3
 800712e:	d902      	bls.n	8007136 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d13d      	bne.n	80071b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007144:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800714e:	d111      	bne.n	8007174 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007158:	d004      	beq.n	8007164 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007162:	d107      	bne.n	8007174 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	681a      	ldr	r2, [r3, #0]
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007172:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007178:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800717c:	d10f      	bne.n	800719e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800718c:	601a      	str	r2, [r3, #0]
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800719c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	2201      	movs	r2, #1
 80071a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2200      	movs	r2, #0
 80071aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80071ae:	2303      	movs	r3, #3
 80071b0:	e017      	b.n	80071e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80071b2:	697b      	ldr	r3, [r7, #20]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d101      	bne.n	80071bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80071b8:	2300      	movs	r3, #0
 80071ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	3b01      	subs	r3, #1
 80071c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	689a      	ldr	r2, [r3, #8]
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	4013      	ands	r3, r2
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	429a      	cmp	r2, r3
 80071d0:	bf0c      	ite	eq
 80071d2:	2301      	moveq	r3, #1
 80071d4:	2300      	movne	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	461a      	mov	r2, r3
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d19b      	bne.n	8007118 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80071e0:	2300      	movs	r3, #0
}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3720      	adds	r7, #32
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
 80071ea:	bf00      	nop
 80071ec:	2000000c 	.word	0x2000000c

080071f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b08a      	sub	sp, #40	@ 0x28
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	60f8      	str	r0, [r7, #12]
 80071f8:	60b9      	str	r1, [r7, #8]
 80071fa:	607a      	str	r2, [r7, #4]
 80071fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80071fe:	2300      	movs	r3, #0
 8007200:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007202:	f7fc f8af 	bl	8003364 <HAL_GetTick>
 8007206:	4602      	mov	r2, r0
 8007208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720a:	1a9b      	subs	r3, r3, r2
 800720c:	683a      	ldr	r2, [r7, #0]
 800720e:	4413      	add	r3, r2
 8007210:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8007212:	f7fc f8a7 	bl	8003364 <HAL_GetTick>
 8007216:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	330c      	adds	r3, #12
 800721e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007220:	4b3d      	ldr	r3, [pc, #244]	@ (8007318 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007222:	681a      	ldr	r2, [r3, #0]
 8007224:	4613      	mov	r3, r2
 8007226:	009b      	lsls	r3, r3, #2
 8007228:	4413      	add	r3, r2
 800722a:	00da      	lsls	r2, r3, #3
 800722c:	1ad3      	subs	r3, r2, r3
 800722e:	0d1b      	lsrs	r3, r3, #20
 8007230:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007232:	fb02 f303 	mul.w	r3, r2, r3
 8007236:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007238:	e060      	b.n	80072fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800723a:	68bb      	ldr	r3, [r7, #8]
 800723c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007240:	d107      	bne.n	8007252 <SPI_WaitFifoStateUntilTimeout+0x62>
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d104      	bne.n	8007252 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	781b      	ldrb	r3, [r3, #0]
 800724c:	b2db      	uxtb	r3, r3
 800724e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8007250:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007258:	d050      	beq.n	80072fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800725a:	f7fc f883 	bl	8003364 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	6a3b      	ldr	r3, [r7, #32]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007266:	429a      	cmp	r2, r3
 8007268:	d902      	bls.n	8007270 <SPI_WaitFifoStateUntilTimeout+0x80>
 800726a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726c:	2b00      	cmp	r3, #0
 800726e:	d13d      	bne.n	80072ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	685a      	ldr	r2, [r3, #4]
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800727e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	685b      	ldr	r3, [r3, #4]
 8007284:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007288:	d111      	bne.n	80072ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	689b      	ldr	r3, [r3, #8]
 800728e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007292:	d004      	beq.n	800729e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800729c:	d107      	bne.n	80072ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	681a      	ldr	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80072ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80072b6:	d10f      	bne.n	80072d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	2200      	movs	r2, #0
 80072e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80072e8:	2303      	movs	r3, #3
 80072ea:	e010      	b.n	800730e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80072f2:	2300      	movs	r3, #0
 80072f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80072f6:	69bb      	ldr	r3, [r7, #24]
 80072f8:	3b01      	subs	r3, #1
 80072fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	4013      	ands	r3, r2
 8007306:	687a      	ldr	r2, [r7, #4]
 8007308:	429a      	cmp	r2, r3
 800730a:	d196      	bne.n	800723a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3728      	adds	r7, #40	@ 0x28
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	2000000c 	.word	0x2000000c

0800731c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b086      	sub	sp, #24
 8007320:	af02      	add	r7, sp, #8
 8007322:	60f8      	str	r0, [r7, #12]
 8007324:	60b9      	str	r1, [r7, #8]
 8007326:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	9300      	str	r3, [sp, #0]
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	2200      	movs	r2, #0
 8007330:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8007334:	68f8      	ldr	r0, [r7, #12]
 8007336:	f7ff ff5b 	bl	80071f0 <SPI_WaitFifoStateUntilTimeout>
 800733a:	4603      	mov	r3, r0
 800733c:	2b00      	cmp	r3, #0
 800733e:	d007      	beq.n	8007350 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007344:	f043 0220 	orr.w	r2, r3, #32
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800734c:	2303      	movs	r3, #3
 800734e:	e027      	b.n	80073a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	2200      	movs	r2, #0
 8007358:	2180      	movs	r1, #128	@ 0x80
 800735a:	68f8      	ldr	r0, [r7, #12]
 800735c:	f7ff fec0 	bl	80070e0 <SPI_WaitFlagStateUntilTimeout>
 8007360:	4603      	mov	r3, r0
 8007362:	2b00      	cmp	r3, #0
 8007364:	d007      	beq.n	8007376 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800736a:	f043 0220 	orr.w	r2, r3, #32
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8007372:	2303      	movs	r3, #3
 8007374:	e014      	b.n	80073a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	9300      	str	r3, [sp, #0]
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	2200      	movs	r2, #0
 800737e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f7ff ff34 	bl	80071f0 <SPI_WaitFifoStateUntilTimeout>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d007      	beq.n	800739e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007392:	f043 0220 	orr.w	r2, r3, #32
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e000      	b.n	80073a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800739e:	2300      	movs	r3, #0
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3710      	adds	r7, #16
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bd80      	pop	{r7, pc}

080073a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b082      	sub	sp, #8
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	e049      	b.n	800744e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d106      	bne.n	80073d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f7fb fbe4 	bl	8002b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2202      	movs	r2, #2
 80073d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	3304      	adds	r3, #4
 80073e4:	4619      	mov	r1, r3
 80073e6:	4610      	mov	r0, r2
 80073e8:	f000 fd26 	bl	8007e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2201      	movs	r2, #1
 80073f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2201      	movs	r2, #1
 8007400:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3708      	adds	r7, #8
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}

08007456 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007456:	b580      	push	{r7, lr}
 8007458:	b082      	sub	sp, #8
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d101      	bne.n	8007468 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007464:	2301      	movs	r3, #1
 8007466:	e049      	b.n	80074fc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	d106      	bne.n	8007482 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2200      	movs	r2, #0
 8007478:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 f841 	bl	8007504 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2202      	movs	r2, #2
 8007486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	3304      	adds	r3, #4
 8007492:	4619      	mov	r1, r3
 8007494:	4610      	mov	r0, r2
 8007496:	f000 fccf 	bl	8007e38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2201      	movs	r2, #1
 800749e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2201      	movs	r2, #1
 80074a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2201      	movs	r2, #1
 80074ae:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2201      	movs	r2, #1
 80074be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2201      	movs	r2, #1
 80074ce:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	2201      	movs	r2, #1
 80074d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2201      	movs	r2, #1
 80074de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80074fa:	2300      	movs	r3, #0
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007504:	b480      	push	{r7}
 8007506:	b083      	sub	sp, #12
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800750c:	bf00      	nop
 800750e:	370c      	adds	r7, #12
 8007510:	46bd      	mov	sp, r7
 8007512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007516:	4770      	bx	lr

08007518 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d109      	bne.n	800753c <HAL_TIM_PWM_Start+0x24>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800752e:	b2db      	uxtb	r3, r3
 8007530:	2b01      	cmp	r3, #1
 8007532:	bf14      	ite	ne
 8007534:	2301      	movne	r3, #1
 8007536:	2300      	moveq	r3, #0
 8007538:	b2db      	uxtb	r3, r3
 800753a:	e03c      	b.n	80075b6 <HAL_TIM_PWM_Start+0x9e>
 800753c:	683b      	ldr	r3, [r7, #0]
 800753e:	2b04      	cmp	r3, #4
 8007540:	d109      	bne.n	8007556 <HAL_TIM_PWM_Start+0x3e>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b01      	cmp	r3, #1
 800754c:	bf14      	ite	ne
 800754e:	2301      	movne	r3, #1
 8007550:	2300      	moveq	r3, #0
 8007552:	b2db      	uxtb	r3, r3
 8007554:	e02f      	b.n	80075b6 <HAL_TIM_PWM_Start+0x9e>
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	2b08      	cmp	r3, #8
 800755a:	d109      	bne.n	8007570 <HAL_TIM_PWM_Start+0x58>
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007562:	b2db      	uxtb	r3, r3
 8007564:	2b01      	cmp	r3, #1
 8007566:	bf14      	ite	ne
 8007568:	2301      	movne	r3, #1
 800756a:	2300      	moveq	r3, #0
 800756c:	b2db      	uxtb	r3, r3
 800756e:	e022      	b.n	80075b6 <HAL_TIM_PWM_Start+0x9e>
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	2b0c      	cmp	r3, #12
 8007574:	d109      	bne.n	800758a <HAL_TIM_PWM_Start+0x72>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b01      	cmp	r3, #1
 8007580:	bf14      	ite	ne
 8007582:	2301      	movne	r3, #1
 8007584:	2300      	moveq	r3, #0
 8007586:	b2db      	uxtb	r3, r3
 8007588:	e015      	b.n	80075b6 <HAL_TIM_PWM_Start+0x9e>
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	2b10      	cmp	r3, #16
 800758e:	d109      	bne.n	80075a4 <HAL_TIM_PWM_Start+0x8c>
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007596:	b2db      	uxtb	r3, r3
 8007598:	2b01      	cmp	r3, #1
 800759a:	bf14      	ite	ne
 800759c:	2301      	movne	r3, #1
 800759e:	2300      	moveq	r3, #0
 80075a0:	b2db      	uxtb	r3, r3
 80075a2:	e008      	b.n	80075b6 <HAL_TIM_PWM_Start+0x9e>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80075aa:	b2db      	uxtb	r3, r3
 80075ac:	2b01      	cmp	r3, #1
 80075ae:	bf14      	ite	ne
 80075b0:	2301      	movne	r3, #1
 80075b2:	2300      	moveq	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d001      	beq.n	80075be <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e097      	b.n	80076ee <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80075be:	683b      	ldr	r3, [r7, #0]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d104      	bne.n	80075ce <HAL_TIM_PWM_Start+0xb6>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2202      	movs	r2, #2
 80075c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075cc:	e023      	b.n	8007616 <HAL_TIM_PWM_Start+0xfe>
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	2b04      	cmp	r3, #4
 80075d2:	d104      	bne.n	80075de <HAL_TIM_PWM_Start+0xc6>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2202      	movs	r2, #2
 80075d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075dc:	e01b      	b.n	8007616 <HAL_TIM_PWM_Start+0xfe>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b08      	cmp	r3, #8
 80075e2:	d104      	bne.n	80075ee <HAL_TIM_PWM_Start+0xd6>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	2202      	movs	r2, #2
 80075e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80075ec:	e013      	b.n	8007616 <HAL_TIM_PWM_Start+0xfe>
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b0c      	cmp	r3, #12
 80075f2:	d104      	bne.n	80075fe <HAL_TIM_PWM_Start+0xe6>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2202      	movs	r2, #2
 80075f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075fc:	e00b      	b.n	8007616 <HAL_TIM_PWM_Start+0xfe>
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b10      	cmp	r3, #16
 8007602:	d104      	bne.n	800760e <HAL_TIM_PWM_Start+0xf6>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2202      	movs	r2, #2
 8007608:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800760c:	e003      	b.n	8007616 <HAL_TIM_PWM_Start+0xfe>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2202      	movs	r2, #2
 8007612:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2201      	movs	r2, #1
 800761c:	6839      	ldr	r1, [r7, #0]
 800761e:	4618      	mov	r0, r3
 8007620:	f001 f838 	bl	8008694 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a33      	ldr	r2, [pc, #204]	@ (80076f8 <HAL_TIM_PWM_Start+0x1e0>)
 800762a:	4293      	cmp	r3, r2
 800762c:	d013      	beq.n	8007656 <HAL_TIM_PWM_Start+0x13e>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a32      	ldr	r2, [pc, #200]	@ (80076fc <HAL_TIM_PWM_Start+0x1e4>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d00e      	beq.n	8007656 <HAL_TIM_PWM_Start+0x13e>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	4a30      	ldr	r2, [pc, #192]	@ (8007700 <HAL_TIM_PWM_Start+0x1e8>)
 800763e:	4293      	cmp	r3, r2
 8007640:	d009      	beq.n	8007656 <HAL_TIM_PWM_Start+0x13e>
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4a2f      	ldr	r2, [pc, #188]	@ (8007704 <HAL_TIM_PWM_Start+0x1ec>)
 8007648:	4293      	cmp	r3, r2
 800764a:	d004      	beq.n	8007656 <HAL_TIM_PWM_Start+0x13e>
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	4a2d      	ldr	r2, [pc, #180]	@ (8007708 <HAL_TIM_PWM_Start+0x1f0>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d101      	bne.n	800765a <HAL_TIM_PWM_Start+0x142>
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <HAL_TIM_PWM_Start+0x144>
 800765a:	2300      	movs	r3, #0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d007      	beq.n	8007670 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800766e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	4a20      	ldr	r2, [pc, #128]	@ (80076f8 <HAL_TIM_PWM_Start+0x1e0>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d018      	beq.n	80076ac <HAL_TIM_PWM_Start+0x194>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007682:	d013      	beq.n	80076ac <HAL_TIM_PWM_Start+0x194>
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	4a20      	ldr	r2, [pc, #128]	@ (800770c <HAL_TIM_PWM_Start+0x1f4>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d00e      	beq.n	80076ac <HAL_TIM_PWM_Start+0x194>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	4a1f      	ldr	r2, [pc, #124]	@ (8007710 <HAL_TIM_PWM_Start+0x1f8>)
 8007694:	4293      	cmp	r3, r2
 8007696:	d009      	beq.n	80076ac <HAL_TIM_PWM_Start+0x194>
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a17      	ldr	r2, [pc, #92]	@ (80076fc <HAL_TIM_PWM_Start+0x1e4>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d004      	beq.n	80076ac <HAL_TIM_PWM_Start+0x194>
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4a16      	ldr	r2, [pc, #88]	@ (8007700 <HAL_TIM_PWM_Start+0x1e8>)
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d115      	bne.n	80076d8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	689a      	ldr	r2, [r3, #8]
 80076b2:	4b18      	ldr	r3, [pc, #96]	@ (8007714 <HAL_TIM_PWM_Start+0x1fc>)
 80076b4:	4013      	ands	r3, r2
 80076b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	2b06      	cmp	r3, #6
 80076bc:	d015      	beq.n	80076ea <HAL_TIM_PWM_Start+0x1d2>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80076c4:	d011      	beq.n	80076ea <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f042 0201 	orr.w	r2, r2, #1
 80076d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076d6:	e008      	b.n	80076ea <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	681a      	ldr	r2, [r3, #0]
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f042 0201 	orr.w	r2, r2, #1
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	e000      	b.n	80076ec <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80076ea:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80076ec:	2300      	movs	r3, #0
}
 80076ee:	4618      	mov	r0, r3
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	40012c00 	.word	0x40012c00
 80076fc:	40013400 	.word	0x40013400
 8007700:	40014000 	.word	0x40014000
 8007704:	40014400 	.word	0x40014400
 8007708:	40014800 	.word	0x40014800
 800770c:	40000400 	.word	0x40000400
 8007710:	40000800 	.word	0x40000800
 8007714:	00010007 	.word	0x00010007

08007718 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b084      	sub	sp, #16
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	691b      	ldr	r3, [r3, #16]
 800772e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	f003 0302 	and.w	r3, r3, #2
 8007736:	2b00      	cmp	r3, #0
 8007738:	d020      	beq.n	800777c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f003 0302 	and.w	r3, r3, #2
 8007740:	2b00      	cmp	r3, #0
 8007742:	d01b      	beq.n	800777c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f06f 0202 	mvn.w	r2, #2
 800774c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2201      	movs	r2, #1
 8007752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	699b      	ldr	r3, [r3, #24]
 800775a:	f003 0303 	and.w	r3, r3, #3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d003      	beq.n	800776a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fb4a 	bl	8007dfc <HAL_TIM_IC_CaptureCallback>
 8007768:	e005      	b.n	8007776 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f000 fb3c 	bl	8007de8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fb4d 	bl	8007e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2200      	movs	r2, #0
 800777a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	f003 0304 	and.w	r3, r3, #4
 8007782:	2b00      	cmp	r3, #0
 8007784:	d020      	beq.n	80077c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d01b      	beq.n	80077c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	f06f 0204 	mvn.w	r2, #4
 8007798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2202      	movs	r2, #2
 800779e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d003      	beq.n	80077b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fb24 	bl	8007dfc <HAL_TIM_IC_CaptureCallback>
 80077b4:	e005      	b.n	80077c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f000 fb16 	bl	8007de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 fb27 	bl	8007e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	f003 0308 	and.w	r3, r3, #8
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d020      	beq.n	8007814 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	f003 0308 	and.w	r3, r3, #8
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d01b      	beq.n	8007814 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f06f 0208 	mvn.w	r2, #8
 80077e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	2204      	movs	r2, #4
 80077ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	69db      	ldr	r3, [r3, #28]
 80077f2:	f003 0303 	and.w	r3, r3, #3
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d003      	beq.n	8007802 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fafe 	bl	8007dfc <HAL_TIM_IC_CaptureCallback>
 8007800:	e005      	b.n	800780e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 faf0 	bl	8007de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 fb01 	bl	8007e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2200      	movs	r2, #0
 8007812:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	2b00      	cmp	r3, #0
 800781c:	d020      	beq.n	8007860 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01b      	beq.n	8007860 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0210 	mvn.w	r2, #16
 8007830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2208      	movs	r2, #8
 8007836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fad8 	bl	8007dfc <HAL_TIM_IC_CaptureCallback>
 800784c:	e005      	b.n	800785a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 faca 	bl	8007de8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 fadb 	bl	8007e10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00c      	beq.n	8007884 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f003 0301 	and.w	r3, r3, #1
 8007870:	2b00      	cmp	r3, #0
 8007872:	d007      	beq.n	8007884 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f06f 0201 	mvn.w	r2, #1
 800787c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 faa8 	bl	8007dd4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800788a:	2b00      	cmp	r3, #0
 800788c:	d104      	bne.n	8007898 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800788e:	68bb      	ldr	r3, [r7, #8]
 8007890:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007894:	2b00      	cmp	r3, #0
 8007896:	d00c      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d007      	beq.n	80078b2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80078aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 ffa3 	bl	80087f8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00c      	beq.n	80078d6 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d007      	beq.n	80078d6 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80078ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 ff9b 	bl	800880c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d00c      	beq.n	80078fa <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80078f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fa95 	bl	8007e24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f003 0320 	and.w	r3, r3, #32
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00c      	beq.n	800791e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 0320 	and.w	r3, r3, #32
 800790a:	2b00      	cmp	r3, #0
 800790c:	d007      	beq.n	800791e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f06f 0220 	mvn.w	r2, #32
 8007916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 ff63 	bl	80087e4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007924:	2b00      	cmp	r3, #0
 8007926:	d00c      	beq.n	8007942 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800792e:	2b00      	cmp	r3, #0
 8007930:	d007      	beq.n	8007942 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800793a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 ff6f 	bl	8008820 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8007942:	68bb      	ldr	r3, [r7, #8]
 8007944:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00c      	beq.n	8007966 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007952:	2b00      	cmp	r3, #0
 8007954:	d007      	beq.n	8007966 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800795e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 ff67 	bl	8008834 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800796c:	2b00      	cmp	r3, #0
 800796e:	d00c      	beq.n	800798a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d007      	beq.n	800798a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007982:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 ff5f 	bl	8008848 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800798a:	68bb      	ldr	r3, [r7, #8]
 800798c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d00c      	beq.n	80079ae <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d007      	beq.n	80079ae <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80079a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80079a8:	6878      	ldr	r0, [r7, #4]
 80079aa:	f000 ff57 	bl	800885c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80079ae:	bf00      	nop
 80079b0:	3710      	adds	r7, #16
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b086      	sub	sp, #24
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	60b9      	str	r1, [r7, #8]
 80079c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80079c4:	2300      	movs	r3, #0
 80079c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e0ff      	b.n	8007bd6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	2201      	movs	r2, #1
 80079da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2b14      	cmp	r3, #20
 80079e2:	f200 80f0 	bhi.w	8007bc6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80079e6:	a201      	add	r2, pc, #4	@ (adr r2, 80079ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a41 	.word	0x08007a41
 80079f0:	08007bc7 	.word	0x08007bc7
 80079f4:	08007bc7 	.word	0x08007bc7
 80079f8:	08007bc7 	.word	0x08007bc7
 80079fc:	08007a81 	.word	0x08007a81
 8007a00:	08007bc7 	.word	0x08007bc7
 8007a04:	08007bc7 	.word	0x08007bc7
 8007a08:	08007bc7 	.word	0x08007bc7
 8007a0c:	08007ac3 	.word	0x08007ac3
 8007a10:	08007bc7 	.word	0x08007bc7
 8007a14:	08007bc7 	.word	0x08007bc7
 8007a18:	08007bc7 	.word	0x08007bc7
 8007a1c:	08007b03 	.word	0x08007b03
 8007a20:	08007bc7 	.word	0x08007bc7
 8007a24:	08007bc7 	.word	0x08007bc7
 8007a28:	08007bc7 	.word	0x08007bc7
 8007a2c:	08007b45 	.word	0x08007b45
 8007a30:	08007bc7 	.word	0x08007bc7
 8007a34:	08007bc7 	.word	0x08007bc7
 8007a38:	08007bc7 	.word	0x08007bc7
 8007a3c:	08007b85 	.word	0x08007b85
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	68b9      	ldr	r1, [r7, #8]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f000 fa92 	bl	8007f70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	699a      	ldr	r2, [r3, #24]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	f042 0208 	orr.w	r2, r2, #8
 8007a5a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	699a      	ldr	r2, [r3, #24]
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f022 0204 	bic.w	r2, r2, #4
 8007a6a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	6999      	ldr	r1, [r3, #24]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	619a      	str	r2, [r3, #24]
      break;
 8007a7e:	e0a5      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	68b9      	ldr	r1, [r7, #8]
 8007a86:	4618      	mov	r0, r3
 8007a88:	f000 fb02 	bl	8008090 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	699a      	ldr	r2, [r3, #24]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007a9a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	699a      	ldr	r2, [r3, #24]
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007aaa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6999      	ldr	r1, [r3, #24]
 8007ab2:	68bb      	ldr	r3, [r7, #8]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	021a      	lsls	r2, r3, #8
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	430a      	orrs	r2, r1
 8007abe:	619a      	str	r2, [r3, #24]
      break;
 8007ac0:	e084      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	68b9      	ldr	r1, [r7, #8]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	f000 fb6b 	bl	80081a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	69da      	ldr	r2, [r3, #28]
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0208 	orr.w	r2, r2, #8
 8007adc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	69da      	ldr	r2, [r3, #28]
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f022 0204 	bic.w	r2, r2, #4
 8007aec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	69d9      	ldr	r1, [r3, #28]
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	691a      	ldr	r2, [r3, #16]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	430a      	orrs	r2, r1
 8007afe:	61da      	str	r2, [r3, #28]
      break;
 8007b00:	e064      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68b9      	ldr	r1, [r7, #8]
 8007b08:	4618      	mov	r0, r3
 8007b0a:	f000 fbd3 	bl	80082b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	69da      	ldr	r2, [r3, #28]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	69da      	ldr	r2, [r3, #28]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007b2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	69d9      	ldr	r1, [r3, #28]
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	691b      	ldr	r3, [r3, #16]
 8007b38:	021a      	lsls	r2, r3, #8
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	430a      	orrs	r2, r1
 8007b40:	61da      	str	r2, [r3, #28]
      break;
 8007b42:	e043      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	68b9      	ldr	r1, [r7, #8]
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f000 fc3c 	bl	80083c8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f042 0208 	orr.w	r2, r2, #8
 8007b5e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0204 	bic.w	r2, r2, #4
 8007b6e:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007b76:	68bb      	ldr	r3, [r7, #8]
 8007b78:	691a      	ldr	r2, [r3, #16]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007b82:	e023      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	68b9      	ldr	r1, [r7, #8]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 fc80 	bl	8008490 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007b9e:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007bae:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8007bb6:	68bb      	ldr	r3, [r7, #8]
 8007bb8:	691b      	ldr	r3, [r3, #16]
 8007bba:	021a      	lsls	r2, r3, #8
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	430a      	orrs	r2, r1
 8007bc2:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8007bc4:	e002      	b.n	8007bcc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007bc6:	2301      	movs	r3, #1
 8007bc8:	75fb      	strb	r3, [r7, #23]
      break;
 8007bca:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007bd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop

08007be0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007bea:	2300      	movs	r3, #0
 8007bec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007bf4:	2b01      	cmp	r3, #1
 8007bf6:	d101      	bne.n	8007bfc <HAL_TIM_ConfigClockSource+0x1c>
 8007bf8:	2302      	movs	r3, #2
 8007bfa:	e0de      	b.n	8007dba <HAL_TIM_ConfigClockSource+0x1da>
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	2201      	movs	r2, #1
 8007c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2202      	movs	r2, #2
 8007c08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	689b      	ldr	r3, [r3, #8]
 8007c12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007c1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007c1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007c26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	68ba      	ldr	r2, [r7, #8]
 8007c2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a63      	ldr	r2, [pc, #396]	@ (8007dc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c36:	4293      	cmp	r3, r2
 8007c38:	f000 80a9 	beq.w	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007c3c:	4a61      	ldr	r2, [pc, #388]	@ (8007dc4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007c3e:	4293      	cmp	r3, r2
 8007c40:	f200 80ae 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c44:	4a60      	ldr	r2, [pc, #384]	@ (8007dc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c46:	4293      	cmp	r3, r2
 8007c48:	f000 80a1 	beq.w	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007c4c:	4a5e      	ldr	r2, [pc, #376]	@ (8007dc8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	f200 80a6 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c54:	4a5d      	ldr	r2, [pc, #372]	@ (8007dcc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	f000 8099 	beq.w	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007c5c:	4a5b      	ldr	r2, [pc, #364]	@ (8007dcc <HAL_TIM_ConfigClockSource+0x1ec>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	f200 809e 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c64:	4a5a      	ldr	r2, [pc, #360]	@ (8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	f000 8091 	beq.w	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007c6c:	4a58      	ldr	r2, [pc, #352]	@ (8007dd0 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	f200 8096 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c74:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c78:	f000 8089 	beq.w	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007c7c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007c80:	f200 808e 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c88:	d03e      	beq.n	8007d08 <HAL_TIM_ConfigClockSource+0x128>
 8007c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007c8e:	f200 8087 	bhi.w	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c96:	f000 8086 	beq.w	8007da6 <HAL_TIM_ConfigClockSource+0x1c6>
 8007c9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c9e:	d87f      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ca0:	2b70      	cmp	r3, #112	@ 0x70
 8007ca2:	d01a      	beq.n	8007cda <HAL_TIM_ConfigClockSource+0xfa>
 8007ca4:	2b70      	cmp	r3, #112	@ 0x70
 8007ca6:	d87b      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ca8:	2b60      	cmp	r3, #96	@ 0x60
 8007caa:	d050      	beq.n	8007d4e <HAL_TIM_ConfigClockSource+0x16e>
 8007cac:	2b60      	cmp	r3, #96	@ 0x60
 8007cae:	d877      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cb0:	2b50      	cmp	r3, #80	@ 0x50
 8007cb2:	d03c      	beq.n	8007d2e <HAL_TIM_ConfigClockSource+0x14e>
 8007cb4:	2b50      	cmp	r3, #80	@ 0x50
 8007cb6:	d873      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cb8:	2b40      	cmp	r3, #64	@ 0x40
 8007cba:	d058      	beq.n	8007d6e <HAL_TIM_ConfigClockSource+0x18e>
 8007cbc:	2b40      	cmp	r3, #64	@ 0x40
 8007cbe:	d86f      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cc0:	2b30      	cmp	r3, #48	@ 0x30
 8007cc2:	d064      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007cc4:	2b30      	cmp	r3, #48	@ 0x30
 8007cc6:	d86b      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cc8:	2b20      	cmp	r3, #32
 8007cca:	d060      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007ccc:	2b20      	cmp	r3, #32
 8007cce:	d867      	bhi.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d05c      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007cd4:	2b10      	cmp	r3, #16
 8007cd6:	d05a      	beq.n	8007d8e <HAL_TIM_ConfigClockSource+0x1ae>
 8007cd8:	e062      	b.n	8007da0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007cea:	f000 fcb3 	bl	8008654 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007cfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	68ba      	ldr	r2, [r7, #8]
 8007d04:	609a      	str	r2, [r3, #8]
      break;
 8007d06:	e04f      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007d18:	f000 fc9c 	bl	8008654 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689a      	ldr	r2, [r3, #8]
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007d2a:	609a      	str	r2, [r3, #8]
      break;
 8007d2c:	e03c      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d3a:	461a      	mov	r2, r3
 8007d3c:	f000 fc0e 	bl	800855c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	2150      	movs	r1, #80	@ 0x50
 8007d46:	4618      	mov	r0, r3
 8007d48:	f000 fc67 	bl	800861a <TIM_ITRx_SetConfig>
      break;
 8007d4c:	e02c      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d56:	683b      	ldr	r3, [r7, #0]
 8007d58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007d5a:	461a      	mov	r2, r3
 8007d5c:	f000 fc2d 	bl	80085ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	2160      	movs	r1, #96	@ 0x60
 8007d66:	4618      	mov	r0, r3
 8007d68:	f000 fc57 	bl	800861a <TIM_ITRx_SetConfig>
      break;
 8007d6c:	e01c      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	f000 fbee 	bl	800855c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	2140      	movs	r1, #64	@ 0x40
 8007d86:	4618      	mov	r0, r3
 8007d88:	f000 fc47 	bl	800861a <TIM_ITRx_SetConfig>
      break;
 8007d8c:	e00c      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681a      	ldr	r2, [r3, #0]
 8007d92:	683b      	ldr	r3, [r7, #0]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	4619      	mov	r1, r3
 8007d98:	4610      	mov	r0, r2
 8007d9a:	f000 fc3e 	bl	800861a <TIM_ITRx_SetConfig>
      break;
 8007d9e:	e003      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007da0:	2301      	movs	r3, #1
 8007da2:	73fb      	strb	r3, [r7, #15]
      break;
 8007da4:	e000      	b.n	8007da8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007da6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	2200      	movs	r2, #0
 8007db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3710      	adds	r7, #16
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	00100070 	.word	0x00100070
 8007dc8:	00100040 	.word	0x00100040
 8007dcc:	00100030 	.word	0x00100030
 8007dd0:	00100020 	.word	0x00100020

08007dd4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007e04:	bf00      	nop
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007e10:	b480      	push	{r7}
 8007e12:	b083      	sub	sp, #12
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007e18:	bf00      	nop
 8007e1a:	370c      	adds	r7, #12
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr

08007e24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007e2c:	bf00      	nop
 8007e2e:	370c      	adds	r7, #12
 8007e30:	46bd      	mov	sp, r7
 8007e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e36:	4770      	bx	lr

08007e38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b085      	sub	sp, #20
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a42      	ldr	r2, [pc, #264]	@ (8007f54 <TIM_Base_SetConfig+0x11c>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d00f      	beq.n	8007e70 <TIM_Base_SetConfig+0x38>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e56:	d00b      	beq.n	8007e70 <TIM_Base_SetConfig+0x38>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a3f      	ldr	r2, [pc, #252]	@ (8007f58 <TIM_Base_SetConfig+0x120>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d007      	beq.n	8007e70 <TIM_Base_SetConfig+0x38>
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a3e      	ldr	r2, [pc, #248]	@ (8007f5c <TIM_Base_SetConfig+0x124>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d003      	beq.n	8007e70 <TIM_Base_SetConfig+0x38>
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	4a3d      	ldr	r2, [pc, #244]	@ (8007f60 <TIM_Base_SetConfig+0x128>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d108      	bne.n	8007e82 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e76:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a33      	ldr	r2, [pc, #204]	@ (8007f54 <TIM_Base_SetConfig+0x11c>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d01b      	beq.n	8007ec2 <TIM_Base_SetConfig+0x8a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007e90:	d017      	beq.n	8007ec2 <TIM_Base_SetConfig+0x8a>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a30      	ldr	r2, [pc, #192]	@ (8007f58 <TIM_Base_SetConfig+0x120>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d013      	beq.n	8007ec2 <TIM_Base_SetConfig+0x8a>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a2f      	ldr	r2, [pc, #188]	@ (8007f5c <TIM_Base_SetConfig+0x124>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d00f      	beq.n	8007ec2 <TIM_Base_SetConfig+0x8a>
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a2e      	ldr	r2, [pc, #184]	@ (8007f60 <TIM_Base_SetConfig+0x128>)
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	d00b      	beq.n	8007ec2 <TIM_Base_SetConfig+0x8a>
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	4a2d      	ldr	r2, [pc, #180]	@ (8007f64 <TIM_Base_SetConfig+0x12c>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d007      	beq.n	8007ec2 <TIM_Base_SetConfig+0x8a>
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	4a2c      	ldr	r2, [pc, #176]	@ (8007f68 <TIM_Base_SetConfig+0x130>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d003      	beq.n	8007ec2 <TIM_Base_SetConfig+0x8a>
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a2b      	ldr	r2, [pc, #172]	@ (8007f6c <TIM_Base_SetConfig+0x134>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d108      	bne.n	8007ed4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ec8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	68fa      	ldr	r2, [r7, #12]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	695b      	ldr	r3, [r3, #20]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	68fa      	ldr	r2, [r7, #12]
 8007ee6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	689a      	ldr	r2, [r3, #8]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a16      	ldr	r2, [pc, #88]	@ (8007f54 <TIM_Base_SetConfig+0x11c>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00f      	beq.n	8007f20 <TIM_Base_SetConfig+0xe8>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a17      	ldr	r2, [pc, #92]	@ (8007f60 <TIM_Base_SetConfig+0x128>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d00b      	beq.n	8007f20 <TIM_Base_SetConfig+0xe8>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a16      	ldr	r2, [pc, #88]	@ (8007f64 <TIM_Base_SetConfig+0x12c>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <TIM_Base_SetConfig+0xe8>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a15      	ldr	r2, [pc, #84]	@ (8007f68 <TIM_Base_SetConfig+0x130>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d003      	beq.n	8007f20 <TIM_Base_SetConfig+0xe8>
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	4a14      	ldr	r2, [pc, #80]	@ (8007f6c <TIM_Base_SetConfig+0x134>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d103      	bne.n	8007f28 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	691a      	ldr	r2, [r3, #16]
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	691b      	ldr	r3, [r3, #16]
 8007f32:	f003 0301 	and.w	r3, r3, #1
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d105      	bne.n	8007f46 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	691b      	ldr	r3, [r3, #16]
 8007f3e:	f023 0201 	bic.w	r2, r3, #1
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	611a      	str	r2, [r3, #16]
  }
}
 8007f46:	bf00      	nop
 8007f48:	3714      	adds	r7, #20
 8007f4a:	46bd      	mov	sp, r7
 8007f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f50:	4770      	bx	lr
 8007f52:	bf00      	nop
 8007f54:	40012c00 	.word	0x40012c00
 8007f58:	40000400 	.word	0x40000400
 8007f5c:	40000800 	.word	0x40000800
 8007f60:	40013400 	.word	0x40013400
 8007f64:	40014000 	.word	0x40014000
 8007f68:	40014400 	.word	0x40014400
 8007f6c:	40014800 	.word	0x40014800

08007f70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b087      	sub	sp, #28
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6a1b      	ldr	r3, [r3, #32]
 8007f7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	6a1b      	ldr	r3, [r3, #32]
 8007f84:	f023 0201 	bic.w	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007fa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	f023 0303 	bic.w	r3, r3, #3
 8007faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	68fa      	ldr	r2, [r7, #12]
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	f023 0302 	bic.w	r3, r3, #2
 8007fbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007fbe:	683b      	ldr	r3, [r7, #0]
 8007fc0:	689b      	ldr	r3, [r3, #8]
 8007fc2:	697a      	ldr	r2, [r7, #20]
 8007fc4:	4313      	orrs	r3, r2
 8007fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a2c      	ldr	r2, [pc, #176]	@ (800807c <TIM_OC1_SetConfig+0x10c>)
 8007fcc:	4293      	cmp	r3, r2
 8007fce:	d00f      	beq.n	8007ff0 <TIM_OC1_SetConfig+0x80>
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	4a2b      	ldr	r2, [pc, #172]	@ (8008080 <TIM_OC1_SetConfig+0x110>)
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d00b      	beq.n	8007ff0 <TIM_OC1_SetConfig+0x80>
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a2a      	ldr	r2, [pc, #168]	@ (8008084 <TIM_OC1_SetConfig+0x114>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d007      	beq.n	8007ff0 <TIM_OC1_SetConfig+0x80>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	4a29      	ldr	r2, [pc, #164]	@ (8008088 <TIM_OC1_SetConfig+0x118>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d003      	beq.n	8007ff0 <TIM_OC1_SetConfig+0x80>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a28      	ldr	r2, [pc, #160]	@ (800808c <TIM_OC1_SetConfig+0x11c>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d10c      	bne.n	800800a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	f023 0308 	bic.w	r3, r3, #8
 8007ff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	68db      	ldr	r3, [r3, #12]
 8007ffc:	697a      	ldr	r2, [r7, #20]
 8007ffe:	4313      	orrs	r3, r2
 8008000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	f023 0304 	bic.w	r3, r3, #4
 8008008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	4a1b      	ldr	r2, [pc, #108]	@ (800807c <TIM_OC1_SetConfig+0x10c>)
 800800e:	4293      	cmp	r3, r2
 8008010:	d00f      	beq.n	8008032 <TIM_OC1_SetConfig+0xc2>
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4a1a      	ldr	r2, [pc, #104]	@ (8008080 <TIM_OC1_SetConfig+0x110>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d00b      	beq.n	8008032 <TIM_OC1_SetConfig+0xc2>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4a19      	ldr	r2, [pc, #100]	@ (8008084 <TIM_OC1_SetConfig+0x114>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d007      	beq.n	8008032 <TIM_OC1_SetConfig+0xc2>
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	4a18      	ldr	r2, [pc, #96]	@ (8008088 <TIM_OC1_SetConfig+0x118>)
 8008026:	4293      	cmp	r3, r2
 8008028:	d003      	beq.n	8008032 <TIM_OC1_SetConfig+0xc2>
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	4a17      	ldr	r2, [pc, #92]	@ (800808c <TIM_OC1_SetConfig+0x11c>)
 800802e:	4293      	cmp	r3, r2
 8008030:	d111      	bne.n	8008056 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	695b      	ldr	r3, [r3, #20]
 8008046:	693a      	ldr	r2, [r7, #16]
 8008048:	4313      	orrs	r3, r2
 800804a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	699b      	ldr	r3, [r3, #24]
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	693a      	ldr	r2, [r7, #16]
 800805a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	68fa      	ldr	r2, [r7, #12]
 8008060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	685a      	ldr	r2, [r3, #4]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	697a      	ldr	r2, [r7, #20]
 800806e:	621a      	str	r2, [r3, #32]
}
 8008070:	bf00      	nop
 8008072:	371c      	adds	r7, #28
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr
 800807c:	40012c00 	.word	0x40012c00
 8008080:	40013400 	.word	0x40013400
 8008084:	40014000 	.word	0x40014000
 8008088:	40014400 	.word	0x40014400
 800808c:	40014800 	.word	0x40014800

08008090 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008090:	b480      	push	{r7}
 8008092:	b087      	sub	sp, #28
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a1b      	ldr	r3, [r3, #32]
 800809e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6a1b      	ldr	r3, [r3, #32]
 80080a4:	f023 0210 	bic.w	r2, r3, #16
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	685b      	ldr	r3, [r3, #4]
 80080b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	699b      	ldr	r3, [r3, #24]
 80080b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80080be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80080c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80080ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	68fa      	ldr	r2, [r7, #12]
 80080d4:	4313      	orrs	r3, r2
 80080d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	f023 0320 	bic.w	r3, r3, #32
 80080de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	011b      	lsls	r3, r3, #4
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a28      	ldr	r2, [pc, #160]	@ (8008190 <TIM_OC2_SetConfig+0x100>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d003      	beq.n	80080fc <TIM_OC2_SetConfig+0x6c>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a27      	ldr	r2, [pc, #156]	@ (8008194 <TIM_OC2_SetConfig+0x104>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d10d      	bne.n	8008118 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	4313      	orrs	r3, r2
 800810e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008110:	697b      	ldr	r3, [r7, #20]
 8008112:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a1d      	ldr	r2, [pc, #116]	@ (8008190 <TIM_OC2_SetConfig+0x100>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d00f      	beq.n	8008140 <TIM_OC2_SetConfig+0xb0>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a1c      	ldr	r2, [pc, #112]	@ (8008194 <TIM_OC2_SetConfig+0x104>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d00b      	beq.n	8008140 <TIM_OC2_SetConfig+0xb0>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a1b      	ldr	r2, [pc, #108]	@ (8008198 <TIM_OC2_SetConfig+0x108>)
 800812c:	4293      	cmp	r3, r2
 800812e:	d007      	beq.n	8008140 <TIM_OC2_SetConfig+0xb0>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a1a      	ldr	r2, [pc, #104]	@ (800819c <TIM_OC2_SetConfig+0x10c>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d003      	beq.n	8008140 <TIM_OC2_SetConfig+0xb0>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a19      	ldr	r2, [pc, #100]	@ (80081a0 <TIM_OC2_SetConfig+0x110>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d113      	bne.n	8008168 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008140:	693b      	ldr	r3, [r7, #16]
 8008142:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008146:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800814e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	695b      	ldr	r3, [r3, #20]
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	699b      	ldr	r3, [r3, #24]
 8008160:	009b      	lsls	r3, r3, #2
 8008162:	693a      	ldr	r2, [r7, #16]
 8008164:	4313      	orrs	r3, r2
 8008166:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68fa      	ldr	r2, [r7, #12]
 8008172:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	685a      	ldr	r2, [r3, #4]
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	697a      	ldr	r2, [r7, #20]
 8008180:	621a      	str	r2, [r3, #32]
}
 8008182:	bf00      	nop
 8008184:	371c      	adds	r7, #28
 8008186:	46bd      	mov	sp, r7
 8008188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818c:	4770      	bx	lr
 800818e:	bf00      	nop
 8008190:	40012c00 	.word	0x40012c00
 8008194:	40013400 	.word	0x40013400
 8008198:	40014000 	.word	0x40014000
 800819c:	40014400 	.word	0x40014400
 80081a0:	40014800 	.word	0x40014800

080081a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b087      	sub	sp, #28
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6a1b      	ldr	r3, [r3, #32]
 80081b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6a1b      	ldr	r3, [r3, #32]
 80081b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	685b      	ldr	r3, [r3, #4]
 80081c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80081d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	f023 0303 	bic.w	r3, r3, #3
 80081de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	4313      	orrs	r3, r2
 80081e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80081f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	689b      	ldr	r3, [r3, #8]
 80081f6:	021b      	lsls	r3, r3, #8
 80081f8:	697a      	ldr	r2, [r7, #20]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	4a27      	ldr	r2, [pc, #156]	@ (80082a0 <TIM_OC3_SetConfig+0xfc>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d003      	beq.n	800820e <TIM_OC3_SetConfig+0x6a>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	4a26      	ldr	r2, [pc, #152]	@ (80082a4 <TIM_OC3_SetConfig+0x100>)
 800820a:	4293      	cmp	r3, r2
 800820c:	d10d      	bne.n	800822a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800820e:	697b      	ldr	r3, [r7, #20]
 8008210:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008214:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	68db      	ldr	r3, [r3, #12]
 800821a:	021b      	lsls	r3, r3, #8
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a1c      	ldr	r2, [pc, #112]	@ (80082a0 <TIM_OC3_SetConfig+0xfc>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d00f      	beq.n	8008252 <TIM_OC3_SetConfig+0xae>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a1b      	ldr	r2, [pc, #108]	@ (80082a4 <TIM_OC3_SetConfig+0x100>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d00b      	beq.n	8008252 <TIM_OC3_SetConfig+0xae>
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	4a1a      	ldr	r2, [pc, #104]	@ (80082a8 <TIM_OC3_SetConfig+0x104>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d007      	beq.n	8008252 <TIM_OC3_SetConfig+0xae>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	4a19      	ldr	r2, [pc, #100]	@ (80082ac <TIM_OC3_SetConfig+0x108>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d003      	beq.n	8008252 <TIM_OC3_SetConfig+0xae>
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	4a18      	ldr	r2, [pc, #96]	@ (80082b0 <TIM_OC3_SetConfig+0x10c>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d113      	bne.n	800827a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008252:	693b      	ldr	r3, [r7, #16]
 8008254:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008258:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008260:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008262:	683b      	ldr	r3, [r7, #0]
 8008264:	695b      	ldr	r3, [r3, #20]
 8008266:	011b      	lsls	r3, r3, #4
 8008268:	693a      	ldr	r2, [r7, #16]
 800826a:	4313      	orrs	r3, r2
 800826c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	699b      	ldr	r3, [r3, #24]
 8008272:	011b      	lsls	r3, r3, #4
 8008274:	693a      	ldr	r2, [r7, #16]
 8008276:	4313      	orrs	r3, r2
 8008278:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	693a      	ldr	r2, [r7, #16]
 800827e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	68fa      	ldr	r2, [r7, #12]
 8008284:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	697a      	ldr	r2, [r7, #20]
 8008292:	621a      	str	r2, [r3, #32]
}
 8008294:	bf00      	nop
 8008296:	371c      	adds	r7, #28
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr
 80082a0:	40012c00 	.word	0x40012c00
 80082a4:	40013400 	.word	0x40013400
 80082a8:	40014000 	.word	0x40014000
 80082ac:	40014400 	.word	0x40014400
 80082b0:	40014800 	.word	0x40014800

080082b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b087      	sub	sp, #28
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
 80082bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6a1b      	ldr	r3, [r3, #32]
 80082c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	69db      	ldr	r3, [r3, #28]
 80082da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80082e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80082e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80082ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	021b      	lsls	r3, r3, #8
 80082f6:	68fa      	ldr	r2, [r7, #12]
 80082f8:	4313      	orrs	r3, r2
 80082fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	689b      	ldr	r3, [r3, #8]
 8008308:	031b      	lsls	r3, r3, #12
 800830a:	697a      	ldr	r2, [r7, #20]
 800830c:	4313      	orrs	r3, r2
 800830e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a28      	ldr	r2, [pc, #160]	@ (80083b4 <TIM_OC4_SetConfig+0x100>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_OC4_SetConfig+0x6c>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a27      	ldr	r2, [pc, #156]	@ (80083b8 <TIM_OC4_SetConfig+0x104>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d10d      	bne.n	800833c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008320:	697b      	ldr	r3, [r7, #20]
 8008322:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008326:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	031b      	lsls	r3, r3, #12
 800832e:	697a      	ldr	r2, [r7, #20]
 8008330:	4313      	orrs	r3, r2
 8008332:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800833a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	4a1d      	ldr	r2, [pc, #116]	@ (80083b4 <TIM_OC4_SetConfig+0x100>)
 8008340:	4293      	cmp	r3, r2
 8008342:	d00f      	beq.n	8008364 <TIM_OC4_SetConfig+0xb0>
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	4a1c      	ldr	r2, [pc, #112]	@ (80083b8 <TIM_OC4_SetConfig+0x104>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d00b      	beq.n	8008364 <TIM_OC4_SetConfig+0xb0>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a1b      	ldr	r2, [pc, #108]	@ (80083bc <TIM_OC4_SetConfig+0x108>)
 8008350:	4293      	cmp	r3, r2
 8008352:	d007      	beq.n	8008364 <TIM_OC4_SetConfig+0xb0>
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a1a      	ldr	r2, [pc, #104]	@ (80083c0 <TIM_OC4_SetConfig+0x10c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d003      	beq.n	8008364 <TIM_OC4_SetConfig+0xb0>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	4a19      	ldr	r2, [pc, #100]	@ (80083c4 <TIM_OC4_SetConfig+0x110>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d113      	bne.n	800838c <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008364:	693b      	ldr	r3, [r7, #16]
 8008366:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800836a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008372:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	695b      	ldr	r3, [r3, #20]
 8008378:	019b      	lsls	r3, r3, #6
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	4313      	orrs	r3, r2
 800837e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8008380:	683b      	ldr	r3, [r7, #0]
 8008382:	699b      	ldr	r3, [r3, #24]
 8008384:	019b      	lsls	r3, r3, #6
 8008386:	693a      	ldr	r2, [r7, #16]
 8008388:	4313      	orrs	r3, r2
 800838a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	685a      	ldr	r2, [r3, #4]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	697a      	ldr	r2, [r7, #20]
 80083a4:	621a      	str	r2, [r3, #32]
}
 80083a6:	bf00      	nop
 80083a8:	371c      	adds	r7, #28
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	40012c00 	.word	0x40012c00
 80083b8:	40013400 	.word	0x40013400
 80083bc:	40014000 	.word	0x40014000
 80083c0:	40014400 	.word	0x40014400
 80083c4:	40014800 	.word	0x40014800

080083c8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80083c8:	b480      	push	{r7}
 80083ca:	b087      	sub	sp, #28
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a1b      	ldr	r3, [r3, #32]
 80083dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80083ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80083f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	4313      	orrs	r3, r2
 8008404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008406:	693b      	ldr	r3, [r7, #16]
 8008408:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800840c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800840e:	683b      	ldr	r3, [r7, #0]
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	041b      	lsls	r3, r3, #16
 8008414:	693a      	ldr	r2, [r7, #16]
 8008416:	4313      	orrs	r3, r2
 8008418:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	4a17      	ldr	r2, [pc, #92]	@ (800847c <TIM_OC5_SetConfig+0xb4>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d00f      	beq.n	8008442 <TIM_OC5_SetConfig+0x7a>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a16      	ldr	r2, [pc, #88]	@ (8008480 <TIM_OC5_SetConfig+0xb8>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00b      	beq.n	8008442 <TIM_OC5_SetConfig+0x7a>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	4a15      	ldr	r2, [pc, #84]	@ (8008484 <TIM_OC5_SetConfig+0xbc>)
 800842e:	4293      	cmp	r3, r2
 8008430:	d007      	beq.n	8008442 <TIM_OC5_SetConfig+0x7a>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a14      	ldr	r2, [pc, #80]	@ (8008488 <TIM_OC5_SetConfig+0xc0>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d003      	beq.n	8008442 <TIM_OC5_SetConfig+0x7a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a13      	ldr	r2, [pc, #76]	@ (800848c <TIM_OC5_SetConfig+0xc4>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d109      	bne.n	8008456 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008448:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	021b      	lsls	r3, r3, #8
 8008450:	697a      	ldr	r2, [r7, #20]
 8008452:	4313      	orrs	r3, r2
 8008454:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	697a      	ldr	r2, [r7, #20]
 800845a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	68fa      	ldr	r2, [r7, #12]
 8008460:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008462:	683b      	ldr	r3, [r7, #0]
 8008464:	685a      	ldr	r2, [r3, #4]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	693a      	ldr	r2, [r7, #16]
 800846e:	621a      	str	r2, [r3, #32]
}
 8008470:	bf00      	nop
 8008472:	371c      	adds	r7, #28
 8008474:	46bd      	mov	sp, r7
 8008476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800847a:	4770      	bx	lr
 800847c:	40012c00 	.word	0x40012c00
 8008480:	40013400 	.word	0x40013400
 8008484:	40014000 	.word	0x40014000
 8008488:	40014400 	.word	0x40014400
 800848c:	40014800 	.word	0x40014800

08008490 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008490:	b480      	push	{r7}
 8008492:	b087      	sub	sp, #28
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a1b      	ldr	r3, [r3, #32]
 800849e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a1b      	ldr	r3, [r3, #32]
 80084a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	685b      	ldr	r3, [r3, #4]
 80084b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80084b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80084be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80084c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	021b      	lsls	r3, r3, #8
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80084d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	689b      	ldr	r3, [r3, #8]
 80084dc:	051b      	lsls	r3, r3, #20
 80084de:	693a      	ldr	r2, [r7, #16]
 80084e0:	4313      	orrs	r3, r2
 80084e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4a18      	ldr	r2, [pc, #96]	@ (8008548 <TIM_OC6_SetConfig+0xb8>)
 80084e8:	4293      	cmp	r3, r2
 80084ea:	d00f      	beq.n	800850c <TIM_OC6_SetConfig+0x7c>
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	4a17      	ldr	r2, [pc, #92]	@ (800854c <TIM_OC6_SetConfig+0xbc>)
 80084f0:	4293      	cmp	r3, r2
 80084f2:	d00b      	beq.n	800850c <TIM_OC6_SetConfig+0x7c>
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	4a16      	ldr	r2, [pc, #88]	@ (8008550 <TIM_OC6_SetConfig+0xc0>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d007      	beq.n	800850c <TIM_OC6_SetConfig+0x7c>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	4a15      	ldr	r2, [pc, #84]	@ (8008554 <TIM_OC6_SetConfig+0xc4>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d003      	beq.n	800850c <TIM_OC6_SetConfig+0x7c>
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	4a14      	ldr	r2, [pc, #80]	@ (8008558 <TIM_OC6_SetConfig+0xc8>)
 8008508:	4293      	cmp	r3, r2
 800850a:	d109      	bne.n	8008520 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800850c:	697b      	ldr	r3, [r7, #20]
 800850e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008512:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	695b      	ldr	r3, [r3, #20]
 8008518:	029b      	lsls	r3, r3, #10
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	697a      	ldr	r2, [r7, #20]
 8008524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	685a      	ldr	r2, [r3, #4]
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	693a      	ldr	r2, [r7, #16]
 8008538:	621a      	str	r2, [r3, #32]
}
 800853a:	bf00      	nop
 800853c:	371c      	adds	r7, #28
 800853e:	46bd      	mov	sp, r7
 8008540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008544:	4770      	bx	lr
 8008546:	bf00      	nop
 8008548:	40012c00 	.word	0x40012c00
 800854c:	40013400 	.word	0x40013400
 8008550:	40014000 	.word	0x40014000
 8008554:	40014400 	.word	0x40014400
 8008558:	40014800 	.word	0x40014800

0800855c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800855c:	b480      	push	{r7}
 800855e:	b087      	sub	sp, #28
 8008560:	af00      	add	r7, sp, #0
 8008562:	60f8      	str	r0, [r7, #12]
 8008564:	60b9      	str	r1, [r7, #8]
 8008566:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	6a1b      	ldr	r3, [r3, #32]
 800856c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	6a1b      	ldr	r3, [r3, #32]
 8008572:	f023 0201 	bic.w	r2, r3, #1
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	699b      	ldr	r3, [r3, #24]
 800857e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008580:	693b      	ldr	r3, [r7, #16]
 8008582:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008586:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	011b      	lsls	r3, r3, #4
 800858c:	693a      	ldr	r2, [r7, #16]
 800858e:	4313      	orrs	r3, r2
 8008590:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	f023 030a 	bic.w	r3, r3, #10
 8008598:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	4313      	orrs	r3, r2
 80085a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	621a      	str	r2, [r3, #32]
}
 80085ae:	bf00      	nop
 80085b0:	371c      	adds	r7, #28
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085ba:	b480      	push	{r7}
 80085bc:	b087      	sub	sp, #28
 80085be:	af00      	add	r7, sp, #0
 80085c0:	60f8      	str	r0, [r7, #12]
 80085c2:	60b9      	str	r1, [r7, #8]
 80085c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6a1b      	ldr	r3, [r3, #32]
 80085d0:	f023 0210 	bic.w	r2, r3, #16
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	699b      	ldr	r3, [r3, #24]
 80085dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80085e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	031b      	lsls	r3, r3, #12
 80085ea:	693a      	ldr	r2, [r7, #16]
 80085ec:	4313      	orrs	r3, r2
 80085ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80085f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	011b      	lsls	r3, r3, #4
 80085fc:	697a      	ldr	r2, [r7, #20]
 80085fe:	4313      	orrs	r3, r2
 8008600:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	693a      	ldr	r2, [r7, #16]
 8008606:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	697a      	ldr	r2, [r7, #20]
 800860c:	621a      	str	r2, [r3, #32]
}
 800860e:	bf00      	nop
 8008610:	371c      	adds	r7, #28
 8008612:	46bd      	mov	sp, r7
 8008614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008618:	4770      	bx	lr

0800861a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800861a:	b480      	push	{r7}
 800861c:	b085      	sub	sp, #20
 800861e:	af00      	add	r7, sp, #0
 8008620:	6078      	str	r0, [r7, #4]
 8008622:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8008630:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008634:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008636:	683a      	ldr	r2, [r7, #0]
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	4313      	orrs	r3, r2
 800863c:	f043 0307 	orr.w	r3, r3, #7
 8008640:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	68fa      	ldr	r2, [r7, #12]
 8008646:	609a      	str	r2, [r3, #8]
}
 8008648:	bf00      	nop
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008652:	4770      	bx	lr

08008654 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008654:	b480      	push	{r7}
 8008656:	b087      	sub	sp, #28
 8008658:	af00      	add	r7, sp, #0
 800865a:	60f8      	str	r0, [r7, #12]
 800865c:	60b9      	str	r1, [r7, #8]
 800865e:	607a      	str	r2, [r7, #4]
 8008660:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008668:	697b      	ldr	r3, [r7, #20]
 800866a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800866e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	021a      	lsls	r2, r3, #8
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	431a      	orrs	r2, r3
 8008678:	68bb      	ldr	r3, [r7, #8]
 800867a:	4313      	orrs	r3, r2
 800867c:	697a      	ldr	r2, [r7, #20]
 800867e:	4313      	orrs	r3, r2
 8008680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	697a      	ldr	r2, [r7, #20]
 8008686:	609a      	str	r2, [r3, #8]
}
 8008688:	bf00      	nop
 800868a:	371c      	adds	r7, #28
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008694:	b480      	push	{r7}
 8008696:	b087      	sub	sp, #28
 8008698:	af00      	add	r7, sp, #0
 800869a:	60f8      	str	r0, [r7, #12]
 800869c:	60b9      	str	r1, [r7, #8]
 800869e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086a0:	68bb      	ldr	r3, [r7, #8]
 80086a2:	f003 031f 	and.w	r3, r3, #31
 80086a6:	2201      	movs	r2, #1
 80086a8:	fa02 f303 	lsl.w	r3, r2, r3
 80086ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	6a1a      	ldr	r2, [r3, #32]
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	43db      	mvns	r3, r3
 80086b6:	401a      	ands	r2, r3
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	6a1a      	ldr	r2, [r3, #32]
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f003 031f 	and.w	r3, r3, #31
 80086c6:	6879      	ldr	r1, [r7, #4]
 80086c8:	fa01 f303 	lsl.w	r3, r1, r3
 80086cc:	431a      	orrs	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	621a      	str	r2, [r3, #32]
}
 80086d2:	bf00      	nop
 80086d4:	371c      	adds	r7, #28
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
	...

080086e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80086e0:	b480      	push	{r7}
 80086e2:	b085      	sub	sp, #20
 80086e4:	af00      	add	r7, sp, #0
 80086e6:	6078      	str	r0, [r7, #4]
 80086e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80086f0:	2b01      	cmp	r3, #1
 80086f2:	d101      	bne.n	80086f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80086f4:	2302      	movs	r3, #2
 80086f6:	e065      	b.n	80087c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2202      	movs	r2, #2
 8008704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	689b      	ldr	r3, [r3, #8]
 8008716:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4a2c      	ldr	r2, [pc, #176]	@ (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800871e:	4293      	cmp	r3, r2
 8008720:	d004      	beq.n	800872c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	4a2b      	ldr	r2, [pc, #172]	@ (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008728:	4293      	cmp	r3, r2
 800872a:	d108      	bne.n	800873e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008732:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4313      	orrs	r3, r2
 800873c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008744:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008748:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	4313      	orrs	r3, r2
 8008752:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a1b      	ldr	r2, [pc, #108]	@ (80087d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d018      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800876e:	d013      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a18      	ldr	r2, [pc, #96]	@ (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00e      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a17      	ldr	r2, [pc, #92]	@ (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d009      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a12      	ldr	r2, [pc, #72]	@ (80087d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d004      	beq.n	8008798 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a13      	ldr	r2, [pc, #76]	@ (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d10c      	bne.n	80087b2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800879e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087a0:	683b      	ldr	r3, [r7, #0]
 80087a2:	689b      	ldr	r3, [r3, #8]
 80087a4:	68ba      	ldr	r2, [r7, #8]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	68ba      	ldr	r2, [r7, #8]
 80087b0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2201      	movs	r2, #1
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	40012c00 	.word	0x40012c00
 80087d4:	40013400 	.word	0x40013400
 80087d8:	40000400 	.word	0x40000400
 80087dc:	40000800 	.word	0x40000800
 80087e0:	40014000 	.word	0x40014000

080087e4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b083      	sub	sp, #12
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087ec:	bf00      	nop
 80087ee:	370c      	adds	r7, #12
 80087f0:	46bd      	mov	sp, r7
 80087f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f6:	4770      	bx	lr

080087f8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80087f8:	b480      	push	{r7}
 80087fa:	b083      	sub	sp, #12
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008800:	bf00      	nop
 8008802:	370c      	adds	r7, #12
 8008804:	46bd      	mov	sp, r7
 8008806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880a:	4770      	bx	lr

0800880c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800880c:	b480      	push	{r7}
 800880e:	b083      	sub	sp, #12
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008814:	bf00      	nop
 8008816:	370c      	adds	r7, #12
 8008818:	46bd      	mov	sp, r7
 800881a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881e:	4770      	bx	lr

08008820 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008820:	b480      	push	{r7}
 8008822:	b083      	sub	sp, #12
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800887e:	2301      	movs	r3, #1
 8008880:	e042      	b.n	8008908 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008888:	2b00      	cmp	r3, #0
 800888a:	d106      	bne.n	800889a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f7fa fa89 	bl	8002dac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2224      	movs	r2, #36	@ 0x24
 800889e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	681a      	ldr	r2, [r3, #0]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	f022 0201 	bic.w	r2, r2, #1
 80088b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d002      	beq.n	80088c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80088ba:	6878      	ldr	r0, [r7, #4]
 80088bc:	f000 ffba 	bl	8009834 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fceb 	bl	800929c <UART_SetConfig>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d101      	bne.n	80088d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	e01b      	b.n	8008908 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	685a      	ldr	r2, [r3, #4]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80088de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	689a      	ldr	r2, [r3, #8]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80088ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	681a      	ldr	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f042 0201 	orr.w	r2, r2, #1
 80088fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008900:	6878      	ldr	r0, [r7, #4]
 8008902:	f001 f839 	bl	8009978 <UART_CheckIdleState>
 8008906:	4603      	mov	r3, r0
}
 8008908:	4618      	mov	r0, r3
 800890a:	3708      	adds	r7, #8
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b08a      	sub	sp, #40	@ 0x28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	60b9      	str	r1, [r7, #8]
 800891a:	4613      	mov	r3, r2
 800891c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008924:	2b20      	cmp	r3, #32
 8008926:	d137      	bne.n	8008998 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d002      	beq.n	8008934 <HAL_UART_Receive_DMA+0x24>
 800892e:	88fb      	ldrh	r3, [r7, #6]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008934:	2301      	movs	r3, #1
 8008936:	e030      	b.n	800899a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a18      	ldr	r2, [pc, #96]	@ (80089a4 <HAL_UART_Receive_DMA+0x94>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d01f      	beq.n	8008988 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	685b      	ldr	r3, [r3, #4]
 800894e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008952:	2b00      	cmp	r3, #0
 8008954:	d018      	beq.n	8008988 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	e853 3f00 	ldrex	r3, [r3]
 8008962:	613b      	str	r3, [r7, #16]
   return(result);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800896a:	627b      	str	r3, [r7, #36]	@ 0x24
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	461a      	mov	r2, r3
 8008972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008974:	623b      	str	r3, [r7, #32]
 8008976:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008978:	69f9      	ldr	r1, [r7, #28]
 800897a:	6a3a      	ldr	r2, [r7, #32]
 800897c:	e841 2300 	strex	r3, r2, [r1]
 8008980:	61bb      	str	r3, [r7, #24]
   return(result);
 8008982:	69bb      	ldr	r3, [r7, #24]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d1e6      	bne.n	8008956 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008988:	88fb      	ldrh	r3, [r7, #6]
 800898a:	461a      	mov	r2, r3
 800898c:	68b9      	ldr	r1, [r7, #8]
 800898e:	68f8      	ldr	r0, [r7, #12]
 8008990:	f001 f90a 	bl	8009ba8 <UART_Start_Receive_DMA>
 8008994:	4603      	mov	r3, r0
 8008996:	e000      	b.n	800899a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008998:	2302      	movs	r3, #2
  }
}
 800899a:	4618      	mov	r0, r3
 800899c:	3728      	adds	r7, #40	@ 0x28
 800899e:	46bd      	mov	sp, r7
 80089a0:	bd80      	pop	{r7, pc}
 80089a2:	bf00      	nop
 80089a4:	40008000 	.word	0x40008000

080089a8 <HAL_UART_Abort>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort(UART_HandleTypeDef *huart)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b0a0      	sub	sp, #128	@ 0x80
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  /* Disable TXE, TC, RXNE, PE, RXFT, TXFT and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80089b8:	e853 3f00 	ldrex	r3, [r3]
 80089bc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80089be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80089c0:	f423 73f0 	bic.w	r3, r3, #480	@ 0x1e0
 80089c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	461a      	mov	r2, r3
 80089cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80089ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80089d0:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80089d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80089d6:	e841 2300 	strex	r3, r2, [r1]
 80089da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80089dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d1e6      	bne.n	80089b0 <HAL_UART_Abort+0x8>
                                          USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE | USART_CR3_TXFTIE);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	3308      	adds	r3, #8
 80089e8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80089ec:	e853 3f00 	ldrex	r3, [r3]
 80089f0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80089f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80089f4:	f023 5384 	bic.w	r3, r3, #276824064	@ 0x10800000
 80089f8:	f023 0301 	bic.w	r3, r3, #1
 80089fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	3308      	adds	r3, #8
 8008a04:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008a06:	657a      	str	r2, [r7, #84]	@ 0x54
 8008a08:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a0a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008a0c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008a0e:	e841 2300 	strex	r3, r2, [r1]
 8008a12:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d1e3      	bne.n	80089e2 <HAL_UART_Abort+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d118      	bne.n	8008a54 <HAL_UART_Abort+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a2a:	e853 3f00 	ldrex	r3, [r3]
 8008a2e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a32:	f023 0310 	bic.w	r3, r3, #16
 8008a36:	677b      	str	r3, [r7, #116]	@ 0x74
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a40:	643b      	str	r3, [r7, #64]	@ 0x40
 8008a42:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a44:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008a46:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008a48:	e841 2300 	strex	r3, r2, [r1]
 8008a4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d1e6      	bne.n	8008a22 <HAL_UART_Abort+0x7a>
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	689b      	ldr	r3, [r3, #8]
 8008a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5e:	2b80      	cmp	r3, #128	@ 0x80
 8008a60:	d137      	bne.n	8008ad2 <HAL_UART_Abort+0x12a>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	3308      	adds	r3, #8
 8008a68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a6a:	6a3b      	ldr	r3, [r7, #32]
 8008a6c:	e853 3f00 	ldrex	r3, [r3]
 8008a70:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a78:	673b      	str	r3, [r7, #112]	@ 0x70
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	3308      	adds	r3, #8
 8008a80:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8008a82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008a84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a8a:	e841 2300 	strex	r3, r2, [r1]
 8008a8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d1e5      	bne.n	8008a62 <HAL_UART_Abort+0xba>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d019      	beq.n	8008ad2 <HAL_UART_Abort+0x12a>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aa2:	2200      	movs	r2, #0
 8008aa4:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aaa:	4618      	mov	r0, r3
 8008aac:	f7fc f8f9 	bl	8004ca2 <HAL_DMA_Abort>
 8008ab0:	4603      	mov	r3, r0
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d00d      	beq.n	8008ad2 <HAL_UART_Abort+0x12a>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fc fa60 	bl	8004f80 <HAL_DMA_GetError>
 8008ac0:	4603      	mov	r3, r0
 8008ac2:	2b20      	cmp	r3, #32
 8008ac4:	d105      	bne.n	8008ad2 <HAL_UART_Abort+0x12a>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	2210      	movs	r2, #16
 8008aca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e073      	b.n	8008bba <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	689b      	ldr	r3, [r3, #8]
 8008ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008adc:	2b40      	cmp	r3, #64	@ 0x40
 8008ade:	d13b      	bne.n	8008b58 <HAL_UART_Abort+0x1b0>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3308      	adds	r3, #8
 8008ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008af6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008b00:	61ba      	str	r2, [r7, #24]
 8008b02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6979      	ldr	r1, [r7, #20]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e5      	bne.n	8008ae0 <HAL_UART_Abort+0x138>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d01c      	beq.n	8008b58 <HAL_UART_Abort+0x1b0>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b24:	2200      	movs	r2, #0
 8008b26:	639a      	str	r2, [r3, #56]	@ 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fc f8b7 	bl	8004ca2 <HAL_DMA_Abort>
 8008b34:	4603      	mov	r3, r0
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00e      	beq.n	8008b58 <HAL_UART_Abort+0x1b0>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fc fa1d 	bl	8004f80 <HAL_DMA_GetError>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b20      	cmp	r3, #32
 8008b4a:	d105      	bne.n	8008b58 <HAL_UART_Abort+0x1b0>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	2210      	movs	r2, #16
 8008b50:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8008b54:	2303      	movs	r3, #3
 8008b56:	e030      	b.n	8008bba <HAL_UART_Abort+0x212>
      }
    }
  }

  /* Reset Tx and Rx transfer counters */
  huart->TxXferCount = 0U;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
  huart->RxXferCount = 0U;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2200      	movs	r2, #0
 8008b64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	220f      	movs	r2, #15
 8008b6e:	621a      	str	r2, [r3, #32]

  /* Flush the whole TX FIFO (if needed) */
  if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008b74:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008b78:	d107      	bne.n	8008b8a <HAL_UART_Abort+0x1e2>
  {
    __HAL_UART_SEND_REQ(huart, UART_TXDATA_FLUSH_REQUEST);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	699a      	ldr	r2, [r3, #24]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f042 0210 	orr.w	r2, r2, #16
 8008b88:	619a      	str	r2, [r3, #24]
  }

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	699a      	ldr	r2, [r3, #24]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f042 0208 	orr.w	r2, r2, #8
 8008b98:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2220      	movs	r2, #32
 8008ba6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	66da      	str	r2, [r3, #108]	@ 0x6c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8008bb8:	2300      	movs	r3, #0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3780      	adds	r7, #128	@ 0x80
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b0ba      	sub	sp, #232	@ 0xe8
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	689b      	ldr	r3, [r3, #8]
 8008be6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008bea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8008bee:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008bf8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d11b      	bne.n	8008c38 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008c00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c04:	f003 0320 	and.w	r3, r3, #32
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d015      	beq.n	8008c38 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008c0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c10:	f003 0320 	and.w	r3, r3, #32
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d105      	bne.n	8008c24 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008c18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c1c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d009      	beq.n	8008c38 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	f000 8300 	beq.w	800922e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	4798      	blx	r3
      }
      return;
 8008c36:	e2fa      	b.n	800922e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008c38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f000 8123 	beq.w	8008e88 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008c42:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008c46:	4b8d      	ldr	r3, [pc, #564]	@ (8008e7c <HAL_UART_IRQHandler+0x2b8>)
 8008c48:	4013      	ands	r3, r2
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d106      	bne.n	8008c5c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8008c4e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008c52:	4b8b      	ldr	r3, [pc, #556]	@ (8008e80 <HAL_UART_IRQHandler+0x2bc>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f000 8116 	beq.w	8008e88 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d011      	beq.n	8008c8c <HAL_UART_IRQHandler+0xc8>
 8008c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008c6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d00b      	beq.n	8008c8c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	2201      	movs	r2, #1
 8008c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008c82:	f043 0201 	orr.w	r2, r3, #1
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c90:	f003 0302 	and.w	r3, r3, #2
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d011      	beq.n	8008cbc <HAL_UART_IRQHandler+0xf8>
 8008c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c9c:	f003 0301 	and.w	r3, r3, #1
 8008ca0:	2b00      	cmp	r3, #0
 8008ca2:	d00b      	beq.n	8008cbc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	2202      	movs	r2, #2
 8008caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cb2:	f043 0204 	orr.w	r2, r3, #4
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cc0:	f003 0304 	and.w	r3, r3, #4
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d011      	beq.n	8008cec <HAL_UART_IRQHandler+0x128>
 8008cc8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008ccc:	f003 0301 	and.w	r3, r3, #1
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d00b      	beq.n	8008cec <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	2204      	movs	r2, #4
 8008cda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008ce2:	f043 0202 	orr.w	r2, r3, #2
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf0:	f003 0308 	and.w	r3, r3, #8
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d017      	beq.n	8008d28 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008cfc:	f003 0320 	and.w	r3, r3, #32
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d105      	bne.n	8008d10 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008d04:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008d08:	4b5c      	ldr	r3, [pc, #368]	@ (8008e7c <HAL_UART_IRQHandler+0x2b8>)
 8008d0a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	d00b      	beq.n	8008d28 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	2208      	movs	r2, #8
 8008d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d1e:	f043 0208 	orr.w	r2, r3, #8
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d012      	beq.n	8008d5a <HAL_UART_IRQHandler+0x196>
 8008d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d38:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d00c      	beq.n	8008d5a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d50:	f043 0220 	orr.w	r2, r3, #32
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	f000 8266 	beq.w	8009232 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d6a:	f003 0320 	and.w	r3, r3, #32
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d013      	beq.n	8008d9a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d76:	f003 0320 	and.w	r3, r3, #32
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d105      	bne.n	8008d8a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d007      	beq.n	8008d9a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d003      	beq.n	8008d9a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008da0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dae:	2b40      	cmp	r3, #64	@ 0x40
 8008db0:	d005      	beq.n	8008dbe <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008db6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d054      	beq.n	8008e68 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 ffd9 	bl	8009d76 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008dce:	2b40      	cmp	r3, #64	@ 0x40
 8008dd0:	d146      	bne.n	8008e60 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	3308      	adds	r3, #8
 8008dd8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008de0:	e853 3f00 	ldrex	r3, [r3]
 8008de4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008de8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008dec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008df0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	3308      	adds	r3, #8
 8008dfa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008dfe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e02:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e0a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e0e:	e841 2300 	strex	r3, r2, [r1]
 8008e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d1d9      	bne.n	8008dd2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d017      	beq.n	8008e58 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2e:	4a15      	ldr	r2, [pc, #84]	@ (8008e84 <HAL_UART_IRQHandler+0x2c0>)
 8008e30:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7fb ff8b 	bl	8004d54 <HAL_DMA_Abort_IT>
 8008e3e:	4603      	mov	r3, r0
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d019      	beq.n	8008e78 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e4c:	687a      	ldr	r2, [r7, #4]
 8008e4e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008e52:	4610      	mov	r0, r2
 8008e54:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e56:	e00f      	b.n	8008e78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 fa09 	bl	8009270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e5e:	e00b      	b.n	8008e78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fa05 	bl	8009270 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e66:	e007      	b.n	8008e78 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008e68:	6878      	ldr	r0, [r7, #4]
 8008e6a:	f000 fa01 	bl	8009270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2200      	movs	r2, #0
 8008e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008e76:	e1dc      	b.n	8009232 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e78:	bf00      	nop
    return;
 8008e7a:	e1da      	b.n	8009232 <HAL_UART_IRQHandler+0x66e>
 8008e7c:	10000001 	.word	0x10000001
 8008e80:	04000120 	.word	0x04000120
 8008e84:	0800a02d 	.word	0x0800a02d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008e8c:	2b01      	cmp	r3, #1
 8008e8e:	f040 8170 	bne.w	8009172 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008e96:	f003 0310 	and.w	r3, r3, #16
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	f000 8169 	beq.w	8009172 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ea4:	f003 0310 	and.w	r3, r3, #16
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	f000 8162 	beq.w	8009172 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2210      	movs	r2, #16
 8008eb4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	689b      	ldr	r3, [r3, #8]
 8008ebc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ec0:	2b40      	cmp	r3, #64	@ 0x40
 8008ec2:	f040 80d8 	bne.w	8009076 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	685b      	ldr	r3, [r3, #4]
 8008ed0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008ed4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80af 	beq.w	800903c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008ee4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	f080 80a7 	bcs.w	800903c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008ef4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0320 	and.w	r3, r3, #32
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	f040 8087 	bne.w	800901a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f18:	e853 3f00 	ldrex	r3, [r3]
 8008f1c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f20:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f28:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	461a      	mov	r2, r3
 8008f32:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008f36:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008f3a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008f42:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008f46:	e841 2300 	strex	r3, r2, [r1]
 8008f4a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008f4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d1da      	bne.n	8008f0c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	3308      	adds	r3, #8
 8008f5c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008f60:	e853 3f00 	ldrex	r3, [r3]
 8008f64:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008f66:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008f68:	f023 0301 	bic.w	r3, r3, #1
 8008f6c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	3308      	adds	r3, #8
 8008f76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008f7a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008f7e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f80:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008f82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008f86:	e841 2300 	strex	r3, r2, [r1]
 8008f8a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008f8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d1e1      	bne.n	8008f56 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3308      	adds	r3, #8
 8008f98:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008f9c:	e853 3f00 	ldrex	r3, [r3]
 8008fa0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008fa2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008fa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	3308      	adds	r3, #8
 8008fb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008fb6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008fb8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008fbc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008fbe:	e841 2300 	strex	r3, r2, [r1]
 8008fc2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008fc4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1e3      	bne.n	8008f92 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2220      	movs	r2, #32
 8008fce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe0:	e853 3f00 	ldrex	r3, [r3]
 8008fe4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fe8:	f023 0310 	bic.w	r3, r3, #16
 8008fec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	461a      	mov	r2, r3
 8008ff6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008ffa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008ffc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ffe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009000:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009002:	e841 2300 	strex	r3, r2, [r1]
 8009006:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800900a:	2b00      	cmp	r3, #0
 800900c:	d1e4      	bne.n	8008fd8 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009014:	4618      	mov	r0, r3
 8009016:	f7fb fe44 	bl	8004ca2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2202      	movs	r2, #2
 800901e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800902c:	b29b      	uxth	r3, r3
 800902e:	1ad3      	subs	r3, r2, r3
 8009030:	b29b      	uxth	r3, r3
 8009032:	4619      	mov	r1, r3
 8009034:	6878      	ldr	r0, [r7, #4]
 8009036:	f000 f925 	bl	8009284 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800903a:	e0fc      	b.n	8009236 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009046:	429a      	cmp	r2, r3
 8009048:	f040 80f5 	bne.w	8009236 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	f003 0320 	and.w	r3, r3, #32
 800905a:	2b20      	cmp	r3, #32
 800905c:	f040 80eb 	bne.w	8009236 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2202      	movs	r2, #2
 8009064:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800906c:	4619      	mov	r1, r3
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	f000 f908 	bl	8009284 <HAL_UARTEx_RxEventCallback>
      return;
 8009074:	e0df      	b.n	8009236 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009082:	b29b      	uxth	r3, r3
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009090:	b29b      	uxth	r3, r3
 8009092:	2b00      	cmp	r3, #0
 8009094:	f000 80d1 	beq.w	800923a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8009098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800909c:	2b00      	cmp	r3, #0
 800909e:	f000 80cc 	beq.w	800923a <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090aa:	e853 3f00 	ldrex	r3, [r3]
 80090ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	461a      	mov	r2, r3
 80090c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80090c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80090c6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e4      	bne.n	80090a2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	3308      	adds	r3, #8
 80090de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090e2:	e853 3f00 	ldrex	r3, [r3]
 80090e6:	623b      	str	r3, [r7, #32]
   return(result);
 80090e8:	6a3b      	ldr	r3, [r7, #32]
 80090ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80090ee:	f023 0301 	bic.w	r3, r3, #1
 80090f2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	3308      	adds	r3, #8
 80090fc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009100:	633a      	str	r2, [r7, #48]	@ 0x30
 8009102:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009106:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800910e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e1      	bne.n	80090d8 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	2220      	movs	r2, #32
 8009118:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	2200      	movs	r2, #0
 8009120:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2200      	movs	r2, #0
 8009126:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	681b      	ldr	r3, [r3, #0]
 800912c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	e853 3f00 	ldrex	r3, [r3]
 8009134:	60fb      	str	r3, [r7, #12]
   return(result);
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f023 0310 	bic.w	r3, r3, #16
 800913c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	461a      	mov	r2, r3
 8009146:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800914a:	61fb      	str	r3, [r7, #28]
 800914c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800914e:	69b9      	ldr	r1, [r7, #24]
 8009150:	69fa      	ldr	r2, [r7, #28]
 8009152:	e841 2300 	strex	r3, r2, [r1]
 8009156:	617b      	str	r3, [r7, #20]
   return(result);
 8009158:	697b      	ldr	r3, [r7, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1e4      	bne.n	8009128 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	2202      	movs	r2, #2
 8009162:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009164:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009168:	4619      	mov	r1, r3
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f88a 	bl	8009284 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009170:	e063      	b.n	800923a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009172:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009176:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d00e      	beq.n	800919c <HAL_UART_IRQHandler+0x5d8>
 800917e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009182:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009186:	2b00      	cmp	r3, #0
 8009188:	d008      	beq.n	800919c <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8009192:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009194:	6878      	ldr	r0, [r7, #4]
 8009196:	f000 ff86 	bl	800a0a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800919a:	e051      	b.n	8009240 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800919c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d014      	beq.n	80091d2 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80091a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d105      	bne.n	80091c0 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80091b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80091b8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d008      	beq.n	80091d2 <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d03a      	beq.n	800923e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	4798      	blx	r3
    }
    return;
 80091d0:	e035      	b.n	800923e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80091d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d009      	beq.n	80091f2 <HAL_UART_IRQHandler+0x62e>
 80091de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d003      	beq.n	80091f2 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 ff30 	bl	800a050 <UART_EndTransmit_IT>
    return;
 80091f0:	e026      	b.n	8009240 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80091f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d009      	beq.n	8009212 <HAL_UART_IRQHandler+0x64e>
 80091fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009202:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8009206:	2b00      	cmp	r3, #0
 8009208:	d003      	beq.n	8009212 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f000 ff5f 	bl	800a0ce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009210:	e016      	b.n	8009240 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009216:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800921a:	2b00      	cmp	r3, #0
 800921c:	d010      	beq.n	8009240 <HAL_UART_IRQHandler+0x67c>
 800921e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009222:	2b00      	cmp	r3, #0
 8009224:	da0c      	bge.n	8009240 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 ff47 	bl	800a0ba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800922c:	e008      	b.n	8009240 <HAL_UART_IRQHandler+0x67c>
      return;
 800922e:	bf00      	nop
 8009230:	e006      	b.n	8009240 <HAL_UART_IRQHandler+0x67c>
    return;
 8009232:	bf00      	nop
 8009234:	e004      	b.n	8009240 <HAL_UART_IRQHandler+0x67c>
      return;
 8009236:	bf00      	nop
 8009238:	e002      	b.n	8009240 <HAL_UART_IRQHandler+0x67c>
      return;
 800923a:	bf00      	nop
 800923c:	e000      	b.n	8009240 <HAL_UART_IRQHandler+0x67c>
    return;
 800923e:	bf00      	nop
  }
}
 8009240:	37e8      	adds	r7, #232	@ 0xe8
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}
 8009246:	bf00      	nop

08009248 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009248:	b480      	push	{r7}
 800924a:	b083      	sub	sp, #12
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009250:	bf00      	nop
 8009252:	370c      	adds	r7, #12
 8009254:	46bd      	mov	sp, r7
 8009256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925a:	4770      	bx	lr

0800925c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800925c:	b480      	push	{r7}
 800925e:	b083      	sub	sp, #12
 8009260:	af00      	add	r7, sp, #0
 8009262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8009264:	bf00      	nop
 8009266:	370c      	adds	r7, #12
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009270:	b480      	push	{r7}
 8009272:	b083      	sub	sp, #12
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009278:	bf00      	nop
 800927a:	370c      	adds	r7, #12
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009284:	b480      	push	{r7}
 8009286:	b083      	sub	sp, #12
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009290:	bf00      	nop
 8009292:	370c      	adds	r7, #12
 8009294:	46bd      	mov	sp, r7
 8009296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929a:	4770      	bx	lr

0800929c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800929c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092a0:	b08c      	sub	sp, #48	@ 0x30
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80092a6:	2300      	movs	r3, #0
 80092a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	689a      	ldr	r2, [r3, #8]
 80092b0:	697b      	ldr	r3, [r7, #20]
 80092b2:	691b      	ldr	r3, [r3, #16]
 80092b4:	431a      	orrs	r2, r3
 80092b6:	697b      	ldr	r3, [r7, #20]
 80092b8:	695b      	ldr	r3, [r3, #20]
 80092ba:	431a      	orrs	r2, r3
 80092bc:	697b      	ldr	r3, [r7, #20]
 80092be:	69db      	ldr	r3, [r3, #28]
 80092c0:	4313      	orrs	r3, r2
 80092c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	4bab      	ldr	r3, [pc, #684]	@ (8009578 <UART_SetConfig+0x2dc>)
 80092cc:	4013      	ands	r3, r2
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	6812      	ldr	r2, [r2, #0]
 80092d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092d4:	430b      	orrs	r3, r1
 80092d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	685b      	ldr	r3, [r3, #4]
 80092de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80092e2:	697b      	ldr	r3, [r7, #20]
 80092e4:	68da      	ldr	r2, [r3, #12]
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	699b      	ldr	r3, [r3, #24]
 80092f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4aa0      	ldr	r2, [pc, #640]	@ (800957c <UART_SetConfig+0x2e0>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d004      	beq.n	8009308 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	6a1b      	ldr	r3, [r3, #32]
 8009302:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009304:	4313      	orrs	r3, r2
 8009306:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8009312:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8009316:	697a      	ldr	r2, [r7, #20]
 8009318:	6812      	ldr	r2, [r2, #0]
 800931a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800931c:	430b      	orrs	r3, r1
 800931e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009326:	f023 010f 	bic.w	r1, r3, #15
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	430a      	orrs	r2, r1
 8009334:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a91      	ldr	r2, [pc, #580]	@ (8009580 <UART_SetConfig+0x2e4>)
 800933c:	4293      	cmp	r3, r2
 800933e:	d125      	bne.n	800938c <UART_SetConfig+0xf0>
 8009340:	4b90      	ldr	r3, [pc, #576]	@ (8009584 <UART_SetConfig+0x2e8>)
 8009342:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009346:	f003 0303 	and.w	r3, r3, #3
 800934a:	2b03      	cmp	r3, #3
 800934c:	d81a      	bhi.n	8009384 <UART_SetConfig+0xe8>
 800934e:	a201      	add	r2, pc, #4	@ (adr r2, 8009354 <UART_SetConfig+0xb8>)
 8009350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009354:	08009365 	.word	0x08009365
 8009358:	08009375 	.word	0x08009375
 800935c:	0800936d 	.word	0x0800936d
 8009360:	0800937d 	.word	0x0800937d
 8009364:	2301      	movs	r3, #1
 8009366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800936a:	e0d6      	b.n	800951a <UART_SetConfig+0x27e>
 800936c:	2302      	movs	r3, #2
 800936e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009372:	e0d2      	b.n	800951a <UART_SetConfig+0x27e>
 8009374:	2304      	movs	r3, #4
 8009376:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800937a:	e0ce      	b.n	800951a <UART_SetConfig+0x27e>
 800937c:	2308      	movs	r3, #8
 800937e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009382:	e0ca      	b.n	800951a <UART_SetConfig+0x27e>
 8009384:	2310      	movs	r3, #16
 8009386:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800938a:	e0c6      	b.n	800951a <UART_SetConfig+0x27e>
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a7d      	ldr	r2, [pc, #500]	@ (8009588 <UART_SetConfig+0x2ec>)
 8009392:	4293      	cmp	r3, r2
 8009394:	d138      	bne.n	8009408 <UART_SetConfig+0x16c>
 8009396:	4b7b      	ldr	r3, [pc, #492]	@ (8009584 <UART_SetConfig+0x2e8>)
 8009398:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800939c:	f003 030c 	and.w	r3, r3, #12
 80093a0:	2b0c      	cmp	r3, #12
 80093a2:	d82d      	bhi.n	8009400 <UART_SetConfig+0x164>
 80093a4:	a201      	add	r2, pc, #4	@ (adr r2, 80093ac <UART_SetConfig+0x110>)
 80093a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093aa:	bf00      	nop
 80093ac:	080093e1 	.word	0x080093e1
 80093b0:	08009401 	.word	0x08009401
 80093b4:	08009401 	.word	0x08009401
 80093b8:	08009401 	.word	0x08009401
 80093bc:	080093f1 	.word	0x080093f1
 80093c0:	08009401 	.word	0x08009401
 80093c4:	08009401 	.word	0x08009401
 80093c8:	08009401 	.word	0x08009401
 80093cc:	080093e9 	.word	0x080093e9
 80093d0:	08009401 	.word	0x08009401
 80093d4:	08009401 	.word	0x08009401
 80093d8:	08009401 	.word	0x08009401
 80093dc:	080093f9 	.word	0x080093f9
 80093e0:	2300      	movs	r3, #0
 80093e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093e6:	e098      	b.n	800951a <UART_SetConfig+0x27e>
 80093e8:	2302      	movs	r3, #2
 80093ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093ee:	e094      	b.n	800951a <UART_SetConfig+0x27e>
 80093f0:	2304      	movs	r3, #4
 80093f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093f6:	e090      	b.n	800951a <UART_SetConfig+0x27e>
 80093f8:	2308      	movs	r3, #8
 80093fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80093fe:	e08c      	b.n	800951a <UART_SetConfig+0x27e>
 8009400:	2310      	movs	r3, #16
 8009402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009406:	e088      	b.n	800951a <UART_SetConfig+0x27e>
 8009408:	697b      	ldr	r3, [r7, #20]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a5f      	ldr	r2, [pc, #380]	@ (800958c <UART_SetConfig+0x2f0>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d125      	bne.n	800945e <UART_SetConfig+0x1c2>
 8009412:	4b5c      	ldr	r3, [pc, #368]	@ (8009584 <UART_SetConfig+0x2e8>)
 8009414:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009418:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800941c:	2b30      	cmp	r3, #48	@ 0x30
 800941e:	d016      	beq.n	800944e <UART_SetConfig+0x1b2>
 8009420:	2b30      	cmp	r3, #48	@ 0x30
 8009422:	d818      	bhi.n	8009456 <UART_SetConfig+0x1ba>
 8009424:	2b20      	cmp	r3, #32
 8009426:	d00a      	beq.n	800943e <UART_SetConfig+0x1a2>
 8009428:	2b20      	cmp	r3, #32
 800942a:	d814      	bhi.n	8009456 <UART_SetConfig+0x1ba>
 800942c:	2b00      	cmp	r3, #0
 800942e:	d002      	beq.n	8009436 <UART_SetConfig+0x19a>
 8009430:	2b10      	cmp	r3, #16
 8009432:	d008      	beq.n	8009446 <UART_SetConfig+0x1aa>
 8009434:	e00f      	b.n	8009456 <UART_SetConfig+0x1ba>
 8009436:	2300      	movs	r3, #0
 8009438:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800943c:	e06d      	b.n	800951a <UART_SetConfig+0x27e>
 800943e:	2302      	movs	r3, #2
 8009440:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009444:	e069      	b.n	800951a <UART_SetConfig+0x27e>
 8009446:	2304      	movs	r3, #4
 8009448:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800944c:	e065      	b.n	800951a <UART_SetConfig+0x27e>
 800944e:	2308      	movs	r3, #8
 8009450:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009454:	e061      	b.n	800951a <UART_SetConfig+0x27e>
 8009456:	2310      	movs	r3, #16
 8009458:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800945c:	e05d      	b.n	800951a <UART_SetConfig+0x27e>
 800945e:	697b      	ldr	r3, [r7, #20]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	4a4b      	ldr	r2, [pc, #300]	@ (8009590 <UART_SetConfig+0x2f4>)
 8009464:	4293      	cmp	r3, r2
 8009466:	d125      	bne.n	80094b4 <UART_SetConfig+0x218>
 8009468:	4b46      	ldr	r3, [pc, #280]	@ (8009584 <UART_SetConfig+0x2e8>)
 800946a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800946e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009472:	2bc0      	cmp	r3, #192	@ 0xc0
 8009474:	d016      	beq.n	80094a4 <UART_SetConfig+0x208>
 8009476:	2bc0      	cmp	r3, #192	@ 0xc0
 8009478:	d818      	bhi.n	80094ac <UART_SetConfig+0x210>
 800947a:	2b80      	cmp	r3, #128	@ 0x80
 800947c:	d00a      	beq.n	8009494 <UART_SetConfig+0x1f8>
 800947e:	2b80      	cmp	r3, #128	@ 0x80
 8009480:	d814      	bhi.n	80094ac <UART_SetConfig+0x210>
 8009482:	2b00      	cmp	r3, #0
 8009484:	d002      	beq.n	800948c <UART_SetConfig+0x1f0>
 8009486:	2b40      	cmp	r3, #64	@ 0x40
 8009488:	d008      	beq.n	800949c <UART_SetConfig+0x200>
 800948a:	e00f      	b.n	80094ac <UART_SetConfig+0x210>
 800948c:	2300      	movs	r3, #0
 800948e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009492:	e042      	b.n	800951a <UART_SetConfig+0x27e>
 8009494:	2302      	movs	r3, #2
 8009496:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800949a:	e03e      	b.n	800951a <UART_SetConfig+0x27e>
 800949c:	2304      	movs	r3, #4
 800949e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094a2:	e03a      	b.n	800951a <UART_SetConfig+0x27e>
 80094a4:	2308      	movs	r3, #8
 80094a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094aa:	e036      	b.n	800951a <UART_SetConfig+0x27e>
 80094ac:	2310      	movs	r3, #16
 80094ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094b2:	e032      	b.n	800951a <UART_SetConfig+0x27e>
 80094b4:	697b      	ldr	r3, [r7, #20]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	4a30      	ldr	r2, [pc, #192]	@ (800957c <UART_SetConfig+0x2e0>)
 80094ba:	4293      	cmp	r3, r2
 80094bc:	d12a      	bne.n	8009514 <UART_SetConfig+0x278>
 80094be:	4b31      	ldr	r3, [pc, #196]	@ (8009584 <UART_SetConfig+0x2e8>)
 80094c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80094c4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80094c8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094cc:	d01a      	beq.n	8009504 <UART_SetConfig+0x268>
 80094ce:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094d2:	d81b      	bhi.n	800950c <UART_SetConfig+0x270>
 80094d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094d8:	d00c      	beq.n	80094f4 <UART_SetConfig+0x258>
 80094da:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094de:	d815      	bhi.n	800950c <UART_SetConfig+0x270>
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d003      	beq.n	80094ec <UART_SetConfig+0x250>
 80094e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094e8:	d008      	beq.n	80094fc <UART_SetConfig+0x260>
 80094ea:	e00f      	b.n	800950c <UART_SetConfig+0x270>
 80094ec:	2300      	movs	r3, #0
 80094ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094f2:	e012      	b.n	800951a <UART_SetConfig+0x27e>
 80094f4:	2302      	movs	r3, #2
 80094f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80094fa:	e00e      	b.n	800951a <UART_SetConfig+0x27e>
 80094fc:	2304      	movs	r3, #4
 80094fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009502:	e00a      	b.n	800951a <UART_SetConfig+0x27e>
 8009504:	2308      	movs	r3, #8
 8009506:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800950a:	e006      	b.n	800951a <UART_SetConfig+0x27e>
 800950c:	2310      	movs	r3, #16
 800950e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009512:	e002      	b.n	800951a <UART_SetConfig+0x27e>
 8009514:	2310      	movs	r3, #16
 8009516:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a17      	ldr	r2, [pc, #92]	@ (800957c <UART_SetConfig+0x2e0>)
 8009520:	4293      	cmp	r3, r2
 8009522:	f040 80a8 	bne.w	8009676 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009526:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800952a:	2b08      	cmp	r3, #8
 800952c:	d834      	bhi.n	8009598 <UART_SetConfig+0x2fc>
 800952e:	a201      	add	r2, pc, #4	@ (adr r2, 8009534 <UART_SetConfig+0x298>)
 8009530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009534:	08009559 	.word	0x08009559
 8009538:	08009599 	.word	0x08009599
 800953c:	08009561 	.word	0x08009561
 8009540:	08009599 	.word	0x08009599
 8009544:	08009567 	.word	0x08009567
 8009548:	08009599 	.word	0x08009599
 800954c:	08009599 	.word	0x08009599
 8009550:	08009599 	.word	0x08009599
 8009554:	0800956f 	.word	0x0800956f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009558:	f7fc ff14 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 800955c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800955e:	e021      	b.n	80095a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009560:	4b0c      	ldr	r3, [pc, #48]	@ (8009594 <UART_SetConfig+0x2f8>)
 8009562:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009564:	e01e      	b.n	80095a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009566:	f7fc fea1 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 800956a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800956c:	e01a      	b.n	80095a4 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800956e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009572:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009574:	e016      	b.n	80095a4 <UART_SetConfig+0x308>
 8009576:	bf00      	nop
 8009578:	cfff69f3 	.word	0xcfff69f3
 800957c:	40008000 	.word	0x40008000
 8009580:	40013800 	.word	0x40013800
 8009584:	40021000 	.word	0x40021000
 8009588:	40004400 	.word	0x40004400
 800958c:	40004800 	.word	0x40004800
 8009590:	40004c00 	.word	0x40004c00
 8009594:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8009598:	2300      	movs	r3, #0
 800959a:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800959c:	2301      	movs	r3, #1
 800959e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80095a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80095a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	f000 812a 	beq.w	8009800 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80095ac:	697b      	ldr	r3, [r7, #20]
 80095ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095b0:	4a9e      	ldr	r2, [pc, #632]	@ (800982c <UART_SetConfig+0x590>)
 80095b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095b6:	461a      	mov	r2, r3
 80095b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80095be:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095c0:	697b      	ldr	r3, [r7, #20]
 80095c2:	685a      	ldr	r2, [r3, #4]
 80095c4:	4613      	mov	r3, r2
 80095c6:	005b      	lsls	r3, r3, #1
 80095c8:	4413      	add	r3, r2
 80095ca:	69ba      	ldr	r2, [r7, #24]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d305      	bcc.n	80095dc <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80095d0:	697b      	ldr	r3, [r7, #20]
 80095d2:	685b      	ldr	r3, [r3, #4]
 80095d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80095d6:	69ba      	ldr	r2, [r7, #24]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d903      	bls.n	80095e4 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80095e2:	e10d      	b.n	8009800 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80095e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095e6:	2200      	movs	r2, #0
 80095e8:	60bb      	str	r3, [r7, #8]
 80095ea:	60fa      	str	r2, [r7, #12]
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095f0:	4a8e      	ldr	r2, [pc, #568]	@ (800982c <UART_SetConfig+0x590>)
 80095f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80095f6:	b29b      	uxth	r3, r3
 80095f8:	2200      	movs	r2, #0
 80095fa:	603b      	str	r3, [r7, #0]
 80095fc:	607a      	str	r2, [r7, #4]
 80095fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009602:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009606:	f7f7 fb67 	bl	8000cd8 <__aeabi_uldivmod>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4610      	mov	r0, r2
 8009610:	4619      	mov	r1, r3
 8009612:	f04f 0200 	mov.w	r2, #0
 8009616:	f04f 0300 	mov.w	r3, #0
 800961a:	020b      	lsls	r3, r1, #8
 800961c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009620:	0202      	lsls	r2, r0, #8
 8009622:	6979      	ldr	r1, [r7, #20]
 8009624:	6849      	ldr	r1, [r1, #4]
 8009626:	0849      	lsrs	r1, r1, #1
 8009628:	2000      	movs	r0, #0
 800962a:	460c      	mov	r4, r1
 800962c:	4605      	mov	r5, r0
 800962e:	eb12 0804 	adds.w	r8, r2, r4
 8009632:	eb43 0905 	adc.w	r9, r3, r5
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	685b      	ldr	r3, [r3, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	469a      	mov	sl, r3
 800963e:	4693      	mov	fp, r2
 8009640:	4652      	mov	r2, sl
 8009642:	465b      	mov	r3, fp
 8009644:	4640      	mov	r0, r8
 8009646:	4649      	mov	r1, r9
 8009648:	f7f7 fb46 	bl	8000cd8 <__aeabi_uldivmod>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4613      	mov	r3, r2
 8009652:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009654:	6a3b      	ldr	r3, [r7, #32]
 8009656:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800965a:	d308      	bcc.n	800966e <UART_SetConfig+0x3d2>
 800965c:	6a3b      	ldr	r3, [r7, #32]
 800965e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009662:	d204      	bcs.n	800966e <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	6a3a      	ldr	r2, [r7, #32]
 800966a:	60da      	str	r2, [r3, #12]
 800966c:	e0c8      	b.n	8009800 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 800966e:	2301      	movs	r3, #1
 8009670:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009674:	e0c4      	b.n	8009800 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	69db      	ldr	r3, [r3, #28]
 800967a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800967e:	d167      	bne.n	8009750 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8009680:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009684:	2b08      	cmp	r3, #8
 8009686:	d828      	bhi.n	80096da <UART_SetConfig+0x43e>
 8009688:	a201      	add	r2, pc, #4	@ (adr r2, 8009690 <UART_SetConfig+0x3f4>)
 800968a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800968e:	bf00      	nop
 8009690:	080096b5 	.word	0x080096b5
 8009694:	080096bd 	.word	0x080096bd
 8009698:	080096c5 	.word	0x080096c5
 800969c:	080096db 	.word	0x080096db
 80096a0:	080096cb 	.word	0x080096cb
 80096a4:	080096db 	.word	0x080096db
 80096a8:	080096db 	.word	0x080096db
 80096ac:	080096db 	.word	0x080096db
 80096b0:	080096d3 	.word	0x080096d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80096b4:	f7fc fe66 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 80096b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096ba:	e014      	b.n	80096e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80096bc:	f7fc fe78 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 80096c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096c2:	e010      	b.n	80096e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80096c4:	4b5a      	ldr	r3, [pc, #360]	@ (8009830 <UART_SetConfig+0x594>)
 80096c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096c8:	e00d      	b.n	80096e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80096ca:	f7fc fdef 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 80096ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80096d0:	e009      	b.n	80096e6 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80096d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80096d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80096d8:	e005      	b.n	80096e6 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80096de:	2301      	movs	r3, #1
 80096e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80096e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80096e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 8089 	beq.w	8009800 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f2:	4a4e      	ldr	r2, [pc, #312]	@ (800982c <UART_SetConfig+0x590>)
 80096f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80096f8:	461a      	mov	r2, r3
 80096fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8009700:	005a      	lsls	r2, r3, #1
 8009702:	697b      	ldr	r3, [r7, #20]
 8009704:	685b      	ldr	r3, [r3, #4]
 8009706:	085b      	lsrs	r3, r3, #1
 8009708:	441a      	add	r2, r3
 800970a:	697b      	ldr	r3, [r7, #20]
 800970c:	685b      	ldr	r3, [r3, #4]
 800970e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009712:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009714:	6a3b      	ldr	r3, [r7, #32]
 8009716:	2b0f      	cmp	r3, #15
 8009718:	d916      	bls.n	8009748 <UART_SetConfig+0x4ac>
 800971a:	6a3b      	ldr	r3, [r7, #32]
 800971c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009720:	d212      	bcs.n	8009748 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009722:	6a3b      	ldr	r3, [r7, #32]
 8009724:	b29b      	uxth	r3, r3
 8009726:	f023 030f 	bic.w	r3, r3, #15
 800972a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	085b      	lsrs	r3, r3, #1
 8009730:	b29b      	uxth	r3, r3
 8009732:	f003 0307 	and.w	r3, r3, #7
 8009736:	b29a      	uxth	r2, r3
 8009738:	8bfb      	ldrh	r3, [r7, #30]
 800973a:	4313      	orrs	r3, r2
 800973c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	8bfa      	ldrh	r2, [r7, #30]
 8009744:	60da      	str	r2, [r3, #12]
 8009746:	e05b      	b.n	8009800 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8009748:	2301      	movs	r3, #1
 800974a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800974e:	e057      	b.n	8009800 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009750:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009754:	2b08      	cmp	r3, #8
 8009756:	d828      	bhi.n	80097aa <UART_SetConfig+0x50e>
 8009758:	a201      	add	r2, pc, #4	@ (adr r2, 8009760 <UART_SetConfig+0x4c4>)
 800975a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800975e:	bf00      	nop
 8009760:	08009785 	.word	0x08009785
 8009764:	0800978d 	.word	0x0800978d
 8009768:	08009795 	.word	0x08009795
 800976c:	080097ab 	.word	0x080097ab
 8009770:	0800979b 	.word	0x0800979b
 8009774:	080097ab 	.word	0x080097ab
 8009778:	080097ab 	.word	0x080097ab
 800977c:	080097ab 	.word	0x080097ab
 8009780:	080097a3 	.word	0x080097a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009784:	f7fc fdfe 	bl	8006384 <HAL_RCC_GetPCLK1Freq>
 8009788:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800978a:	e014      	b.n	80097b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800978c:	f7fc fe10 	bl	80063b0 <HAL_RCC_GetPCLK2Freq>
 8009790:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009792:	e010      	b.n	80097b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009794:	4b26      	ldr	r3, [pc, #152]	@ (8009830 <UART_SetConfig+0x594>)
 8009796:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009798:	e00d      	b.n	80097b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800979a:	f7fc fd87 	bl	80062ac <HAL_RCC_GetSysClockFreq>
 800979e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80097a0:	e009      	b.n	80097b6 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80097a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80097a8:	e005      	b.n	80097b6 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80097b4:	bf00      	nop
    }

    if (pclk != 0U)
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d021      	beq.n	8009800 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097c0:	4a1a      	ldr	r2, [pc, #104]	@ (800982c <UART_SetConfig+0x590>)
 80097c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c6:	461a      	mov	r2, r3
 80097c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	085b      	lsrs	r3, r3, #1
 80097d4:	441a      	add	r2, r3
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	fbb2 f3f3 	udiv	r3, r2, r3
 80097de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097e0:	6a3b      	ldr	r3, [r7, #32]
 80097e2:	2b0f      	cmp	r3, #15
 80097e4:	d909      	bls.n	80097fa <UART_SetConfig+0x55e>
 80097e6:	6a3b      	ldr	r3, [r7, #32]
 80097e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80097ec:	d205      	bcs.n	80097fa <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097ee:	6a3b      	ldr	r3, [r7, #32]
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60da      	str	r2, [r3, #12]
 80097f8:	e002      	b.n	8009800 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2201      	movs	r2, #1
 8009804:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2201      	movs	r2, #1
 800980c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2200      	movs	r2, #0
 8009814:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2200      	movs	r2, #0
 800981a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800981c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8009820:	4618      	mov	r0, r3
 8009822:	3730      	adds	r7, #48	@ 0x30
 8009824:	46bd      	mov	sp, r7
 8009826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800982a:	bf00      	nop
 800982c:	080109c8 	.word	0x080109c8
 8009830:	00f42400 	.word	0x00f42400

08009834 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009840:	f003 0308 	and.w	r3, r3, #8
 8009844:	2b00      	cmp	r3, #0
 8009846:	d00a      	beq.n	800985e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	685b      	ldr	r3, [r3, #4]
 800984e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009862:	f003 0301 	and.w	r3, r3, #1
 8009866:	2b00      	cmp	r3, #0
 8009868:	d00a      	beq.n	8009880 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	685b      	ldr	r3, [r3, #4]
 8009870:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	430a      	orrs	r2, r1
 800987e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009884:	f003 0302 	and.w	r3, r3, #2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d00a      	beq.n	80098a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	685b      	ldr	r3, [r3, #4]
 8009892:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	430a      	orrs	r2, r1
 80098a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098a6:	f003 0304 	and.w	r3, r3, #4
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d00a      	beq.n	80098c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685b      	ldr	r3, [r3, #4]
 80098b4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	430a      	orrs	r2, r1
 80098c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c8:	f003 0310 	and.w	r3, r3, #16
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00a      	beq.n	80098e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	689b      	ldr	r3, [r3, #8]
 80098d6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	430a      	orrs	r2, r1
 80098e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ea:	f003 0320 	and.w	r3, r3, #32
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00a      	beq.n	8009908 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	430a      	orrs	r2, r1
 8009906:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800990c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009910:	2b00      	cmp	r3, #0
 8009912:	d01a      	beq.n	800994a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	430a      	orrs	r2, r1
 8009928:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800992e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009932:	d10a      	bne.n	800994a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	430a      	orrs	r2, r1
 8009948:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00a      	beq.n	800996c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	685b      	ldr	r3, [r3, #4]
 800995c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	430a      	orrs	r2, r1
 800996a:	605a      	str	r2, [r3, #4]
  }
}
 800996c:	bf00      	nop
 800996e:	370c      	adds	r7, #12
 8009970:	46bd      	mov	sp, r7
 8009972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009976:	4770      	bx	lr

08009978 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009978:	b580      	push	{r7, lr}
 800997a:	b098      	sub	sp, #96	@ 0x60
 800997c:	af02      	add	r7, sp, #8
 800997e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	2200      	movs	r2, #0
 8009984:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009988:	f7f9 fcec 	bl	8003364 <HAL_GetTick>
 800998c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	f003 0308 	and.w	r3, r3, #8
 8009998:	2b08      	cmp	r3, #8
 800999a:	d12f      	bne.n	80099fc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800999c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80099a0:	9300      	str	r3, [sp, #0]
 80099a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80099a4:	2200      	movs	r2, #0
 80099a6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80099aa:	6878      	ldr	r0, [r7, #4]
 80099ac:	f000 f88e 	bl	8009acc <UART_WaitOnFlagUntilTimeout>
 80099b0:	4603      	mov	r3, r0
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d022      	beq.n	80099fc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80099be:	e853 3f00 	ldrex	r3, [r3]
 80099c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80099c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80099c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80099ca:	653b      	str	r3, [r7, #80]	@ 0x50
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
 80099d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80099d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80099d6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099d8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80099da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80099dc:	e841 2300 	strex	r3, r2, [r1]
 80099e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80099e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d1e6      	bne.n	80099b6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2220      	movs	r2, #32
 80099ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099f8:	2303      	movs	r3, #3
 80099fa:	e063      	b.n	8009ac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f003 0304 	and.w	r3, r3, #4
 8009a06:	2b04      	cmp	r3, #4
 8009a08:	d149      	bne.n	8009a9e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009a0a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009a0e:	9300      	str	r3, [sp, #0]
 8009a10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009a12:	2200      	movs	r2, #0
 8009a14:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	f000 f857 	bl	8009acc <UART_WaitOnFlagUntilTimeout>
 8009a1e:	4603      	mov	r3, r0
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d03c      	beq.n	8009a9e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2c:	e853 3f00 	ldrex	r3, [r3]
 8009a30:	623b      	str	r3, [r7, #32]
   return(result);
 8009a32:	6a3b      	ldr	r3, [r7, #32]
 8009a34:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009a38:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	461a      	mov	r2, r3
 8009a40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a42:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a44:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009a48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a4a:	e841 2300 	strex	r3, r2, [r1]
 8009a4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009a50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d1e6      	bne.n	8009a24 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3308      	adds	r3, #8
 8009a5c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	e853 3f00 	ldrex	r3, [r3]
 8009a64:	60fb      	str	r3, [r7, #12]
   return(result);
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	f023 0301 	bic.w	r3, r3, #1
 8009a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	3308      	adds	r3, #8
 8009a74:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009a76:	61fa      	str	r2, [r7, #28]
 8009a78:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a7a:	69b9      	ldr	r1, [r7, #24]
 8009a7c:	69fa      	ldr	r2, [r7, #28]
 8009a7e:	e841 2300 	strex	r3, r2, [r1]
 8009a82:	617b      	str	r3, [r7, #20]
   return(result);
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d1e5      	bne.n	8009a56 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2220      	movs	r2, #32
 8009a8e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	2200      	movs	r2, #0
 8009a96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	e012      	b.n	8009ac4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	2220      	movs	r2, #32
 8009aa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	2220      	movs	r2, #32
 8009aaa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	2200      	movs	r2, #0
 8009abe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3758      	adds	r7, #88	@ 0x58
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	60f8      	str	r0, [r7, #12]
 8009ad4:	60b9      	str	r1, [r7, #8]
 8009ad6:	603b      	str	r3, [r7, #0]
 8009ad8:	4613      	mov	r3, r2
 8009ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009adc:	e04f      	b.n	8009b7e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009ade:	69bb      	ldr	r3, [r7, #24]
 8009ae0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ae4:	d04b      	beq.n	8009b7e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ae6:	f7f9 fc3d 	bl	8003364 <HAL_GetTick>
 8009aea:	4602      	mov	r2, r0
 8009aec:	683b      	ldr	r3, [r7, #0]
 8009aee:	1ad3      	subs	r3, r2, r3
 8009af0:	69ba      	ldr	r2, [r7, #24]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d302      	bcc.n	8009afc <UART_WaitOnFlagUntilTimeout+0x30>
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d101      	bne.n	8009b00 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009afc:	2303      	movs	r3, #3
 8009afe:	e04e      	b.n	8009b9e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f003 0304 	and.w	r3, r3, #4
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d037      	beq.n	8009b7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	2b80      	cmp	r3, #128	@ 0x80
 8009b12:	d034      	beq.n	8009b7e <UART_WaitOnFlagUntilTimeout+0xb2>
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	2b40      	cmp	r3, #64	@ 0x40
 8009b18:	d031      	beq.n	8009b7e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	69db      	ldr	r3, [r3, #28]
 8009b20:	f003 0308 	and.w	r3, r3, #8
 8009b24:	2b08      	cmp	r3, #8
 8009b26:	d110      	bne.n	8009b4a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2208      	movs	r2, #8
 8009b2e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b30:	68f8      	ldr	r0, [r7, #12]
 8009b32:	f000 f920 	bl	8009d76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2208      	movs	r2, #8
 8009b3a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8009b46:	2301      	movs	r3, #1
 8009b48:	e029      	b.n	8009b9e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	69db      	ldr	r3, [r3, #28]
 8009b50:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009b54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009b58:	d111      	bne.n	8009b7e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009b62:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f000 f906 	bl	8009d76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2220      	movs	r2, #32
 8009b6e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	2200      	movs	r2, #0
 8009b76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	e00f      	b.n	8009b9e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	69da      	ldr	r2, [r3, #28]
 8009b84:	68bb      	ldr	r3, [r7, #8]
 8009b86:	4013      	ands	r3, r2
 8009b88:	68ba      	ldr	r2, [r7, #8]
 8009b8a:	429a      	cmp	r2, r3
 8009b8c:	bf0c      	ite	eq
 8009b8e:	2301      	moveq	r3, #1
 8009b90:	2300      	movne	r3, #0
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	461a      	mov	r2, r3
 8009b96:	79fb      	ldrb	r3, [r7, #7]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d0a0      	beq.n	8009ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b096      	sub	sp, #88	@ 0x58
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	88fa      	ldrh	r2, [r7, #6]
 8009bc0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	2222      	movs	r2, #34	@ 0x22
 8009bd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009bd4:	68fb      	ldr	r3, [r7, #12]
 8009bd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d02d      	beq.n	8009c3a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009be4:	4a40      	ldr	r2, [pc, #256]	@ (8009ce8 <UART_Start_Receive_DMA+0x140>)
 8009be6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bee:	4a3f      	ldr	r2, [pc, #252]	@ (8009cec <UART_Start_Receive_DMA+0x144>)
 8009bf0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009bf8:	4a3d      	ldr	r2, [pc, #244]	@ (8009cf0 <UART_Start_Receive_DMA+0x148>)
 8009bfa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009c02:	2200      	movs	r2, #0
 8009c04:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	3324      	adds	r3, #36	@ 0x24
 8009c12:	4619      	mov	r1, r3
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009c18:	461a      	mov	r2, r3
 8009c1a:	88fb      	ldrh	r3, [r7, #6]
 8009c1c:	f7fa ffc6 	bl	8004bac <HAL_DMA_Start_IT>
 8009c20:	4603      	mov	r3, r0
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d009      	beq.n	8009c3a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2210      	movs	r2, #16
 8009c2a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2220      	movs	r2, #32
 8009c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8009c36:	2301      	movs	r3, #1
 8009c38:	e051      	b.n	8009cde <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	691b      	ldr	r3, [r3, #16]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d018      	beq.n	8009c74 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c4a:	e853 3f00 	ldrex	r3, [r3]
 8009c4e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c56:	657b      	str	r3, [r7, #84]	@ 0x54
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009c60:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c62:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c64:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8009c66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c68:	e841 2300 	strex	r3, r2, [r1]
 8009c6c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009c6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d1e6      	bne.n	8009c42 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	681b      	ldr	r3, [r3, #0]
 8009c78:	3308      	adds	r3, #8
 8009c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7e:	e853 3f00 	ldrex	r3, [r3]
 8009c82:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c86:	f043 0301 	orr.w	r3, r3, #1
 8009c8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	3308      	adds	r3, #8
 8009c92:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009c94:	637a      	str	r2, [r7, #52]	@ 0x34
 8009c96:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c98:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009c9a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009c9c:	e841 2300 	strex	r3, r2, [r1]
 8009ca0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d1e5      	bne.n	8009c74 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	3308      	adds	r3, #8
 8009cae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	e853 3f00 	ldrex	r3, [r3]
 8009cb6:	613b      	str	r3, [r7, #16]
   return(result);
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009cbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009cc0:	68fb      	ldr	r3, [r7, #12]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	3308      	adds	r3, #8
 8009cc6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009cc8:	623a      	str	r2, [r7, #32]
 8009cca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ccc:	69f9      	ldr	r1, [r7, #28]
 8009cce:	6a3a      	ldr	r2, [r7, #32]
 8009cd0:	e841 2300 	strex	r3, r2, [r1]
 8009cd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8009cd6:	69bb      	ldr	r3, [r7, #24]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1e5      	bne.n	8009ca8 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009cdc:	2300      	movs	r3, #0
}
 8009cde:	4618      	mov	r0, r3
 8009ce0:	3758      	adds	r7, #88	@ 0x58
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bd80      	pop	{r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	08009e43 	.word	0x08009e43
 8009cec:	08009f6f 	.word	0x08009f6f
 8009cf0:	08009fad 	.word	0x08009fad

08009cf4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b08f      	sub	sp, #60	@ 0x3c
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d02:	6a3b      	ldr	r3, [r7, #32]
 8009d04:	e853 3f00 	ldrex	r3, [r3]
 8009d08:	61fb      	str	r3, [r7, #28]
   return(result);
 8009d0a:	69fb      	ldr	r3, [r7, #28]
 8009d0c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009d10:	637b      	str	r3, [r7, #52]	@ 0x34
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	461a      	mov	r2, r3
 8009d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009d1c:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d1e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009d20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d22:	e841 2300 	strex	r3, r2, [r1]
 8009d26:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d1e6      	bne.n	8009cfc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	3308      	adds	r3, #8
 8009d34:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	e853 3f00 	ldrex	r3, [r3]
 8009d3c:	60bb      	str	r3, [r7, #8]
   return(result);
 8009d3e:	68bb      	ldr	r3, [r7, #8]
 8009d40:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009d44:	633b      	str	r3, [r7, #48]	@ 0x30
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d4e:	61ba      	str	r2, [r7, #24]
 8009d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d52:	6979      	ldr	r1, [r7, #20]
 8009d54:	69ba      	ldr	r2, [r7, #24]
 8009d56:	e841 2300 	strex	r3, r2, [r1]
 8009d5a:	613b      	str	r3, [r7, #16]
   return(result);
 8009d5c:	693b      	ldr	r3, [r7, #16]
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d1e5      	bne.n	8009d2e <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	2220      	movs	r2, #32
 8009d66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009d6a:	bf00      	nop
 8009d6c:	373c      	adds	r7, #60	@ 0x3c
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr

08009d76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009d76:	b480      	push	{r7}
 8009d78:	b095      	sub	sp, #84	@ 0x54
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d86:	e853 3f00 	ldrex	r3, [r3]
 8009d8a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d8e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	461a      	mov	r2, r3
 8009d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009d9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8009d9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009da2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009da4:	e841 2300 	strex	r3, r2, [r1]
 8009da8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d1e6      	bne.n	8009d7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	3308      	adds	r3, #8
 8009db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009db8:	6a3b      	ldr	r3, [r7, #32]
 8009dba:	e853 3f00 	ldrex	r3, [r3]
 8009dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8009dc0:	69fb      	ldr	r3, [r7, #28]
 8009dc2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009dc6:	f023 0301 	bic.w	r3, r3, #1
 8009dca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009dd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009dd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009dda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ddc:	e841 2300 	strex	r3, r2, [r1]
 8009de0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d1e3      	bne.n	8009db0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009dec:	2b01      	cmp	r3, #1
 8009dee:	d118      	bne.n	8009e22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	f023 0310 	bic.w	r3, r3, #16
 8009e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	461a      	mov	r2, r3
 8009e0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009e0e:	61bb      	str	r3, [r7, #24]
 8009e10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	6979      	ldr	r1, [r7, #20]
 8009e14:	69ba      	ldr	r2, [r7, #24]
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	613b      	str	r3, [r7, #16]
   return(result);
 8009e1c:	693b      	ldr	r3, [r7, #16]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e6      	bne.n	8009df0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009e36:	bf00      	nop
 8009e38:	3754      	adds	r7, #84	@ 0x54
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e40:	4770      	bx	lr

08009e42 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009e42:	b580      	push	{r7, lr}
 8009e44:	b09c      	sub	sp, #112	@ 0x70
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e4e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	f003 0320 	and.w	r3, r3, #32
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d171      	bne.n	8009f42 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e60:	2200      	movs	r2, #0
 8009e62:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009e6e:	e853 3f00 	ldrex	r3, [r3]
 8009e72:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009e74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009e76:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009e7a:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009e7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e7e:	681b      	ldr	r3, [r3, #0]
 8009e80:	461a      	mov	r2, r3
 8009e82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e84:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009e86:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e88:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009e8a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009e8c:	e841 2300 	strex	r3, r2, [r1]
 8009e90:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009e92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d1e6      	bne.n	8009e66 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009e98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ea2:	e853 3f00 	ldrex	r3, [r3]
 8009ea6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009ea8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009eaa:	f023 0301 	bic.w	r3, r3, #1
 8009eae:	667b      	str	r3, [r7, #100]	@ 0x64
 8009eb0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	3308      	adds	r3, #8
 8009eb6:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009eb8:	647a      	str	r2, [r7, #68]	@ 0x44
 8009eba:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ebc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ebe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009ec0:	e841 2300 	strex	r3, r2, [r1]
 8009ec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d1e5      	bne.n	8009e98 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ecc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	3308      	adds	r3, #8
 8009ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ed6:	e853 3f00 	ldrex	r3, [r3]
 8009eda:	623b      	str	r3, [r7, #32]
   return(result);
 8009edc:	6a3b      	ldr	r3, [r7, #32]
 8009ede:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009ee2:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ee4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	3308      	adds	r3, #8
 8009eea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009eec:	633a      	str	r2, [r7, #48]	@ 0x30
 8009eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ef0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ef4:	e841 2300 	strex	r3, r2, [r1]
 8009ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d1e5      	bne.n	8009ecc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009f00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f02:	2220      	movs	r2, #32
 8009f04:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d118      	bne.n	8009f42 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f10:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f16:	693b      	ldr	r3, [r7, #16]
 8009f18:	e853 3f00 	ldrex	r3, [r3]
 8009f1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	f023 0310 	bic.w	r3, r3, #16
 8009f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	461a      	mov	r2, r3
 8009f2c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009f2e:	61fb      	str	r3, [r7, #28]
 8009f30:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f32:	69b9      	ldr	r1, [r7, #24]
 8009f34:	69fa      	ldr	r2, [r7, #28]
 8009f36:	e841 2300 	strex	r3, r2, [r1]
 8009f3a:	617b      	str	r3, [r7, #20]
   return(result);
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d1e6      	bne.n	8009f10 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f44:	2200      	movs	r2, #0
 8009f46:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d107      	bne.n	8009f60 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009f50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009f52:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f56:	4619      	mov	r1, r3
 8009f58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f5a:	f7ff f993 	bl	8009284 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f5e:	e002      	b.n	8009f66 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009f60:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009f62:	f7f9 f871 	bl	8003048 <HAL_UART_RxCpltCallback>
}
 8009f66:	bf00      	nop
 8009f68:	3770      	adds	r7, #112	@ 0x70
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	bd80      	pop	{r7, pc}

08009f6e <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f6e:	b580      	push	{r7, lr}
 8009f70:	b084      	sub	sp, #16
 8009f72:	af00      	add	r7, sp, #0
 8009f74:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009f7a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	2201      	movs	r2, #1
 8009f80:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009f86:	2b01      	cmp	r3, #1
 8009f88:	d109      	bne.n	8009f9e <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009f90:	085b      	lsrs	r3, r3, #1
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	4619      	mov	r1, r3
 8009f96:	68f8      	ldr	r0, [r7, #12]
 8009f98:	f7ff f974 	bl	8009284 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009f9c:	e002      	b.n	8009fa4 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f7ff f95c 	bl	800925c <HAL_UART_RxHalfCpltCallback>
}
 8009fa4:	bf00      	nop
 8009fa6:	3710      	adds	r7, #16
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009fb8:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009fc0:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009fc8:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	689b      	ldr	r3, [r3, #8]
 8009fd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009fd4:	2b80      	cmp	r3, #128	@ 0x80
 8009fd6:	d109      	bne.n	8009fec <UART_DMAError+0x40>
 8009fd8:	693b      	ldr	r3, [r7, #16]
 8009fda:	2b21      	cmp	r3, #33	@ 0x21
 8009fdc:	d106      	bne.n	8009fec <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009fe6:	6978      	ldr	r0, [r7, #20]
 8009fe8:	f7ff fe84 	bl	8009cf4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009fec:	697b      	ldr	r3, [r7, #20]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009ff6:	2b40      	cmp	r3, #64	@ 0x40
 8009ff8:	d109      	bne.n	800a00e <UART_DMAError+0x62>
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2b22      	cmp	r3, #34	@ 0x22
 8009ffe:	d106      	bne.n	800a00e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	2200      	movs	r2, #0
 800a004:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800a008:	6978      	ldr	r0, [r7, #20]
 800a00a:	f7ff feb4 	bl	8009d76 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800a00e:	697b      	ldr	r3, [r7, #20]
 800a010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800a014:	f043 0210 	orr.w	r2, r3, #16
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a01e:	6978      	ldr	r0, [r7, #20]
 800a020:	f7ff f926 	bl	8009270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a024:	bf00      	nop
 800a026:	3718      	adds	r7, #24
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a038:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	2200      	movs	r2, #0
 800a03e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a042:	68f8      	ldr	r0, [r7, #12]
 800a044:	f7ff f914 	bl	8009270 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a048:	bf00      	nop
 800a04a:	3710      	adds	r7, #16
 800a04c:	46bd      	mov	sp, r7
 800a04e:	bd80      	pop	{r7, pc}

0800a050 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a050:	b580      	push	{r7, lr}
 800a052:	b088      	sub	sp, #32
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	e853 3f00 	ldrex	r3, [r3]
 800a064:	60bb      	str	r3, [r7, #8]
   return(result);
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800a06c:	61fb      	str	r3, [r7, #28]
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	461a      	mov	r2, r3
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	61bb      	str	r3, [r7, #24]
 800a078:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a07a:	6979      	ldr	r1, [r7, #20]
 800a07c:	69ba      	ldr	r2, [r7, #24]
 800a07e:	e841 2300 	strex	r3, r2, [r1]
 800a082:	613b      	str	r3, [r7, #16]
   return(result);
 800a084:	693b      	ldr	r3, [r7, #16]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d1e6      	bne.n	800a058 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2220      	movs	r2, #32
 800a08e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	f7ff f8d5 	bl	8009248 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a09e:	bf00      	nop
 800a0a0:	3720      	adds	r7, #32
 800a0a2:	46bd      	mov	sp, r7
 800a0a4:	bd80      	pop	{r7, pc}

0800a0a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800a0a6:	b480      	push	{r7}
 800a0a8:	b083      	sub	sp, #12
 800a0aa:	af00      	add	r7, sp, #0
 800a0ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800a0ae:	bf00      	nop
 800a0b0:	370c      	adds	r7, #12
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b8:	4770      	bx	lr

0800a0ba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800a0ba:	b480      	push	{r7}
 800a0bc:	b083      	sub	sp, #12
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800a0c2:	bf00      	nop
 800a0c4:	370c      	adds	r7, #12
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0cc:	4770      	bx	lr

0800a0ce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800a0ce:	b480      	push	{r7}
 800a0d0:	b083      	sub	sp, #12
 800a0d2:	af00      	add	r7, sp, #0
 800a0d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800a0d6:	bf00      	nop
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b085      	sub	sp, #20
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a0f0:	2b01      	cmp	r3, #1
 800a0f2:	d101      	bne.n	800a0f8 <HAL_UARTEx_DisableFifoMode+0x16>
 800a0f4:	2302      	movs	r3, #2
 800a0f6:	e027      	b.n	800a148 <HAL_UARTEx_DisableFifoMode+0x66>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2201      	movs	r2, #1
 800a0fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a100:	687b      	ldr	r3, [r7, #4]
 800a102:	2224      	movs	r2, #36	@ 0x24
 800a104:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	681a      	ldr	r2, [r3, #0]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 0201 	bic.w	r2, r2, #1
 800a11e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a126:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	2200      	movs	r2, #0
 800a12c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2220      	movs	r2, #32
 800a13a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a146:	2300      	movs	r3, #0
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3714      	adds	r7, #20
 800a14c:	46bd      	mov	sp, r7
 800a14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a152:	4770      	bx	lr

0800a154 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
 800a15c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a164:	2b01      	cmp	r3, #1
 800a166:	d101      	bne.n	800a16c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a168:	2302      	movs	r3, #2
 800a16a:	e02d      	b.n	800a1c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2224      	movs	r2, #36	@ 0x24
 800a178:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f022 0201 	bic.w	r2, r2, #1
 800a192:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	689b      	ldr	r3, [r3, #8]
 800a19a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	683a      	ldr	r2, [r7, #0]
 800a1a4:	430a      	orrs	r2, r1
 800a1a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 f84f 	bl	800a24c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	68fa      	ldr	r2, [r7, #12]
 800a1b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2220      	movs	r2, #32
 800a1ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2200      	movs	r2, #0
 800a1c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a1c6:	2300      	movs	r3, #0
}
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	3710      	adds	r7, #16
 800a1cc:	46bd      	mov	sp, r7
 800a1ce:	bd80      	pop	{r7, pc}

0800a1d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b084      	sub	sp, #16
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a1e0:	2b01      	cmp	r3, #1
 800a1e2:	d101      	bne.n	800a1e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a1e4:	2302      	movs	r3, #2
 800a1e6:	e02d      	b.n	800a244 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2224      	movs	r2, #36	@ 0x24
 800a1f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	681a      	ldr	r2, [r3, #0]
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f022 0201 	bic.w	r2, r2, #1
 800a20e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	683a      	ldr	r2, [r7, #0]
 800a220:	430a      	orrs	r2, r1
 800a222:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a224:	6878      	ldr	r0, [r7, #4]
 800a226:	f000 f811 	bl	800a24c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68fa      	ldr	r2, [r7, #12]
 800a230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2220      	movs	r2, #32
 800a236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3710      	adds	r7, #16
 800a248:	46bd      	mov	sp, r7
 800a24a:	bd80      	pop	{r7, pc}

0800a24c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b085      	sub	sp, #20
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d108      	bne.n	800a26e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	2201      	movs	r2, #1
 800a260:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	2201      	movs	r2, #1
 800a268:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a26c:	e031      	b.n	800a2d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a26e:	2308      	movs	r3, #8
 800a270:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a272:	2308      	movs	r3, #8
 800a274:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	0e5b      	lsrs	r3, r3, #25
 800a27e:	b2db      	uxtb	r3, r3
 800a280:	f003 0307 	and.w	r3, r3, #7
 800a284:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	689b      	ldr	r3, [r3, #8]
 800a28c:	0f5b      	lsrs	r3, r3, #29
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	f003 0307 	and.w	r3, r3, #7
 800a294:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a296:	7bbb      	ldrb	r3, [r7, #14]
 800a298:	7b3a      	ldrb	r2, [r7, #12]
 800a29a:	4911      	ldr	r1, [pc, #68]	@ (800a2e0 <UARTEx_SetNbDataToProcess+0x94>)
 800a29c:	5c8a      	ldrb	r2, [r1, r2]
 800a29e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a2a2:	7b3a      	ldrb	r2, [r7, #12]
 800a2a4:	490f      	ldr	r1, [pc, #60]	@ (800a2e4 <UARTEx_SetNbDataToProcess+0x98>)
 800a2a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a2a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2ac:	b29a      	uxth	r2, r3
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2b4:	7bfb      	ldrb	r3, [r7, #15]
 800a2b6:	7b7a      	ldrb	r2, [r7, #13]
 800a2b8:	4909      	ldr	r1, [pc, #36]	@ (800a2e0 <UARTEx_SetNbDataToProcess+0x94>)
 800a2ba:	5c8a      	ldrb	r2, [r1, r2]
 800a2bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a2c0:	7b7a      	ldrb	r2, [r7, #13]
 800a2c2:	4908      	ldr	r1, [pc, #32]	@ (800a2e4 <UARTEx_SetNbDataToProcess+0x98>)
 800a2c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a2c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800a2ca:	b29a      	uxth	r2, r3
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a2d2:	bf00      	nop
 800a2d4:	3714      	adds	r7, #20
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2dc:	4770      	bx	lr
 800a2de:	bf00      	nop
 800a2e0:	080109e0 	.word	0x080109e0
 800a2e4:	080109e8 	.word	0x080109e8

0800a2e8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800a2e8:	b480      	push	{r7}
 800a2ea:	b085      	sub	sp, #20
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800a2f0:	f64b 7380 	movw	r3, #49024	@ 0xbf80
 800a2f4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	@ 0x40
 800a2fc:	b29a      	uxth	r2, r3
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	b29b      	uxth	r3, r3
 800a302:	43db      	mvns	r3, r3
 800a304:	b29b      	uxth	r3, r3
 800a306:	4013      	ands	r3, r2
 800a308:	b29a      	uxth	r2, r3
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a310:	2300      	movs	r3, #0
}
 800a312:	4618      	mov	r0, r3
 800a314:	3714      	adds	r7, #20
 800a316:	46bd      	mov	sp, r7
 800a318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31c:	4770      	bx	lr

0800a31e <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800a31e:	b480      	push	{r7}
 800a320:	b085      	sub	sp, #20
 800a322:	af00      	add	r7, sp, #0
 800a324:	60f8      	str	r0, [r7, #12]
 800a326:	1d3b      	adds	r3, r7, #4
 800a328:	e883 0006 	stmia.w	r3, {r1, r2}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	2201      	movs	r2, #1
 800a330:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2200      	movs	r2, #0
 800a338:	f8a3 2040 	strh.w	r2, [r3, #64]	@ 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	2200      	movs	r2, #0
 800a340:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	2200      	movs	r2, #0
 800a348:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 800a34c:	2300      	movs	r3, #0
}
 800a34e:	4618      	mov	r0, r3
 800a350:	3714      	adds	r7, #20
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
	...

0800a35c <MX_FATFS_Init>:
  * @brief  FatFs initialization
  * @param  None
  * @retval Initialization result
  */
int32_t MX_FATFS_Init(void)
{
 800a35c:	b580      	push	{r7, lr}
 800a35e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the disk I/O driver(s)  ###########################*/

if (FATFS_LinkDriver(&USER_Driver, USERPath) != 0)
 800a360:	4907      	ldr	r1, [pc, #28]	@ (800a380 <MX_FATFS_Init+0x24>)
 800a362:	4808      	ldr	r0, [pc, #32]	@ (800a384 <MX_FATFS_Init+0x28>)
 800a364:	f001 ff7a 	bl	800c25c <FATFS_LinkDriver>
 800a368:	4603      	mov	r3, r0
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	d002      	beq.n	800a374 <MX_FATFS_Init+0x18>
  /* USER CODE BEGIN FATFS_Init */
  {
    return APP_ERROR;
 800a36e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a372:	e003      	b.n	800a37c <MX_FATFS_Init+0x20>
  }
  else
  {
    Appli_state = APPLICATION_INIT;
 800a374:	4b04      	ldr	r3, [pc, #16]	@ (800a388 <MX_FATFS_Init+0x2c>)
 800a376:	2201      	movs	r2, #1
 800a378:	701a      	strb	r2, [r3, #0]
    return APP_OK;
 800a37a:	2300      	movs	r3, #0
  }
  /* USER CODE END FATFS_Init */
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	bd80      	pop	{r7, pc}
 800a380:	20001218 	.word	0x20001218
 800a384:	20000018 	.word	0x20000018
 800a388:	2000121c 	.word	0x2000121c

0800a38c <get_fattime>:
  * @brief  Gets Time from RTC (generated when FS_NORTC==0; see ff.c)
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a390:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a392:	4618      	mov	r0, r3
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
 800a3a2:	4603      	mov	r3, r0
 800a3a4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 800a3a6:	79fb      	ldrb	r3, [r7, #7]
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	f7f7 fb89 	bl	8001ac0 <SD_disk_initialize>
 800a3ae:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3708      	adds	r7, #8
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b082      	sub	sp, #8
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	4603      	mov	r3, r0
 800a3c0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 800a3c2:	79fb      	ldrb	r3, [r7, #7]
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f7f7 fc65 	bl	8001c94 <SD_disk_status>
 800a3ca:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3708      	adds	r7, #8
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b084      	sub	sp, #16
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	60b9      	str	r1, [r7, #8]
 800a3dc:	607a      	str	r2, [r7, #4]
 800a3de:	603b      	str	r3, [r7, #0]
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 800a3e4:	7bf8      	ldrb	r0, [r7, #15]
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	687a      	ldr	r2, [r7, #4]
 800a3ea:	68b9      	ldr	r1, [r7, #8]
 800a3ec:	f7f7 fc68 	bl	8001cc0 <SD_disk_read>
 800a3f0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3710      	adds	r7, #16
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b084      	sub	sp, #16
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
 800a404:	603b      	str	r3, [r7, #0]
 800a406:	4603      	mov	r3, r0
 800a408:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 800a40a:	7bf8      	ldrb	r0, [r7, #15]
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	687a      	ldr	r2, [r7, #4]
 800a410:	68b9      	ldr	r1, [r7, #8]
 800a412:	f7f7 fcbf 	bl	8001d94 <SD_disk_write>
 800a416:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800a418:	4618      	mov	r0, r3
 800a41a:	3710      	adds	r7, #16
 800a41c:	46bd      	mov	sp, r7
 800a41e:	bd80      	pop	{r7, pc}

0800a420 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a420:	b580      	push	{r7, lr}
 800a422:	b082      	sub	sp, #8
 800a424:	af00      	add	r7, sp, #0
 800a426:	4603      	mov	r3, r0
 800a428:	603a      	str	r2, [r7, #0]
 800a42a:	71fb      	strb	r3, [r7, #7]
 800a42c:	460b      	mov	r3, r1
 800a42e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 800a430:	79b9      	ldrb	r1, [r7, #6]
 800a432:	79fb      	ldrb	r3, [r7, #7]
 800a434:	683a      	ldr	r2, [r7, #0]
 800a436:	4618      	mov	r0, r3
 800a438:	f7f7 fd30 	bl	8001e9c <SD_disk_ioctl>
 800a43c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}
	...

0800a448 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800a448:	b580      	push	{r7, lr}
 800a44a:	b084      	sub	sp, #16
 800a44c:	af00      	add	r7, sp, #0
 800a44e:	4603      	mov	r3, r0
 800a450:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800a452:	79fb      	ldrb	r3, [r7, #7]
 800a454:	4a08      	ldr	r2, [pc, #32]	@ (800a478 <disk_status+0x30>)
 800a456:	009b      	lsls	r3, r3, #2
 800a458:	4413      	add	r3, r2
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	79fa      	ldrb	r2, [r7, #7]
 800a460:	4905      	ldr	r1, [pc, #20]	@ (800a478 <disk_status+0x30>)
 800a462:	440a      	add	r2, r1
 800a464:	7a12      	ldrb	r2, [r2, #8]
 800a466:	4610      	mov	r0, r2
 800a468:	4798      	blx	r3
 800a46a:	4603      	mov	r3, r0
 800a46c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800a46e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a470:	4618      	mov	r0, r3
 800a472:	3710      	adds	r7, #16
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}
 800a478:	20001248 	.word	0x20001248

0800a47c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800a47c:	b580      	push	{r7, lr}
 800a47e:	b084      	sub	sp, #16
 800a480:	af00      	add	r7, sp, #0
 800a482:	4603      	mov	r3, r0
 800a484:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800a486:	2300      	movs	r3, #0
 800a488:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800a48a:	79fb      	ldrb	r3, [r7, #7]
 800a48c:	4a0d      	ldr	r2, [pc, #52]	@ (800a4c4 <disk_initialize+0x48>)
 800a48e:	5cd3      	ldrb	r3, [r2, r3]
 800a490:	2b00      	cmp	r3, #0
 800a492:	d111      	bne.n	800a4b8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800a494:	79fb      	ldrb	r3, [r7, #7]
 800a496:	4a0b      	ldr	r2, [pc, #44]	@ (800a4c4 <disk_initialize+0x48>)
 800a498:	2101      	movs	r1, #1
 800a49a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800a49c:	79fb      	ldrb	r3, [r7, #7]
 800a49e:	4a09      	ldr	r2, [pc, #36]	@ (800a4c4 <disk_initialize+0x48>)
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	79fa      	ldrb	r2, [r7, #7]
 800a4aa:	4906      	ldr	r1, [pc, #24]	@ (800a4c4 <disk_initialize+0x48>)
 800a4ac:	440a      	add	r2, r1
 800a4ae:	7a12      	ldrb	r2, [r2, #8]
 800a4b0:	4610      	mov	r0, r2
 800a4b2:	4798      	blx	r3
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800a4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ba:	4618      	mov	r0, r3
 800a4bc:	3710      	adds	r7, #16
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	bd80      	pop	{r7, pc}
 800a4c2:	bf00      	nop
 800a4c4:	20001248 	.word	0x20001248

0800a4c8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800a4c8:	b590      	push	{r4, r7, lr}
 800a4ca:	b087      	sub	sp, #28
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	60b9      	str	r1, [r7, #8]
 800a4d0:	607a      	str	r2, [r7, #4]
 800a4d2:	603b      	str	r3, [r7, #0]
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800a4d8:	7bfb      	ldrb	r3, [r7, #15]
 800a4da:	4a0a      	ldr	r2, [pc, #40]	@ (800a504 <disk_read+0x3c>)
 800a4dc:	009b      	lsls	r3, r3, #2
 800a4de:	4413      	add	r3, r2
 800a4e0:	685b      	ldr	r3, [r3, #4]
 800a4e2:	689c      	ldr	r4, [r3, #8]
 800a4e4:	7bfb      	ldrb	r3, [r7, #15]
 800a4e6:	4a07      	ldr	r2, [pc, #28]	@ (800a504 <disk_read+0x3c>)
 800a4e8:	4413      	add	r3, r2
 800a4ea:	7a18      	ldrb	r0, [r3, #8]
 800a4ec:	683b      	ldr	r3, [r7, #0]
 800a4ee:	687a      	ldr	r2, [r7, #4]
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	47a0      	blx	r4
 800a4f4:	4603      	mov	r3, r0
 800a4f6:	75fb      	strb	r3, [r7, #23]
  return res;
 800a4f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	371c      	adds	r7, #28
 800a4fe:	46bd      	mov	sp, r7
 800a500:	bd90      	pop	{r4, r7, pc}
 800a502:	bf00      	nop
 800a504:	20001248 	.word	0x20001248

0800a508 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800a508:	b590      	push	{r4, r7, lr}
 800a50a:	b087      	sub	sp, #28
 800a50c:	af00      	add	r7, sp, #0
 800a50e:	60b9      	str	r1, [r7, #8]
 800a510:	607a      	str	r2, [r7, #4]
 800a512:	603b      	str	r3, [r7, #0]
 800a514:	4603      	mov	r3, r0
 800a516:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800a518:	7bfb      	ldrb	r3, [r7, #15]
 800a51a:	4a0a      	ldr	r2, [pc, #40]	@ (800a544 <disk_write+0x3c>)
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	68dc      	ldr	r4, [r3, #12]
 800a524:	7bfb      	ldrb	r3, [r7, #15]
 800a526:	4a07      	ldr	r2, [pc, #28]	@ (800a544 <disk_write+0x3c>)
 800a528:	4413      	add	r3, r2
 800a52a:	7a18      	ldrb	r0, [r3, #8]
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	687a      	ldr	r2, [r7, #4]
 800a530:	68b9      	ldr	r1, [r7, #8]
 800a532:	47a0      	blx	r4
 800a534:	4603      	mov	r3, r0
 800a536:	75fb      	strb	r3, [r7, #23]
  return res;
 800a538:	7dfb      	ldrb	r3, [r7, #23]
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	371c      	adds	r7, #28
 800a53e:	46bd      	mov	sp, r7
 800a540:	bd90      	pop	{r4, r7, pc}
 800a542:	bf00      	nop
 800a544:	20001248 	.word	0x20001248

0800a548 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3301      	adds	r3, #1
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800a558:	89fb      	ldrh	r3, [r7, #14]
 800a55a:	021b      	lsls	r3, r3, #8
 800a55c:	b21a      	sxth	r2, r3
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	781b      	ldrb	r3, [r3, #0]
 800a562:	b21b      	sxth	r3, r3
 800a564:	4313      	orrs	r3, r2
 800a566:	b21b      	sxth	r3, r3
 800a568:	81fb      	strh	r3, [r7, #14]
	return rv;
 800a56a:	89fb      	ldrh	r3, [r7, #14]
}
 800a56c:	4618      	mov	r0, r3
 800a56e:	3714      	adds	r7, #20
 800a570:	46bd      	mov	sp, r7
 800a572:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a576:	4770      	bx	lr

0800a578 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	3303      	adds	r3, #3
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	021b      	lsls	r3, r3, #8
 800a58c:	687a      	ldr	r2, [r7, #4]
 800a58e:	3202      	adds	r2, #2
 800a590:	7812      	ldrb	r2, [r2, #0]
 800a592:	4313      	orrs	r3, r2
 800a594:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	021b      	lsls	r3, r3, #8
 800a59a:	687a      	ldr	r2, [r7, #4]
 800a59c:	3201      	adds	r2, #1
 800a59e:	7812      	ldrb	r2, [r2, #0]
 800a5a0:	4313      	orrs	r3, r2
 800a5a2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	021b      	lsls	r3, r3, #8
 800a5a8:	687a      	ldr	r2, [r7, #4]
 800a5aa:	7812      	ldrb	r2, [r2, #0]
 800a5ac:	4313      	orrs	r3, r2
 800a5ae:	60fb      	str	r3, [r7, #12]
	return rv;
 800a5b0:	68fb      	ldr	r3, [r7, #12]
}
 800a5b2:	4618      	mov	r0, r3
 800a5b4:	3714      	adds	r7, #20
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr

0800a5be <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800a5be:	b480      	push	{r7}
 800a5c0:	b083      	sub	sp, #12
 800a5c2:	af00      	add	r7, sp, #0
 800a5c4:	6078      	str	r0, [r7, #4]
 800a5c6:	460b      	mov	r3, r1
 800a5c8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	1c5a      	adds	r2, r3, #1
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	887a      	ldrh	r2, [r7, #2]
 800a5d2:	b2d2      	uxtb	r2, r2
 800a5d4:	701a      	strb	r2, [r3, #0]
 800a5d6:	887b      	ldrh	r3, [r7, #2]
 800a5d8:	0a1b      	lsrs	r3, r3, #8
 800a5da:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	607a      	str	r2, [r7, #4]
 800a5e2:	887a      	ldrh	r2, [r7, #2]
 800a5e4:	b2d2      	uxtb	r2, r2
 800a5e6:	701a      	strb	r2, [r3, #0]
}
 800a5e8:	bf00      	nop
 800a5ea:	370c      	adds	r7, #12
 800a5ec:	46bd      	mov	sp, r7
 800a5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f2:	4770      	bx	lr

0800a5f4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800a5f4:	b480      	push	{r7}
 800a5f6:	b083      	sub	sp, #12
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
 800a5fc:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	1c5a      	adds	r2, r3, #1
 800a602:	607a      	str	r2, [r7, #4]
 800a604:	683a      	ldr	r2, [r7, #0]
 800a606:	b2d2      	uxtb	r2, r2
 800a608:	701a      	strb	r2, [r3, #0]
 800a60a:	683b      	ldr	r3, [r7, #0]
 800a60c:	0a1b      	lsrs	r3, r3, #8
 800a60e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	1c5a      	adds	r2, r3, #1
 800a614:	607a      	str	r2, [r7, #4]
 800a616:	683a      	ldr	r2, [r7, #0]
 800a618:	b2d2      	uxtb	r2, r2
 800a61a:	701a      	strb	r2, [r3, #0]
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	0a1b      	lsrs	r3, r3, #8
 800a620:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	1c5a      	adds	r2, r3, #1
 800a626:	607a      	str	r2, [r7, #4]
 800a628:	683a      	ldr	r2, [r7, #0]
 800a62a:	b2d2      	uxtb	r2, r2
 800a62c:	701a      	strb	r2, [r3, #0]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	0a1b      	lsrs	r3, r3, #8
 800a632:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	1c5a      	adds	r2, r3, #1
 800a638:	607a      	str	r2, [r7, #4]
 800a63a:	683a      	ldr	r2, [r7, #0]
 800a63c:	b2d2      	uxtb	r2, r2
 800a63e:	701a      	strb	r2, [r3, #0]
}
 800a640:	bf00      	nop
 800a642:	370c      	adds	r7, #12
 800a644:	46bd      	mov	sp, r7
 800a646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64a:	4770      	bx	lr

0800a64c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800a64c:	b480      	push	{r7}
 800a64e:	b087      	sub	sp, #28
 800a650:	af00      	add	r7, sp, #0
 800a652:	60f8      	str	r0, [r7, #12]
 800a654:	60b9      	str	r1, [r7, #8]
 800a656:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d00d      	beq.n	800a682 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800a666:	693a      	ldr	r2, [r7, #16]
 800a668:	1c53      	adds	r3, r2, #1
 800a66a:	613b      	str	r3, [r7, #16]
 800a66c:	697b      	ldr	r3, [r7, #20]
 800a66e:	1c59      	adds	r1, r3, #1
 800a670:	6179      	str	r1, [r7, #20]
 800a672:	7812      	ldrb	r2, [r2, #0]
 800a674:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	3b01      	subs	r3, #1
 800a67a:	607b      	str	r3, [r7, #4]
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d1f1      	bne.n	800a666 <mem_cpy+0x1a>
	}
}
 800a682:	bf00      	nop
 800a684:	371c      	adds	r7, #28
 800a686:	46bd      	mov	sp, r7
 800a688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a68c:	4770      	bx	lr

0800a68e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800a68e:	b480      	push	{r7}
 800a690:	b087      	sub	sp, #28
 800a692:	af00      	add	r7, sp, #0
 800a694:	60f8      	str	r0, [r7, #12]
 800a696:	60b9      	str	r1, [r7, #8]
 800a698:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800a69e:	697b      	ldr	r3, [r7, #20]
 800a6a0:	1c5a      	adds	r2, r3, #1
 800a6a2:	617a      	str	r2, [r7, #20]
 800a6a4:	68ba      	ldr	r2, [r7, #8]
 800a6a6:	b2d2      	uxtb	r2, r2
 800a6a8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	607b      	str	r3, [r7, #4]
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d1f3      	bne.n	800a69e <mem_set+0x10>
}
 800a6b6:	bf00      	nop
 800a6b8:	bf00      	nop
 800a6ba:	371c      	adds	r7, #28
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c2:	4770      	bx	lr

0800a6c4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800a6c4:	b480      	push	{r7}
 800a6c6:	b089      	sub	sp, #36	@ 0x24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	61fb      	str	r3, [r7, #28]
 800a6d4:	68bb      	ldr	r3, [r7, #8]
 800a6d6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800a6d8:	2300      	movs	r3, #0
 800a6da:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800a6dc:	69fb      	ldr	r3, [r7, #28]
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	61fa      	str	r2, [r7, #28]
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	69bb      	ldr	r3, [r7, #24]
 800a6e8:	1c5a      	adds	r2, r3, #1
 800a6ea:	61ba      	str	r2, [r7, #24]
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	1acb      	subs	r3, r1, r3
 800a6f0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	607b      	str	r3, [r7, #4]
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	d002      	beq.n	800a704 <mem_cmp+0x40>
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d0eb      	beq.n	800a6dc <mem_cmp+0x18>

	return r;
 800a704:	697b      	ldr	r3, [r7, #20]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3724      	adds	r7, #36	@ 0x24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a710:	4770      	bx	lr

0800a712 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800a712:	b480      	push	{r7}
 800a714:	b083      	sub	sp, #12
 800a716:	af00      	add	r7, sp, #0
 800a718:	6078      	str	r0, [r7, #4]
 800a71a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800a71c:	e002      	b.n	800a724 <chk_chr+0x12>
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	3301      	adds	r3, #1
 800a722:	607b      	str	r3, [r7, #4]
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d005      	beq.n	800a738 <chk_chr+0x26>
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	461a      	mov	r2, r3
 800a732:	683b      	ldr	r3, [r7, #0]
 800a734:	4293      	cmp	r3, r2
 800a736:	d1f2      	bne.n	800a71e <chk_chr+0xc>
	return *str;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	781b      	ldrb	r3, [r3, #0]
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	370c      	adds	r7, #12
 800a740:	46bd      	mov	sp, r7
 800a742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a746:	4770      	bx	lr

0800a748 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a748:	b480      	push	{r7}
 800a74a:	b085      	sub	sp, #20
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a752:	2300      	movs	r3, #0
 800a754:	60bb      	str	r3, [r7, #8]
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	60fb      	str	r3, [r7, #12]
 800a75a:	e029      	b.n	800a7b0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800a75c:	4a27      	ldr	r2, [pc, #156]	@ (800a7fc <chk_lock+0xb4>)
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	011b      	lsls	r3, r3, #4
 800a762:	4413      	add	r3, r2
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d01d      	beq.n	800a7a6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a76a:	4a24      	ldr	r2, [pc, #144]	@ (800a7fc <chk_lock+0xb4>)
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	4413      	add	r3, r2
 800a772:	681a      	ldr	r2, [r3, #0]
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	429a      	cmp	r2, r3
 800a77a:	d116      	bne.n	800a7aa <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800a77c:	4a1f      	ldr	r2, [pc, #124]	@ (800a7fc <chk_lock+0xb4>)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	4413      	add	r3, r2
 800a784:	3304      	adds	r3, #4
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800a78c:	429a      	cmp	r2, r3
 800a78e:	d10c      	bne.n	800a7aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a790:	4a1a      	ldr	r2, [pc, #104]	@ (800a7fc <chk_lock+0xb4>)
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	011b      	lsls	r3, r3, #4
 800a796:	4413      	add	r3, r2
 800a798:	3308      	adds	r3, #8
 800a79a:	681a      	ldr	r2, [r3, #0]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d102      	bne.n	800a7aa <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800a7a4:	e007      	b.n	800a7b6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	3301      	adds	r3, #1
 800a7ae:	60fb      	str	r3, [r7, #12]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	2b01      	cmp	r3, #1
 800a7b4:	d9d2      	bls.n	800a75c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d109      	bne.n	800a7d0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800a7bc:	68bb      	ldr	r3, [r7, #8]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d102      	bne.n	800a7c8 <chk_lock+0x80>
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	2b02      	cmp	r3, #2
 800a7c6:	d101      	bne.n	800a7cc <chk_lock+0x84>
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	e010      	b.n	800a7ee <chk_lock+0xa6>
 800a7cc:	2312      	movs	r3, #18
 800a7ce:	e00e      	b.n	800a7ee <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d108      	bne.n	800a7e8 <chk_lock+0xa0>
 800a7d6:	4a09      	ldr	r2, [pc, #36]	@ (800a7fc <chk_lock+0xb4>)
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	011b      	lsls	r3, r3, #4
 800a7dc:	4413      	add	r3, r2
 800a7de:	330c      	adds	r3, #12
 800a7e0:	881b      	ldrh	r3, [r3, #0]
 800a7e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a7e6:	d101      	bne.n	800a7ec <chk_lock+0xa4>
 800a7e8:	2310      	movs	r3, #16
 800a7ea:	e000      	b.n	800a7ee <chk_lock+0xa6>
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3714      	adds	r7, #20
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f8:	4770      	bx	lr
 800a7fa:	bf00      	nop
 800a7fc:	20001228 	.word	0x20001228

0800a800 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800a800:	b480      	push	{r7}
 800a802:	b083      	sub	sp, #12
 800a804:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a806:	2300      	movs	r3, #0
 800a808:	607b      	str	r3, [r7, #4]
 800a80a:	e002      	b.n	800a812 <enq_lock+0x12>
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	3301      	adds	r3, #1
 800a810:	607b      	str	r3, [r7, #4]
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b01      	cmp	r3, #1
 800a816:	d806      	bhi.n	800a826 <enq_lock+0x26>
 800a818:	4a09      	ldr	r2, [pc, #36]	@ (800a840 <enq_lock+0x40>)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	011b      	lsls	r3, r3, #4
 800a81e:	4413      	add	r3, r2
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d1f2      	bne.n	800a80c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	2b02      	cmp	r3, #2
 800a82a:	bf14      	ite	ne
 800a82c:	2301      	movne	r3, #1
 800a82e:	2300      	moveq	r3, #0
 800a830:	b2db      	uxtb	r3, r3
}
 800a832:	4618      	mov	r0, r3
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	20001228 	.word	0x20001228

0800a844 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800a844:	b480      	push	{r7}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
 800a84c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a84e:	2300      	movs	r3, #0
 800a850:	60fb      	str	r3, [r7, #12]
 800a852:	e01f      	b.n	800a894 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800a854:	4a41      	ldr	r2, [pc, #260]	@ (800a95c <inc_lock+0x118>)
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	011b      	lsls	r3, r3, #4
 800a85a:	4413      	add	r3, r2
 800a85c:	681a      	ldr	r2, [r3, #0]
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	429a      	cmp	r2, r3
 800a864:	d113      	bne.n	800a88e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800a866:	4a3d      	ldr	r2, [pc, #244]	@ (800a95c <inc_lock+0x118>)
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	011b      	lsls	r3, r3, #4
 800a86c:	4413      	add	r3, r2
 800a86e:	3304      	adds	r3, #4
 800a870:	681a      	ldr	r2, [r3, #0]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800a876:	429a      	cmp	r2, r3
 800a878:	d109      	bne.n	800a88e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800a87a:	4a38      	ldr	r2, [pc, #224]	@ (800a95c <inc_lock+0x118>)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	011b      	lsls	r3, r3, #4
 800a880:	4413      	add	r3, r2
 800a882:	3308      	adds	r3, #8
 800a884:	681a      	ldr	r2, [r3, #0]
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d006      	beq.n	800a89c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	3301      	adds	r3, #1
 800a892:	60fb      	str	r3, [r7, #12]
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	2b01      	cmp	r3, #1
 800a898:	d9dc      	bls.n	800a854 <inc_lock+0x10>
 800a89a:	e000      	b.n	800a89e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800a89c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	2b02      	cmp	r3, #2
 800a8a2:	d132      	bne.n	800a90a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	e002      	b.n	800a8b0 <inc_lock+0x6c>
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	3301      	adds	r3, #1
 800a8ae:	60fb      	str	r3, [r7, #12]
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d806      	bhi.n	800a8c4 <inc_lock+0x80>
 800a8b6:	4a29      	ldr	r2, [pc, #164]	@ (800a95c <inc_lock+0x118>)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	011b      	lsls	r3, r3, #4
 800a8bc:	4413      	add	r3, r2
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d1f2      	bne.n	800a8aa <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d101      	bne.n	800a8ce <inc_lock+0x8a>
 800a8ca:	2300      	movs	r3, #0
 800a8cc:	e040      	b.n	800a950 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	4922      	ldr	r1, [pc, #136]	@ (800a95c <inc_lock+0x118>)
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	011b      	lsls	r3, r3, #4
 800a8d8:	440b      	add	r3, r1
 800a8da:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	689a      	ldr	r2, [r3, #8]
 800a8e0:	491e      	ldr	r1, [pc, #120]	@ (800a95c <inc_lock+0x118>)
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	011b      	lsls	r3, r3, #4
 800a8e6:	440b      	add	r3, r1
 800a8e8:	3304      	adds	r3, #4
 800a8ea:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	695a      	ldr	r2, [r3, #20]
 800a8f0:	491a      	ldr	r1, [pc, #104]	@ (800a95c <inc_lock+0x118>)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	011b      	lsls	r3, r3, #4
 800a8f6:	440b      	add	r3, r1
 800a8f8:	3308      	adds	r3, #8
 800a8fa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800a8fc:	4a17      	ldr	r2, [pc, #92]	@ (800a95c <inc_lock+0x118>)
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	011b      	lsls	r3, r3, #4
 800a902:	4413      	add	r3, r2
 800a904:	330c      	adds	r3, #12
 800a906:	2200      	movs	r2, #0
 800a908:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d009      	beq.n	800a924 <inc_lock+0xe0>
 800a910:	4a12      	ldr	r2, [pc, #72]	@ (800a95c <inc_lock+0x118>)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	011b      	lsls	r3, r3, #4
 800a916:	4413      	add	r3, r2
 800a918:	330c      	adds	r3, #12
 800a91a:	881b      	ldrh	r3, [r3, #0]
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d001      	beq.n	800a924 <inc_lock+0xe0>
 800a920:	2300      	movs	r3, #0
 800a922:	e015      	b.n	800a950 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	2b00      	cmp	r3, #0
 800a928:	d108      	bne.n	800a93c <inc_lock+0xf8>
 800a92a:	4a0c      	ldr	r2, [pc, #48]	@ (800a95c <inc_lock+0x118>)
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	011b      	lsls	r3, r3, #4
 800a930:	4413      	add	r3, r2
 800a932:	330c      	adds	r3, #12
 800a934:	881b      	ldrh	r3, [r3, #0]
 800a936:	3301      	adds	r3, #1
 800a938:	b29a      	uxth	r2, r3
 800a93a:	e001      	b.n	800a940 <inc_lock+0xfc>
 800a93c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a940:	4906      	ldr	r1, [pc, #24]	@ (800a95c <inc_lock+0x118>)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	011b      	lsls	r3, r3, #4
 800a946:	440b      	add	r3, r1
 800a948:	330c      	adds	r3, #12
 800a94a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	3301      	adds	r3, #1
}
 800a950:	4618      	mov	r0, r3
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	20001228 	.word	0x20001228

0800a960 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800a968:	2300      	movs	r3, #0
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	e010      	b.n	800a990 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800a96e:	4a0d      	ldr	r2, [pc, #52]	@ (800a9a4 <clear_lock+0x44>)
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	011b      	lsls	r3, r3, #4
 800a974:	4413      	add	r3, r2
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d105      	bne.n	800a98a <clear_lock+0x2a>
 800a97e:	4a09      	ldr	r2, [pc, #36]	@ (800a9a4 <clear_lock+0x44>)
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	011b      	lsls	r3, r3, #4
 800a984:	4413      	add	r3, r2
 800a986:	2200      	movs	r2, #0
 800a988:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	3301      	adds	r3, #1
 800a98e:	60fb      	str	r3, [r7, #12]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	2b01      	cmp	r3, #1
 800a994:	d9eb      	bls.n	800a96e <clear_lock+0xe>
	}
}
 800a996:	bf00      	nop
 800a998:	bf00      	nop
 800a99a:	3714      	adds	r7, #20
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr
 800a9a4:	20001228 	.word	0x20001228

0800a9a8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b086      	sub	sp, #24
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	78db      	ldrb	r3, [r3, #3]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d034      	beq.n	800aa26 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a9c0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	7858      	ldrb	r0, [r3, #1]
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800a9cc:	2301      	movs	r3, #1
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	f7ff fd9a 	bl	800a508 <disk_write>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d002      	beq.n	800a9e0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	73fb      	strb	r3, [r7, #15]
 800a9de:	e022      	b.n	800aa26 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6a1b      	ldr	r3, [r3, #32]
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	1ad2      	subs	r2, r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	699b      	ldr	r3, [r3, #24]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d217      	bcs.n	800aa26 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	789b      	ldrb	r3, [r3, #2]
 800a9fa:	613b      	str	r3, [r7, #16]
 800a9fc:	e010      	b.n	800aa20 <sync_window+0x78>
					wsect += fs->fsize;
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	697a      	ldr	r2, [r7, #20]
 800aa04:	4413      	add	r3, r2
 800aa06:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	7858      	ldrb	r0, [r3, #1]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa12:	2301      	movs	r3, #1
 800aa14:	697a      	ldr	r2, [r7, #20]
 800aa16:	f7ff fd77 	bl	800a508 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	3b01      	subs	r3, #1
 800aa1e:	613b      	str	r3, [r7, #16]
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d8eb      	bhi.n	800a9fe <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa28:	4618      	mov	r0, r3
 800aa2a:	3718      	adds	r7, #24
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	bd80      	pop	{r7, pc}

0800aa30 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800aa30:	b580      	push	{r7, lr}
 800aa32:	b084      	sub	sp, #16
 800aa34:	af00      	add	r7, sp, #0
 800aa36:	6078      	str	r0, [r7, #4]
 800aa38:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	d01b      	beq.n	800aa80 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800aa48:	6878      	ldr	r0, [r7, #4]
 800aa4a:	f7ff ffad 	bl	800a9a8 <sync_window>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800aa52:	7bfb      	ldrb	r3, [r7, #15]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d113      	bne.n	800aa80 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	7858      	ldrb	r0, [r3, #1]
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800aa62:	2301      	movs	r3, #1
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	f7ff fd2f 	bl	800a4c8 <disk_read>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d004      	beq.n	800aa7a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800aa70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aa74:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800aa76:	2301      	movs	r3, #1
 800aa78:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	683a      	ldr	r2, [r7, #0]
 800aa7e:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800aa80:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3710      	adds	r7, #16
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800aa8a:	b480      	push	{r7}
 800aa8c:	b083      	sub	sp, #12
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	3b02      	subs	r3, #2
 800aa98:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	695b      	ldr	r3, [r3, #20]
 800aa9e:	3b02      	subs	r3, #2
 800aaa0:	683a      	ldr	r2, [r7, #0]
 800aaa2:	429a      	cmp	r2, r3
 800aaa4:	d301      	bcc.n	800aaaa <clust2sect+0x20>
 800aaa6:	2300      	movs	r3, #0
 800aaa8:	e008      	b.n	800aabc <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	895b      	ldrh	r3, [r3, #10]
 800aaae:	461a      	mov	r2, r3
 800aab0:	683b      	ldr	r3, [r7, #0]
 800aab2:	fb03 f202 	mul.w	r2, r3, r2
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aaba:	4413      	add	r3, r2
}
 800aabc:	4618      	mov	r0, r3
 800aabe:	370c      	adds	r7, #12
 800aac0:	46bd      	mov	sp, r7
 800aac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac6:	4770      	bx	lr

0800aac8 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b086      	sub	sp, #24
 800aacc:	af00      	add	r7, sp, #0
 800aace:	6078      	str	r0, [r7, #4]
 800aad0:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	2b01      	cmp	r3, #1
 800aadc:	d904      	bls.n	800aae8 <get_fat+0x20>
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	683a      	ldr	r2, [r7, #0]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d302      	bcc.n	800aaee <get_fat+0x26>
		val = 1;	/* Internal error */
 800aae8:	2301      	movs	r3, #1
 800aaea:	617b      	str	r3, [r7, #20]
 800aaec:	e08e      	b.n	800ac0c <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800aaee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aaf2:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800aaf4:	693b      	ldr	r3, [r7, #16]
 800aaf6:	781b      	ldrb	r3, [r3, #0]
 800aaf8:	2b03      	cmp	r3, #3
 800aafa:	d061      	beq.n	800abc0 <get_fat+0xf8>
 800aafc:	2b03      	cmp	r3, #3
 800aafe:	dc7b      	bgt.n	800abf8 <get_fat+0x130>
 800ab00:	2b01      	cmp	r3, #1
 800ab02:	d002      	beq.n	800ab0a <get_fat+0x42>
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	d041      	beq.n	800ab8c <get_fat+0xc4>
 800ab08:	e076      	b.n	800abf8 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	60fb      	str	r3, [r7, #12]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	085b      	lsrs	r3, r3, #1
 800ab12:	68fa      	ldr	r2, [r7, #12]
 800ab14:	4413      	add	r3, r2
 800ab16:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab18:	693b      	ldr	r3, [r7, #16]
 800ab1a:	6a1a      	ldr	r2, [r3, #32]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	0a5b      	lsrs	r3, r3, #9
 800ab20:	4413      	add	r3, r2
 800ab22:	4619      	mov	r1, r3
 800ab24:	6938      	ldr	r0, [r7, #16]
 800ab26:	f7ff ff83 	bl	800aa30 <move_window>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d166      	bne.n	800abfe <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	1c5a      	adds	r2, r3, #1
 800ab34:	60fa      	str	r2, [r7, #12]
 800ab36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	4413      	add	r3, r2
 800ab3e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab42:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	6a1a      	ldr	r2, [r3, #32]
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	0a5b      	lsrs	r3, r3, #9
 800ab4c:	4413      	add	r3, r2
 800ab4e:	4619      	mov	r1, r3
 800ab50:	6938      	ldr	r0, [r7, #16]
 800ab52:	f7ff ff6d 	bl	800aa30 <move_window>
 800ab56:	4603      	mov	r3, r0
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d152      	bne.n	800ac02 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab62:	693a      	ldr	r2, [r7, #16]
 800ab64:	4413      	add	r3, r2
 800ab66:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ab6a:	021b      	lsls	r3, r3, #8
 800ab6c:	68ba      	ldr	r2, [r7, #8]
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	f003 0301 	and.w	r3, r3, #1
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d002      	beq.n	800ab82 <get_fat+0xba>
 800ab7c:	68bb      	ldr	r3, [r7, #8]
 800ab7e:	091b      	lsrs	r3, r3, #4
 800ab80:	e002      	b.n	800ab88 <get_fat+0xc0>
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab88:	617b      	str	r3, [r7, #20]
			break;
 800ab8a:	e03f      	b.n	800ac0c <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ab8c:	693b      	ldr	r3, [r7, #16]
 800ab8e:	6a1a      	ldr	r2, [r3, #32]
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	0a1b      	lsrs	r3, r3, #8
 800ab94:	4413      	add	r3, r2
 800ab96:	4619      	mov	r1, r3
 800ab98:	6938      	ldr	r0, [r7, #16]
 800ab9a:	f7ff ff49 	bl	800aa30 <move_window>
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d130      	bne.n	800ac06 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800abaa:	683b      	ldr	r3, [r7, #0]
 800abac:	005b      	lsls	r3, r3, #1
 800abae:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800abb2:	4413      	add	r3, r2
 800abb4:	4618      	mov	r0, r3
 800abb6:	f7ff fcc7 	bl	800a548 <ld_word>
 800abba:	4603      	mov	r3, r0
 800abbc:	617b      	str	r3, [r7, #20]
			break;
 800abbe:	e025      	b.n	800ac0c <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800abc0:	693b      	ldr	r3, [r7, #16]
 800abc2:	6a1a      	ldr	r2, [r3, #32]
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	09db      	lsrs	r3, r3, #7
 800abc8:	4413      	add	r3, r2
 800abca:	4619      	mov	r1, r3
 800abcc:	6938      	ldr	r0, [r7, #16]
 800abce:	f7ff ff2f 	bl	800aa30 <move_window>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d118      	bne.n	800ac0a <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800abd8:	693b      	ldr	r3, [r7, #16]
 800abda:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	009b      	lsls	r3, r3, #2
 800abe2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800abe6:	4413      	add	r3, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f7ff fcc5 	bl	800a578 <ld_dword>
 800abee:	4603      	mov	r3, r0
 800abf0:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800abf4:	617b      	str	r3, [r7, #20]
			break;
 800abf6:	e009      	b.n	800ac0c <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800abf8:	2301      	movs	r3, #1
 800abfa:	617b      	str	r3, [r7, #20]
 800abfc:	e006      	b.n	800ac0c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800abfe:	bf00      	nop
 800ac00:	e004      	b.n	800ac0c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ac02:	bf00      	nop
 800ac04:	e002      	b.n	800ac0c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ac06:	bf00      	nop
 800ac08:	e000      	b.n	800ac0c <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ac0a:	bf00      	nop
		}
	}

	return val;
 800ac0c:	697b      	ldr	r3, [r7, #20]
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3718      	adds	r7, #24
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ac16:	b590      	push	{r4, r7, lr}
 800ac18:	b089      	sub	sp, #36	@ 0x24
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	60f8      	str	r0, [r7, #12]
 800ac1e:	60b9      	str	r1, [r7, #8]
 800ac20:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ac22:	2302      	movs	r3, #2
 800ac24:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	2b01      	cmp	r3, #1
 800ac2a:	f240 80d9 	bls.w	800ade0 <put_fat+0x1ca>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	695b      	ldr	r3, [r3, #20]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	429a      	cmp	r2, r3
 800ac36:	f080 80d3 	bcs.w	800ade0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	2b03      	cmp	r3, #3
 800ac40:	f000 8096 	beq.w	800ad70 <put_fat+0x15a>
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	f300 80cb 	bgt.w	800ade0 <put_fat+0x1ca>
 800ac4a:	2b01      	cmp	r3, #1
 800ac4c:	d002      	beq.n	800ac54 <put_fat+0x3e>
 800ac4e:	2b02      	cmp	r3, #2
 800ac50:	d06e      	beq.n	800ad30 <put_fat+0x11a>
 800ac52:	e0c5      	b.n	800ade0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800ac54:	68bb      	ldr	r3, [r7, #8]
 800ac56:	61bb      	str	r3, [r7, #24]
 800ac58:	69bb      	ldr	r3, [r7, #24]
 800ac5a:	085b      	lsrs	r3, r3, #1
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	4413      	add	r3, r2
 800ac60:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	6a1a      	ldr	r2, [r3, #32]
 800ac66:	69bb      	ldr	r3, [r7, #24]
 800ac68:	0a5b      	lsrs	r3, r3, #9
 800ac6a:	4413      	add	r3, r2
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f7ff fede 	bl	800aa30 <move_window>
 800ac74:	4603      	mov	r3, r0
 800ac76:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ac78:	7ffb      	ldrb	r3, [r7, #31]
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f040 80a9 	bne.w	800add2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ac86:	69bb      	ldr	r3, [r7, #24]
 800ac88:	1c59      	adds	r1, r3, #1
 800ac8a:	61b9      	str	r1, [r7, #24]
 800ac8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac90:	4413      	add	r3, r2
 800ac92:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800ac94:	68bb      	ldr	r3, [r7, #8]
 800ac96:	f003 0301 	and.w	r3, r3, #1
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d00d      	beq.n	800acba <put_fat+0xa4>
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	781b      	ldrb	r3, [r3, #0]
 800aca2:	b25b      	sxtb	r3, r3
 800aca4:	f003 030f 	and.w	r3, r3, #15
 800aca8:	b25a      	sxtb	r2, r3
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	b2db      	uxtb	r3, r3
 800acae:	011b      	lsls	r3, r3, #4
 800acb0:	b25b      	sxtb	r3, r3
 800acb2:	4313      	orrs	r3, r2
 800acb4:	b25b      	sxtb	r3, r3
 800acb6:	b2db      	uxtb	r3, r3
 800acb8:	e001      	b.n	800acbe <put_fat+0xa8>
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	b2db      	uxtb	r3, r3
 800acbe:	697a      	ldr	r2, [r7, #20]
 800acc0:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2201      	movs	r2, #1
 800acc6:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	6a1a      	ldr	r2, [r3, #32]
 800accc:	69bb      	ldr	r3, [r7, #24]
 800acce:	0a5b      	lsrs	r3, r3, #9
 800acd0:	4413      	add	r3, r2
 800acd2:	4619      	mov	r1, r3
 800acd4:	68f8      	ldr	r0, [r7, #12]
 800acd6:	f7ff feab 	bl	800aa30 <move_window>
 800acda:	4603      	mov	r3, r0
 800acdc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800acde:	7ffb      	ldrb	r3, [r7, #31]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d178      	bne.n	800add6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800acea:	69bb      	ldr	r3, [r7, #24]
 800acec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acf0:	4413      	add	r3, r2
 800acf2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800acf4:	68bb      	ldr	r3, [r7, #8]
 800acf6:	f003 0301 	and.w	r3, r3, #1
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d003      	beq.n	800ad06 <put_fat+0xf0>
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	091b      	lsrs	r3, r3, #4
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	e00e      	b.n	800ad24 <put_fat+0x10e>
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	781b      	ldrb	r3, [r3, #0]
 800ad0a:	b25b      	sxtb	r3, r3
 800ad0c:	f023 030f 	bic.w	r3, r3, #15
 800ad10:	b25a      	sxtb	r2, r3
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	0a1b      	lsrs	r3, r3, #8
 800ad16:	b25b      	sxtb	r3, r3
 800ad18:	f003 030f 	and.w	r3, r3, #15
 800ad1c:	b25b      	sxtb	r3, r3
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	b25b      	sxtb	r3, r3
 800ad22:	b2db      	uxtb	r3, r3
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2201      	movs	r2, #1
 800ad2c:	70da      	strb	r2, [r3, #3]
			break;
 800ad2e:	e057      	b.n	800ade0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	6a1a      	ldr	r2, [r3, #32]
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	0a1b      	lsrs	r3, r3, #8
 800ad38:	4413      	add	r3, r2
 800ad3a:	4619      	mov	r1, r3
 800ad3c:	68f8      	ldr	r0, [r7, #12]
 800ad3e:	f7ff fe77 	bl	800aa30 <move_window>
 800ad42:	4603      	mov	r3, r0
 800ad44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad46:	7ffb      	ldrb	r3, [r7, #31]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d146      	bne.n	800adda <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad52:	68bb      	ldr	r3, [r7, #8]
 800ad54:	005b      	lsls	r3, r3, #1
 800ad56:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ad5a:	4413      	add	r3, r2
 800ad5c:	687a      	ldr	r2, [r7, #4]
 800ad5e:	b292      	uxth	r2, r2
 800ad60:	4611      	mov	r1, r2
 800ad62:	4618      	mov	r0, r3
 800ad64:	f7ff fc2b 	bl	800a5be <st_word>
			fs->wflag = 1;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	70da      	strb	r2, [r3, #3]
			break;
 800ad6e:	e037      	b.n	800ade0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	6a1a      	ldr	r2, [r3, #32]
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	09db      	lsrs	r3, r3, #7
 800ad78:	4413      	add	r3, r2
 800ad7a:	4619      	mov	r1, r3
 800ad7c:	68f8      	ldr	r0, [r7, #12]
 800ad7e:	f7ff fe57 	bl	800aa30 <move_window>
 800ad82:	4603      	mov	r3, r0
 800ad84:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ad86:	7ffb      	ldrb	r3, [r7, #31]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d128      	bne.n	800adde <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ad98:	68bb      	ldr	r3, [r7, #8]
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ada0:	4413      	add	r3, r2
 800ada2:	4618      	mov	r0, r3
 800ada4:	f7ff fbe8 	bl	800a578 <ld_dword>
 800ada8:	4603      	mov	r3, r0
 800adaa:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800adae:	4323      	orrs	r3, r4
 800adb0:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800adb8:	68bb      	ldr	r3, [r7, #8]
 800adba:	009b      	lsls	r3, r3, #2
 800adbc:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800adc0:	4413      	add	r3, r2
 800adc2:	6879      	ldr	r1, [r7, #4]
 800adc4:	4618      	mov	r0, r3
 800adc6:	f7ff fc15 	bl	800a5f4 <st_dword>
			fs->wflag = 1;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2201      	movs	r2, #1
 800adce:	70da      	strb	r2, [r3, #3]
			break;
 800add0:	e006      	b.n	800ade0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800add2:	bf00      	nop
 800add4:	e004      	b.n	800ade0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800add6:	bf00      	nop
 800add8:	e002      	b.n	800ade0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800adda:	bf00      	nop
 800addc:	e000      	b.n	800ade0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800adde:	bf00      	nop
		}
	}
	return res;
 800ade0:	7ffb      	ldrb	r3, [r7, #31]
}
 800ade2:	4618      	mov	r0, r3
 800ade4:	3724      	adds	r7, #36	@ 0x24
 800ade6:	46bd      	mov	sp, r7
 800ade8:	bd90      	pop	{r4, r7, pc}

0800adea <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800adea:	b580      	push	{r7, lr}
 800adec:	b088      	sub	sp, #32
 800adee:	af00      	add	r7, sp, #0
 800adf0:	60f8      	str	r0, [r7, #12]
 800adf2:	60b9      	str	r1, [r7, #8]
 800adf4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800adf6:	2300      	movs	r3, #0
 800adf8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d904      	bls.n	800ae10 <remove_chain+0x26>
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	d301      	bcc.n	800ae14 <remove_chain+0x2a>
 800ae10:	2302      	movs	r3, #2
 800ae12:	e04b      	b.n	800aeac <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d00c      	beq.n	800ae34 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ae1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae1e:	6879      	ldr	r1, [r7, #4]
 800ae20:	69b8      	ldr	r0, [r7, #24]
 800ae22:	f7ff fef8 	bl	800ac16 <put_fat>
 800ae26:	4603      	mov	r3, r0
 800ae28:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ae2a:	7ffb      	ldrb	r3, [r7, #31]
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d001      	beq.n	800ae34 <remove_chain+0x4a>
 800ae30:	7ffb      	ldrb	r3, [r7, #31]
 800ae32:	e03b      	b.n	800aeac <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ae34:	68b9      	ldr	r1, [r7, #8]
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f7ff fe46 	bl	800aac8 <get_fat>
 800ae3c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d031      	beq.n	800aea8 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	2b01      	cmp	r3, #1
 800ae48:	d101      	bne.n	800ae4e <remove_chain+0x64>
 800ae4a:	2302      	movs	r3, #2
 800ae4c:	e02e      	b.n	800aeac <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ae4e:	697b      	ldr	r3, [r7, #20]
 800ae50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae54:	d101      	bne.n	800ae5a <remove_chain+0x70>
 800ae56:	2301      	movs	r3, #1
 800ae58:	e028      	b.n	800aeac <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ae5a:	2200      	movs	r2, #0
 800ae5c:	68b9      	ldr	r1, [r7, #8]
 800ae5e:	69b8      	ldr	r0, [r7, #24]
 800ae60:	f7ff fed9 	bl	800ac16 <put_fat>
 800ae64:	4603      	mov	r3, r0
 800ae66:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ae68:	7ffb      	ldrb	r3, [r7, #31]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d001      	beq.n	800ae72 <remove_chain+0x88>
 800ae6e:	7ffb      	ldrb	r3, [r7, #31]
 800ae70:	e01c      	b.n	800aeac <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ae72:	69bb      	ldr	r3, [r7, #24]
 800ae74:	691a      	ldr	r2, [r3, #16]
 800ae76:	69bb      	ldr	r3, [r7, #24]
 800ae78:	695b      	ldr	r3, [r3, #20]
 800ae7a:	3b02      	subs	r3, #2
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d20b      	bcs.n	800ae98 <remove_chain+0xae>
			fs->free_clst++;
 800ae80:	69bb      	ldr	r3, [r7, #24]
 800ae82:	691b      	ldr	r3, [r3, #16]
 800ae84:	1c5a      	adds	r2, r3, #1
 800ae86:	69bb      	ldr	r3, [r7, #24]
 800ae88:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800ae8a:	69bb      	ldr	r3, [r7, #24]
 800ae8c:	791b      	ldrb	r3, [r3, #4]
 800ae8e:	f043 0301 	orr.w	r3, r3, #1
 800ae92:	b2da      	uxtb	r2, r3
 800ae94:	69bb      	ldr	r3, [r7, #24]
 800ae96:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	695b      	ldr	r3, [r3, #20]
 800aea0:	68ba      	ldr	r2, [r7, #8]
 800aea2:	429a      	cmp	r2, r3
 800aea4:	d3c6      	bcc.n	800ae34 <remove_chain+0x4a>
 800aea6:	e000      	b.n	800aeaa <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800aea8:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800aeaa:	2300      	movs	r3, #0
}
 800aeac:	4618      	mov	r0, r3
 800aeae:	3720      	adds	r7, #32
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d10d      	bne.n	800aee6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	68db      	ldr	r3, [r3, #12]
 800aece:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800aed0:	69bb      	ldr	r3, [r7, #24]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d004      	beq.n	800aee0 <create_chain+0x2c>
 800aed6:	693b      	ldr	r3, [r7, #16]
 800aed8:	695b      	ldr	r3, [r3, #20]
 800aeda:	69ba      	ldr	r2, [r7, #24]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d31b      	bcc.n	800af18 <create_chain+0x64>
 800aee0:	2301      	movs	r3, #1
 800aee2:	61bb      	str	r3, [r7, #24]
 800aee4:	e018      	b.n	800af18 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800aee6:	6839      	ldr	r1, [r7, #0]
 800aee8:	6878      	ldr	r0, [r7, #4]
 800aeea:	f7ff fded 	bl	800aac8 <get_fat>
 800aeee:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	d801      	bhi.n	800aefa <create_chain+0x46>
 800aef6:	2301      	movs	r3, #1
 800aef8:	e070      	b.n	800afdc <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af00:	d101      	bne.n	800af06 <create_chain+0x52>
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	e06a      	b.n	800afdc <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	68fa      	ldr	r2, [r7, #12]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d201      	bcs.n	800af14 <create_chain+0x60>
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	e063      	b.n	800afdc <create_chain+0x128>
		scl = clst;
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800af18:	69bb      	ldr	r3, [r7, #24]
 800af1a:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800af1c:	69fb      	ldr	r3, [r7, #28]
 800af1e:	3301      	adds	r3, #1
 800af20:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800af22:	693b      	ldr	r3, [r7, #16]
 800af24:	695b      	ldr	r3, [r3, #20]
 800af26:	69fa      	ldr	r2, [r7, #28]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d307      	bcc.n	800af3c <create_chain+0x88>
				ncl = 2;
 800af2c:	2302      	movs	r3, #2
 800af2e:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800af30:	69fa      	ldr	r2, [r7, #28]
 800af32:	69bb      	ldr	r3, [r7, #24]
 800af34:	429a      	cmp	r2, r3
 800af36:	d901      	bls.n	800af3c <create_chain+0x88>
 800af38:	2300      	movs	r3, #0
 800af3a:	e04f      	b.n	800afdc <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800af3c:	69f9      	ldr	r1, [r7, #28]
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f7ff fdc2 	bl	800aac8 <get_fat>
 800af44:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2b00      	cmp	r3, #0
 800af4a:	d00e      	beq.n	800af6a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d003      	beq.n	800af5a <create_chain+0xa6>
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800af58:	d101      	bne.n	800af5e <create_chain+0xaa>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	e03e      	b.n	800afdc <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800af5e:	69fa      	ldr	r2, [r7, #28]
 800af60:	69bb      	ldr	r3, [r7, #24]
 800af62:	429a      	cmp	r2, r3
 800af64:	d1da      	bne.n	800af1c <create_chain+0x68>
 800af66:	2300      	movs	r3, #0
 800af68:	e038      	b.n	800afdc <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800af6a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800af6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800af70:	69f9      	ldr	r1, [r7, #28]
 800af72:	6938      	ldr	r0, [r7, #16]
 800af74:	f7ff fe4f 	bl	800ac16 <put_fat>
 800af78:	4603      	mov	r3, r0
 800af7a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800af7c:	7dfb      	ldrb	r3, [r7, #23]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d109      	bne.n	800af96 <create_chain+0xe2>
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d006      	beq.n	800af96 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800af88:	69fa      	ldr	r2, [r7, #28]
 800af8a:	6839      	ldr	r1, [r7, #0]
 800af8c:	6938      	ldr	r0, [r7, #16]
 800af8e:	f7ff fe42 	bl	800ac16 <put_fat>
 800af92:	4603      	mov	r3, r0
 800af94:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800af96:	7dfb      	ldrb	r3, [r7, #23]
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d116      	bne.n	800afca <create_chain+0x116>
		fs->last_clst = ncl;
 800af9c:	693b      	ldr	r3, [r7, #16]
 800af9e:	69fa      	ldr	r2, [r7, #28]
 800afa0:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800afa2:	693b      	ldr	r3, [r7, #16]
 800afa4:	691a      	ldr	r2, [r3, #16]
 800afa6:	693b      	ldr	r3, [r7, #16]
 800afa8:	695b      	ldr	r3, [r3, #20]
 800afaa:	3b02      	subs	r3, #2
 800afac:	429a      	cmp	r2, r3
 800afae:	d804      	bhi.n	800afba <create_chain+0x106>
 800afb0:	693b      	ldr	r3, [r7, #16]
 800afb2:	691b      	ldr	r3, [r3, #16]
 800afb4:	1e5a      	subs	r2, r3, #1
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	791b      	ldrb	r3, [r3, #4]
 800afbe:	f043 0301 	orr.w	r3, r3, #1
 800afc2:	b2da      	uxtb	r2, r3
 800afc4:	693b      	ldr	r3, [r7, #16]
 800afc6:	711a      	strb	r2, [r3, #4]
 800afc8:	e007      	b.n	800afda <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800afca:	7dfb      	ldrb	r3, [r7, #23]
 800afcc:	2b01      	cmp	r3, #1
 800afce:	d102      	bne.n	800afd6 <create_chain+0x122>
 800afd0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800afd4:	e000      	b.n	800afd8 <create_chain+0x124>
 800afd6:	2301      	movs	r3, #1
 800afd8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800afda:	69fb      	ldr	r3, [r7, #28]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3720      	adds	r7, #32
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800aff4:	683b      	ldr	r3, [r7, #0]
 800aff6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800affa:	d204      	bcs.n	800b006 <dir_sdi+0x22>
 800affc:	683b      	ldr	r3, [r7, #0]
 800affe:	f003 031f 	and.w	r3, r3, #31
 800b002:	2b00      	cmp	r3, #0
 800b004:	d001      	beq.n	800b00a <dir_sdi+0x26>
		return FR_INT_ERR;
 800b006:	2302      	movs	r3, #2
 800b008:	e063      	b.n	800b0d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	683a      	ldr	r2, [r7, #0]
 800b00e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	d106      	bne.n	800b02a <dir_sdi+0x46>
 800b01c:	693b      	ldr	r3, [r7, #16]
 800b01e:	781b      	ldrb	r3, [r3, #0]
 800b020:	2b02      	cmp	r3, #2
 800b022:	d902      	bls.n	800b02a <dir_sdi+0x46>
		clst = fs->dirbase;
 800b024:	693b      	ldr	r3, [r7, #16]
 800b026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b028:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d10c      	bne.n	800b04a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800b030:	683b      	ldr	r3, [r7, #0]
 800b032:	095b      	lsrs	r3, r3, #5
 800b034:	693a      	ldr	r2, [r7, #16]
 800b036:	8912      	ldrh	r2, [r2, #8]
 800b038:	4293      	cmp	r3, r2
 800b03a:	d301      	bcc.n	800b040 <dir_sdi+0x5c>
 800b03c:	2302      	movs	r3, #2
 800b03e:	e048      	b.n	800b0d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800b040:	693b      	ldr	r3, [r7, #16]
 800b042:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	61da      	str	r2, [r3, #28]
 800b048:	e029      	b.n	800b09e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	895b      	ldrh	r3, [r3, #10]
 800b04e:	025b      	lsls	r3, r3, #9
 800b050:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b052:	e019      	b.n	800b088 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	6979      	ldr	r1, [r7, #20]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff fd35 	bl	800aac8 <get_fat>
 800b05e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b066:	d101      	bne.n	800b06c <dir_sdi+0x88>
 800b068:	2301      	movs	r3, #1
 800b06a:	e032      	b.n	800b0d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800b06c:	697b      	ldr	r3, [r7, #20]
 800b06e:	2b01      	cmp	r3, #1
 800b070:	d904      	bls.n	800b07c <dir_sdi+0x98>
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	695b      	ldr	r3, [r3, #20]
 800b076:	697a      	ldr	r2, [r7, #20]
 800b078:	429a      	cmp	r2, r3
 800b07a:	d301      	bcc.n	800b080 <dir_sdi+0x9c>
 800b07c:	2302      	movs	r3, #2
 800b07e:	e028      	b.n	800b0d2 <dir_sdi+0xee>
			ofs -= csz;
 800b080:	683a      	ldr	r2, [r7, #0]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	1ad3      	subs	r3, r2, r3
 800b086:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800b088:	683a      	ldr	r2, [r7, #0]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	429a      	cmp	r2, r3
 800b08e:	d2e1      	bcs.n	800b054 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800b090:	6979      	ldr	r1, [r7, #20]
 800b092:	6938      	ldr	r0, [r7, #16]
 800b094:	f7ff fcf9 	bl	800aa8a <clust2sect>
 800b098:	4602      	mov	r2, r0
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	69db      	ldr	r3, [r3, #28]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d101      	bne.n	800b0b0 <dir_sdi+0xcc>
 800b0ac:	2302      	movs	r3, #2
 800b0ae:	e010      	b.n	800b0d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	69da      	ldr	r2, [r3, #28]
 800b0b4:	683b      	ldr	r3, [r7, #0]
 800b0b6:	0a5b      	lsrs	r3, r3, #9
 800b0b8:	441a      	add	r2, r3
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800b0be:	693b      	ldr	r3, [r7, #16]
 800b0c0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b0c4:	683b      	ldr	r3, [r7, #0]
 800b0c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b0ca:	441a      	add	r2, r3
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b0d0:	2300      	movs	r3, #0
}
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	3718      	adds	r7, #24
 800b0d6:	46bd      	mov	sp, r7
 800b0d8:	bd80      	pop	{r7, pc}

0800b0da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800b0da:	b580      	push	{r7, lr}
 800b0dc:	b086      	sub	sp, #24
 800b0de:	af00      	add	r7, sp, #0
 800b0e0:	6078      	str	r0, [r7, #4]
 800b0e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	695b      	ldr	r3, [r3, #20]
 800b0ee:	3320      	adds	r3, #32
 800b0f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	69db      	ldr	r3, [r3, #28]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d003      	beq.n	800b102 <dir_next+0x28>
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b100:	d301      	bcc.n	800b106 <dir_next+0x2c>
 800b102:	2304      	movs	r3, #4
 800b104:	e0aa      	b.n	800b25c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800b106:	68bb      	ldr	r3, [r7, #8]
 800b108:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	f040 8098 	bne.w	800b242 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	69db      	ldr	r3, [r3, #28]
 800b116:	1c5a      	adds	r2, r3, #1
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	699b      	ldr	r3, [r3, #24]
 800b120:	2b00      	cmp	r3, #0
 800b122:	d10b      	bne.n	800b13c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800b124:	68bb      	ldr	r3, [r7, #8]
 800b126:	095b      	lsrs	r3, r3, #5
 800b128:	68fa      	ldr	r2, [r7, #12]
 800b12a:	8912      	ldrh	r2, [r2, #8]
 800b12c:	4293      	cmp	r3, r2
 800b12e:	f0c0 8088 	bcc.w	800b242 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2200      	movs	r2, #0
 800b136:	61da      	str	r2, [r3, #28]
 800b138:	2304      	movs	r3, #4
 800b13a:	e08f      	b.n	800b25c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800b13c:	68bb      	ldr	r3, [r7, #8]
 800b13e:	0a5b      	lsrs	r3, r3, #9
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	8952      	ldrh	r2, [r2, #10]
 800b144:	3a01      	subs	r2, #1
 800b146:	4013      	ands	r3, r2
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d17a      	bne.n	800b242 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800b14c:	687a      	ldr	r2, [r7, #4]
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	699b      	ldr	r3, [r3, #24]
 800b152:	4619      	mov	r1, r3
 800b154:	4610      	mov	r0, r2
 800b156:	f7ff fcb7 	bl	800aac8 <get_fat>
 800b15a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800b15c:	697b      	ldr	r3, [r7, #20]
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d801      	bhi.n	800b166 <dir_next+0x8c>
 800b162:	2302      	movs	r3, #2
 800b164:	e07a      	b.n	800b25c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b16c:	d101      	bne.n	800b172 <dir_next+0x98>
 800b16e:	2301      	movs	r3, #1
 800b170:	e074      	b.n	800b25c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800b172:	68fb      	ldr	r3, [r7, #12]
 800b174:	695b      	ldr	r3, [r3, #20]
 800b176:	697a      	ldr	r2, [r7, #20]
 800b178:	429a      	cmp	r2, r3
 800b17a:	d358      	bcc.n	800b22e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d104      	bne.n	800b18c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2200      	movs	r2, #0
 800b186:	61da      	str	r2, [r3, #28]
 800b188:	2304      	movs	r3, #4
 800b18a:	e067      	b.n	800b25c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800b18c:	687a      	ldr	r2, [r7, #4]
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	699b      	ldr	r3, [r3, #24]
 800b192:	4619      	mov	r1, r3
 800b194:	4610      	mov	r0, r2
 800b196:	f7ff fe8d 	bl	800aeb4 <create_chain>
 800b19a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800b19c:	697b      	ldr	r3, [r7, #20]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d101      	bne.n	800b1a6 <dir_next+0xcc>
 800b1a2:	2307      	movs	r3, #7
 800b1a4:	e05a      	b.n	800b25c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d101      	bne.n	800b1b0 <dir_next+0xd6>
 800b1ac:	2302      	movs	r3, #2
 800b1ae:	e055      	b.n	800b25c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800b1b0:	697b      	ldr	r3, [r7, #20]
 800b1b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1b6:	d101      	bne.n	800b1bc <dir_next+0xe2>
 800b1b8:	2301      	movs	r3, #1
 800b1ba:	e04f      	b.n	800b25c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800b1bc:	68f8      	ldr	r0, [r7, #12]
 800b1be:	f7ff fbf3 	bl	800a9a8 <sync_window>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d001      	beq.n	800b1cc <dir_next+0xf2>
 800b1c8:	2301      	movs	r3, #1
 800b1ca:	e047      	b.n	800b25c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	3330      	adds	r3, #48	@ 0x30
 800b1d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f7ff fa59 	bl	800a68e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b1dc:	2300      	movs	r3, #0
 800b1de:	613b      	str	r3, [r7, #16]
 800b1e0:	6979      	ldr	r1, [r7, #20]
 800b1e2:	68f8      	ldr	r0, [r7, #12]
 800b1e4:	f7ff fc51 	bl	800aa8a <clust2sect>
 800b1e8:	4602      	mov	r2, r0
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b1ee:	e012      	b.n	800b216 <dir_next+0x13c>
						fs->wflag = 1;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7ff fbd6 	bl	800a9a8 <sync_window>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d001      	beq.n	800b206 <dir_next+0x12c>
 800b202:	2301      	movs	r3, #1
 800b204:	e02a      	b.n	800b25c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	3301      	adds	r3, #1
 800b20a:	613b      	str	r3, [r7, #16]
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b210:	1c5a      	adds	r2, r3, #1
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	895b      	ldrh	r3, [r3, #10]
 800b21a:	461a      	mov	r2, r3
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	4293      	cmp	r3, r2
 800b220:	d3e6      	bcc.n	800b1f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	1ad2      	subs	r2, r2, r3
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	697a      	ldr	r2, [r7, #20]
 800b232:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800b234:	6979      	ldr	r1, [r7, #20]
 800b236:	68f8      	ldr	r0, [r7, #12]
 800b238:	f7ff fc27 	bl	800aa8a <clust2sect>
 800b23c:	4602      	mov	r2, r0
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	68ba      	ldr	r2, [r7, #8]
 800b246:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b24e:	68bb      	ldr	r3, [r7, #8]
 800b250:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b254:	441a      	add	r2, r3
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800b25a:	2300      	movs	r3, #0
}
 800b25c:	4618      	mov	r0, r3
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800b264:	b580      	push	{r7, lr}
 800b266:	b086      	sub	sp, #24
 800b268:	af00      	add	r7, sp, #0
 800b26a:	6078      	str	r0, [r7, #4]
 800b26c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800b274:	2100      	movs	r1, #0
 800b276:	6878      	ldr	r0, [r7, #4]
 800b278:	f7ff feb4 	bl	800afe4 <dir_sdi>
 800b27c:	4603      	mov	r3, r0
 800b27e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800b280:	7dfb      	ldrb	r3, [r7, #23]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d12b      	bne.n	800b2de <dir_alloc+0x7a>
		n = 0;
 800b286:	2300      	movs	r3, #0
 800b288:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	69db      	ldr	r3, [r3, #28]
 800b28e:	4619      	mov	r1, r3
 800b290:	68f8      	ldr	r0, [r7, #12]
 800b292:	f7ff fbcd 	bl	800aa30 <move_window>
 800b296:	4603      	mov	r3, r0
 800b298:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b29a:	7dfb      	ldrb	r3, [r7, #23]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d11d      	bne.n	800b2dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6a1b      	ldr	r3, [r3, #32]
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	2be5      	cmp	r3, #229	@ 0xe5
 800b2a8:	d004      	beq.n	800b2b4 <dir_alloc+0x50>
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	781b      	ldrb	r3, [r3, #0]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d107      	bne.n	800b2c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	3301      	adds	r3, #1
 800b2b8:	613b      	str	r3, [r7, #16]
 800b2ba:	693a      	ldr	r2, [r7, #16]
 800b2bc:	683b      	ldr	r3, [r7, #0]
 800b2be:	429a      	cmp	r2, r3
 800b2c0:	d102      	bne.n	800b2c8 <dir_alloc+0x64>
 800b2c2:	e00c      	b.n	800b2de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	6878      	ldr	r0, [r7, #4]
 800b2cc:	f7ff ff05 	bl	800b0da <dir_next>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800b2d4:	7dfb      	ldrb	r3, [r7, #23]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d0d7      	beq.n	800b28a <dir_alloc+0x26>
 800b2da:	e000      	b.n	800b2de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800b2dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800b2de:	7dfb      	ldrb	r3, [r7, #23]
 800b2e0:	2b04      	cmp	r3, #4
 800b2e2:	d101      	bne.n	800b2e8 <dir_alloc+0x84>
 800b2e4:	2307      	movs	r3, #7
 800b2e6:	75fb      	strb	r3, [r7, #23]
	return res;
 800b2e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	3718      	adds	r7, #24
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	bd80      	pop	{r7, pc}

0800b2f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800b2f2:	b580      	push	{r7, lr}
 800b2f4:	b084      	sub	sp, #16
 800b2f6:	af00      	add	r7, sp, #0
 800b2f8:	6078      	str	r0, [r7, #4]
 800b2fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	331a      	adds	r3, #26
 800b300:	4618      	mov	r0, r3
 800b302:	f7ff f921 	bl	800a548 <ld_word>
 800b306:	4603      	mov	r3, r0
 800b308:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	781b      	ldrb	r3, [r3, #0]
 800b30e:	2b03      	cmp	r3, #3
 800b310:	d109      	bne.n	800b326 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800b312:	683b      	ldr	r3, [r7, #0]
 800b314:	3314      	adds	r3, #20
 800b316:	4618      	mov	r0, r3
 800b318:	f7ff f916 	bl	800a548 <ld_word>
 800b31c:	4603      	mov	r3, r0
 800b31e:	041b      	lsls	r3, r3, #16
 800b320:	68fa      	ldr	r2, [r7, #12]
 800b322:	4313      	orrs	r3, r2
 800b324:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800b326:	68fb      	ldr	r3, [r7, #12]
}
 800b328:	4618      	mov	r0, r3
 800b32a:	3710      	adds	r7, #16
 800b32c:	46bd      	mov	sp, r7
 800b32e:	bd80      	pop	{r7, pc}

0800b330 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	331a      	adds	r3, #26
 800b340:	687a      	ldr	r2, [r7, #4]
 800b342:	b292      	uxth	r2, r2
 800b344:	4611      	mov	r1, r2
 800b346:	4618      	mov	r0, r3
 800b348:	f7ff f939 	bl	800a5be <st_word>
	if (fs->fs_type == FS_FAT32) {
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	781b      	ldrb	r3, [r3, #0]
 800b350:	2b03      	cmp	r3, #3
 800b352:	d109      	bne.n	800b368 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	f103 0214 	add.w	r2, r3, #20
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	0c1b      	lsrs	r3, r3, #16
 800b35e:	b29b      	uxth	r3, r3
 800b360:	4619      	mov	r1, r3
 800b362:	4610      	mov	r0, r2
 800b364:	f7ff f92b 	bl	800a5be <st_word>
	}
}
 800b368:	bf00      	nop
 800b36a:	3710      	adds	r7, #16
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}

0800b370 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800b370:	b580      	push	{r7, lr}
 800b372:	b086      	sub	sp, #24
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800b37e:	2100      	movs	r1, #0
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f7ff fe2f 	bl	800afe4 <dir_sdi>
 800b386:	4603      	mov	r3, r0
 800b388:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800b38a:	7dfb      	ldrb	r3, [r7, #23]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d001      	beq.n	800b394 <dir_find+0x24>
 800b390:	7dfb      	ldrb	r3, [r7, #23]
 800b392:	e03e      	b.n	800b412 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	69db      	ldr	r3, [r3, #28]
 800b398:	4619      	mov	r1, r3
 800b39a:	6938      	ldr	r0, [r7, #16]
 800b39c:	f7ff fb48 	bl	800aa30 <move_window>
 800b3a0:	4603      	mov	r3, r0
 800b3a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800b3a4:	7dfb      	ldrb	r3, [r7, #23]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d12f      	bne.n	800b40a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	6a1b      	ldr	r3, [r3, #32]
 800b3ae:	781b      	ldrb	r3, [r3, #0]
 800b3b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800b3b2:	7bfb      	ldrb	r3, [r7, #15]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d102      	bne.n	800b3be <dir_find+0x4e>
 800b3b8:	2304      	movs	r3, #4
 800b3ba:	75fb      	strb	r3, [r7, #23]
 800b3bc:	e028      	b.n	800b410 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	6a1b      	ldr	r3, [r3, #32]
 800b3c2:	330b      	adds	r3, #11
 800b3c4:	781b      	ldrb	r3, [r3, #0]
 800b3c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a1b      	ldr	r3, [r3, #32]
 800b3d4:	330b      	adds	r3, #11
 800b3d6:	781b      	ldrb	r3, [r3, #0]
 800b3d8:	f003 0308 	and.w	r3, r3, #8
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d10a      	bne.n	800b3f6 <dir_find+0x86>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6a18      	ldr	r0, [r3, #32]
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	3324      	adds	r3, #36	@ 0x24
 800b3e8:	220b      	movs	r2, #11
 800b3ea:	4619      	mov	r1, r3
 800b3ec:	f7ff f96a 	bl	800a6c4 <mem_cmp>
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d00b      	beq.n	800b40e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	6878      	ldr	r0, [r7, #4]
 800b3fa:	f7ff fe6e 	bl	800b0da <dir_next>
 800b3fe:	4603      	mov	r3, r0
 800b400:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800b402:	7dfb      	ldrb	r3, [r7, #23]
 800b404:	2b00      	cmp	r3, #0
 800b406:	d0c5      	beq.n	800b394 <dir_find+0x24>
 800b408:	e002      	b.n	800b410 <dir_find+0xa0>
		if (res != FR_OK) break;
 800b40a:	bf00      	nop
 800b40c:	e000      	b.n	800b410 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800b40e:	bf00      	nop

	return res;
 800b410:	7dfb      	ldrb	r3, [r7, #23]
}
 800b412:	4618      	mov	r0, r3
 800b414:	3718      	adds	r7, #24
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}

0800b41a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800b41a:	b580      	push	{r7, lr}
 800b41c:	b084      	sub	sp, #16
 800b41e:	af00      	add	r7, sp, #0
 800b420:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800b428:	2101      	movs	r1, #1
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	f7ff ff1a 	bl	800b264 <dir_alloc>
 800b430:	4603      	mov	r3, r0
 800b432:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800b434:	7bfb      	ldrb	r3, [r7, #15]
 800b436:	2b00      	cmp	r3, #0
 800b438:	d11c      	bne.n	800b474 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	69db      	ldr	r3, [r3, #28]
 800b43e:	4619      	mov	r1, r3
 800b440:	68b8      	ldr	r0, [r7, #8]
 800b442:	f7ff faf5 	bl	800aa30 <move_window>
 800b446:	4603      	mov	r3, r0
 800b448:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800b44a:	7bfb      	ldrb	r3, [r7, #15]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d111      	bne.n	800b474 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	6a1b      	ldr	r3, [r3, #32]
 800b454:	2220      	movs	r2, #32
 800b456:	2100      	movs	r1, #0
 800b458:	4618      	mov	r0, r3
 800b45a:	f7ff f918 	bl	800a68e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	6a18      	ldr	r0, [r3, #32]
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	3324      	adds	r3, #36	@ 0x24
 800b466:	220b      	movs	r2, #11
 800b468:	4619      	mov	r1, r3
 800b46a:	f7ff f8ef 	bl	800a64c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	2201      	movs	r2, #1
 800b472:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800b474:	7bfb      	ldrb	r3, [r7, #15]
}
 800b476:	4618      	mov	r0, r3
 800b478:	3710      	adds	r7, #16
 800b47a:	46bd      	mov	sp, r7
 800b47c:	bd80      	pop	{r7, pc}
	...

0800b480 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800b480:	b580      	push	{r7, lr}
 800b482:	b088      	sub	sp, #32
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
 800b488:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	60fb      	str	r3, [r7, #12]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	3324      	adds	r3, #36	@ 0x24
 800b494:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800b496:	220b      	movs	r2, #11
 800b498:	2120      	movs	r1, #32
 800b49a:	68b8      	ldr	r0, [r7, #8]
 800b49c:	f7ff f8f7 	bl	800a68e <mem_set>
	si = i = 0; ni = 8;
 800b4a0:	2300      	movs	r3, #0
 800b4a2:	613b      	str	r3, [r7, #16]
 800b4a4:	693b      	ldr	r3, [r7, #16]
 800b4a6:	61fb      	str	r3, [r7, #28]
 800b4a8:	2308      	movs	r3, #8
 800b4aa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800b4ac:	69fb      	ldr	r3, [r7, #28]
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	61fa      	str	r2, [r7, #28]
 800b4b2:	68fa      	ldr	r2, [r7, #12]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	781b      	ldrb	r3, [r3, #0]
 800b4b8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b4ba:	7efb      	ldrb	r3, [r7, #27]
 800b4bc:	2b20      	cmp	r3, #32
 800b4be:	d94e      	bls.n	800b55e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800b4c0:	7efb      	ldrb	r3, [r7, #27]
 800b4c2:	2b2f      	cmp	r3, #47	@ 0x2f
 800b4c4:	d006      	beq.n	800b4d4 <create_name+0x54>
 800b4c6:	7efb      	ldrb	r3, [r7, #27]
 800b4c8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b4ca:	d110      	bne.n	800b4ee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800b4cc:	e002      	b.n	800b4d4 <create_name+0x54>
 800b4ce:	69fb      	ldr	r3, [r7, #28]
 800b4d0:	3301      	adds	r3, #1
 800b4d2:	61fb      	str	r3, [r7, #28]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	69fb      	ldr	r3, [r7, #28]
 800b4d8:	4413      	add	r3, r2
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	2b2f      	cmp	r3, #47	@ 0x2f
 800b4de:	d0f6      	beq.n	800b4ce <create_name+0x4e>
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	69fb      	ldr	r3, [r7, #28]
 800b4e4:	4413      	add	r3, r2
 800b4e6:	781b      	ldrb	r3, [r3, #0]
 800b4e8:	2b5c      	cmp	r3, #92	@ 0x5c
 800b4ea:	d0f0      	beq.n	800b4ce <create_name+0x4e>
			break;
 800b4ec:	e038      	b.n	800b560 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800b4ee:	7efb      	ldrb	r3, [r7, #27]
 800b4f0:	2b2e      	cmp	r3, #46	@ 0x2e
 800b4f2:	d003      	beq.n	800b4fc <create_name+0x7c>
 800b4f4:	693a      	ldr	r2, [r7, #16]
 800b4f6:	697b      	ldr	r3, [r7, #20]
 800b4f8:	429a      	cmp	r2, r3
 800b4fa:	d30c      	bcc.n	800b516 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	2b0b      	cmp	r3, #11
 800b500:	d002      	beq.n	800b508 <create_name+0x88>
 800b502:	7efb      	ldrb	r3, [r7, #27]
 800b504:	2b2e      	cmp	r3, #46	@ 0x2e
 800b506:	d001      	beq.n	800b50c <create_name+0x8c>
 800b508:	2306      	movs	r3, #6
 800b50a:	e044      	b.n	800b596 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800b50c:	2308      	movs	r3, #8
 800b50e:	613b      	str	r3, [r7, #16]
 800b510:	230b      	movs	r3, #11
 800b512:	617b      	str	r3, [r7, #20]
			continue;
 800b514:	e022      	b.n	800b55c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800b516:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	da04      	bge.n	800b528 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800b51e:	7efb      	ldrb	r3, [r7, #27]
 800b520:	3b80      	subs	r3, #128	@ 0x80
 800b522:	4a1f      	ldr	r2, [pc, #124]	@ (800b5a0 <create_name+0x120>)
 800b524:	5cd3      	ldrb	r3, [r2, r3]
 800b526:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800b528:	7efb      	ldrb	r3, [r7, #27]
 800b52a:	4619      	mov	r1, r3
 800b52c:	481d      	ldr	r0, [pc, #116]	@ (800b5a4 <create_name+0x124>)
 800b52e:	f7ff f8f0 	bl	800a712 <chk_chr>
 800b532:	4603      	mov	r3, r0
 800b534:	2b00      	cmp	r3, #0
 800b536:	d001      	beq.n	800b53c <create_name+0xbc>
 800b538:	2306      	movs	r3, #6
 800b53a:	e02c      	b.n	800b596 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800b53c:	7efb      	ldrb	r3, [r7, #27]
 800b53e:	2b60      	cmp	r3, #96	@ 0x60
 800b540:	d905      	bls.n	800b54e <create_name+0xce>
 800b542:	7efb      	ldrb	r3, [r7, #27]
 800b544:	2b7a      	cmp	r3, #122	@ 0x7a
 800b546:	d802      	bhi.n	800b54e <create_name+0xce>
 800b548:	7efb      	ldrb	r3, [r7, #27]
 800b54a:	3b20      	subs	r3, #32
 800b54c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800b54e:	693b      	ldr	r3, [r7, #16]
 800b550:	1c5a      	adds	r2, r3, #1
 800b552:	613a      	str	r2, [r7, #16]
 800b554:	68ba      	ldr	r2, [r7, #8]
 800b556:	4413      	add	r3, r2
 800b558:	7efa      	ldrb	r2, [r7, #27]
 800b55a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800b55c:	e7a6      	b.n	800b4ac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800b55e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800b560:	68fa      	ldr	r2, [r7, #12]
 800b562:	69fb      	ldr	r3, [r7, #28]
 800b564:	441a      	add	r2, r3
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	d101      	bne.n	800b574 <create_name+0xf4>
 800b570:	2306      	movs	r3, #6
 800b572:	e010      	b.n	800b596 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	781b      	ldrb	r3, [r3, #0]
 800b578:	2be5      	cmp	r3, #229	@ 0xe5
 800b57a:	d102      	bne.n	800b582 <create_name+0x102>
 800b57c:	68bb      	ldr	r3, [r7, #8]
 800b57e:	2205      	movs	r2, #5
 800b580:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800b582:	7efb      	ldrb	r3, [r7, #27]
 800b584:	2b20      	cmp	r3, #32
 800b586:	d801      	bhi.n	800b58c <create_name+0x10c>
 800b588:	2204      	movs	r2, #4
 800b58a:	e000      	b.n	800b58e <create_name+0x10e>
 800b58c:	2200      	movs	r2, #0
 800b58e:	68bb      	ldr	r3, [r7, #8]
 800b590:	330b      	adds	r3, #11
 800b592:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800b594:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800b596:	4618      	mov	r0, r3
 800b598:	3720      	adds	r7, #32
 800b59a:	46bd      	mov	sp, r7
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	bf00      	nop
 800b5a0:	080109f0 	.word	0x080109f0
 800b5a4:	0801096c 	.word	0x0801096c

0800b5a8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800b5a8:	b580      	push	{r7, lr}
 800b5aa:	b086      	sub	sp, #24
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800b5b6:	693b      	ldr	r3, [r7, #16]
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800b5bc:	e002      	b.n	800b5c4 <follow_path+0x1c>
 800b5be:	683b      	ldr	r3, [r7, #0]
 800b5c0:	3301      	adds	r3, #1
 800b5c2:	603b      	str	r3, [r7, #0]
 800b5c4:	683b      	ldr	r3, [r7, #0]
 800b5c6:	781b      	ldrb	r3, [r3, #0]
 800b5c8:	2b2f      	cmp	r3, #47	@ 0x2f
 800b5ca:	d0f8      	beq.n	800b5be <follow_path+0x16>
 800b5cc:	683b      	ldr	r3, [r7, #0]
 800b5ce:	781b      	ldrb	r3, [r3, #0]
 800b5d0:	2b5c      	cmp	r3, #92	@ 0x5c
 800b5d2:	d0f4      	beq.n	800b5be <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	781b      	ldrb	r3, [r3, #0]
 800b5de:	2b1f      	cmp	r3, #31
 800b5e0:	d80a      	bhi.n	800b5f8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2280      	movs	r2, #128	@ 0x80
 800b5e6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800b5ea:	2100      	movs	r1, #0
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	f7ff fcf9 	bl	800afe4 <dir_sdi>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	75fb      	strb	r3, [r7, #23]
 800b5f6:	e043      	b.n	800b680 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b5f8:	463b      	mov	r3, r7
 800b5fa:	4619      	mov	r1, r3
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f7ff ff3f 	bl	800b480 <create_name>
 800b602:	4603      	mov	r3, r0
 800b604:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d134      	bne.n	800b676 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800b60c:	6878      	ldr	r0, [r7, #4]
 800b60e:	f7ff feaf 	bl	800b370 <dir_find>
 800b612:	4603      	mov	r3, r0
 800b614:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800b61c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800b61e:	7dfb      	ldrb	r3, [r7, #23]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d00a      	beq.n	800b63a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800b624:	7dfb      	ldrb	r3, [r7, #23]
 800b626:	2b04      	cmp	r3, #4
 800b628:	d127      	bne.n	800b67a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800b62a:	7afb      	ldrb	r3, [r7, #11]
 800b62c:	f003 0304 	and.w	r3, r3, #4
 800b630:	2b00      	cmp	r3, #0
 800b632:	d122      	bne.n	800b67a <follow_path+0xd2>
 800b634:	2305      	movs	r3, #5
 800b636:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800b638:	e01f      	b.n	800b67a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b63a:	7afb      	ldrb	r3, [r7, #11]
 800b63c:	f003 0304 	and.w	r3, r3, #4
 800b640:	2b00      	cmp	r3, #0
 800b642:	d11c      	bne.n	800b67e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	799b      	ldrb	r3, [r3, #6]
 800b648:	f003 0310 	and.w	r3, r3, #16
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d102      	bne.n	800b656 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800b650:	2305      	movs	r3, #5
 800b652:	75fb      	strb	r3, [r7, #23]
 800b654:	e014      	b.n	800b680 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	695b      	ldr	r3, [r3, #20]
 800b660:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b664:	4413      	add	r3, r2
 800b666:	4619      	mov	r1, r3
 800b668:	68f8      	ldr	r0, [r7, #12]
 800b66a:	f7ff fe42 	bl	800b2f2 <ld_clust>
 800b66e:	4602      	mov	r2, r0
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800b674:	e7c0      	b.n	800b5f8 <follow_path+0x50>
			if (res != FR_OK) break;
 800b676:	bf00      	nop
 800b678:	e002      	b.n	800b680 <follow_path+0xd8>
				break;
 800b67a:	bf00      	nop
 800b67c:	e000      	b.n	800b680 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800b67e:	bf00      	nop
			}
		}
	}

	return res;
 800b680:	7dfb      	ldrb	r3, [r7, #23]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3718      	adds	r7, #24
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}

0800b68a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800b68a:	b480      	push	{r7}
 800b68c:	b087      	sub	sp, #28
 800b68e:	af00      	add	r7, sp, #0
 800b690:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800b692:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b696:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d031      	beq.n	800b704 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	617b      	str	r3, [r7, #20]
 800b6a6:	e002      	b.n	800b6ae <get_ldnumber+0x24>
 800b6a8:	697b      	ldr	r3, [r7, #20]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	697b      	ldr	r3, [r7, #20]
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	2b20      	cmp	r3, #32
 800b6b4:	d903      	bls.n	800b6be <get_ldnumber+0x34>
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2b3a      	cmp	r3, #58	@ 0x3a
 800b6bc:	d1f4      	bne.n	800b6a8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800b6be:	697b      	ldr	r3, [r7, #20]
 800b6c0:	781b      	ldrb	r3, [r3, #0]
 800b6c2:	2b3a      	cmp	r3, #58	@ 0x3a
 800b6c4:	d11c      	bne.n	800b700 <get_ldnumber+0x76>
			tp = *path;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800b6cc:	68fb      	ldr	r3, [r7, #12]
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	60fa      	str	r2, [r7, #12]
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	3b30      	subs	r3, #48	@ 0x30
 800b6d6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800b6d8:	68bb      	ldr	r3, [r7, #8]
 800b6da:	2b09      	cmp	r3, #9
 800b6dc:	d80e      	bhi.n	800b6fc <get_ldnumber+0x72>
 800b6de:	68fa      	ldr	r2, [r7, #12]
 800b6e0:	697b      	ldr	r3, [r7, #20]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d10a      	bne.n	800b6fc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d107      	bne.n	800b6fc <get_ldnumber+0x72>
					vol = (int)i;
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	3301      	adds	r3, #1
 800b6f4:	617b      	str	r3, [r7, #20]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	697a      	ldr	r2, [r7, #20]
 800b6fa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800b6fc:	693b      	ldr	r3, [r7, #16]
 800b6fe:	e002      	b.n	800b706 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800b700:	2300      	movs	r3, #0
 800b702:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800b704:	693b      	ldr	r3, [r7, #16]
}
 800b706:	4618      	mov	r0, r3
 800b708:	371c      	adds	r7, #28
 800b70a:	46bd      	mov	sp, r7
 800b70c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b710:	4770      	bx	lr
	...

0800b714 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b082      	sub	sp, #8
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
 800b71c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	70da      	strb	r2, [r3, #3]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b72a:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800b72c:	6839      	ldr	r1, [r7, #0]
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7ff f97e 	bl	800aa30 <move_window>
 800b734:	4603      	mov	r3, r0
 800b736:	2b00      	cmp	r3, #0
 800b738:	d001      	beq.n	800b73e <check_fs+0x2a>
 800b73a:	2304      	movs	r3, #4
 800b73c:	e038      	b.n	800b7b0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	3330      	adds	r3, #48	@ 0x30
 800b742:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800b746:	4618      	mov	r0, r3
 800b748:	f7fe fefe 	bl	800a548 <ld_word>
 800b74c:	4603      	mov	r3, r0
 800b74e:	461a      	mov	r2, r3
 800b750:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800b754:	429a      	cmp	r2, r3
 800b756:	d001      	beq.n	800b75c <check_fs+0x48>
 800b758:	2303      	movs	r3, #3
 800b75a:	e029      	b.n	800b7b0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b762:	2be9      	cmp	r3, #233	@ 0xe9
 800b764:	d009      	beq.n	800b77a <check_fs+0x66>
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800b76c:	2beb      	cmp	r3, #235	@ 0xeb
 800b76e:	d11e      	bne.n	800b7ae <check_fs+0x9a>
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800b776:	2b90      	cmp	r3, #144	@ 0x90
 800b778:	d119      	bne.n	800b7ae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	3330      	adds	r3, #48	@ 0x30
 800b77e:	3336      	adds	r3, #54	@ 0x36
 800b780:	4618      	mov	r0, r3
 800b782:	f7fe fef9 	bl	800a578 <ld_dword>
 800b786:	4603      	mov	r3, r0
 800b788:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800b78c:	4a0a      	ldr	r2, [pc, #40]	@ (800b7b8 <check_fs+0xa4>)
 800b78e:	4293      	cmp	r3, r2
 800b790:	d101      	bne.n	800b796 <check_fs+0x82>
 800b792:	2300      	movs	r3, #0
 800b794:	e00c      	b.n	800b7b0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	3330      	adds	r3, #48	@ 0x30
 800b79a:	3352      	adds	r3, #82	@ 0x52
 800b79c:	4618      	mov	r0, r3
 800b79e:	f7fe feeb 	bl	800a578 <ld_dword>
 800b7a2:	4603      	mov	r3, r0
 800b7a4:	4a05      	ldr	r2, [pc, #20]	@ (800b7bc <check_fs+0xa8>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d101      	bne.n	800b7ae <check_fs+0x9a>
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	e000      	b.n	800b7b0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800b7ae:	2302      	movs	r3, #2
}
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	3708      	adds	r7, #8
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	00544146 	.word	0x00544146
 800b7bc:	33544146 	.word	0x33544146

0800b7c0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b096      	sub	sp, #88	@ 0x58
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	60f8      	str	r0, [r7, #12]
 800b7c8:	60b9      	str	r1, [r7, #8]
 800b7ca:	4613      	mov	r3, r2
 800b7cc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800b7d4:	68f8      	ldr	r0, [r7, #12]
 800b7d6:	f7ff ff58 	bl	800b68a <get_ldnumber>
 800b7da:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800b7dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	da01      	bge.n	800b7e6 <find_volume+0x26>
 800b7e2:	230b      	movs	r3, #11
 800b7e4:	e22d      	b.n	800bc42 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800b7e6:	4aa1      	ldr	r2, [pc, #644]	@ (800ba6c <find_volume+0x2ac>)
 800b7e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ee:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800b7f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d101      	bne.n	800b7fa <find_volume+0x3a>
 800b7f6:	230c      	movs	r3, #12
 800b7f8:	e223      	b.n	800bc42 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800b7fa:	68bb      	ldr	r3, [r7, #8]
 800b7fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7fe:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800b800:	79fb      	ldrb	r3, [r7, #7]
 800b802:	f023 0301 	bic.w	r3, r3, #1
 800b806:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800b808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b80a:	781b      	ldrb	r3, [r3, #0]
 800b80c:	2b00      	cmp	r3, #0
 800b80e:	d01a      	beq.n	800b846 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800b810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b812:	785b      	ldrb	r3, [r3, #1]
 800b814:	4618      	mov	r0, r3
 800b816:	f7fe fe17 	bl	800a448 <disk_status>
 800b81a:	4603      	mov	r3, r0
 800b81c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800b820:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b824:	f003 0301 	and.w	r3, r3, #1
 800b828:	2b00      	cmp	r3, #0
 800b82a:	d10c      	bne.n	800b846 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800b82c:	79fb      	ldrb	r3, [r7, #7]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	d007      	beq.n	800b842 <find_volume+0x82>
 800b832:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b836:	f003 0304 	and.w	r3, r3, #4
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d001      	beq.n	800b842 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800b83e:	230a      	movs	r3, #10
 800b840:	e1ff      	b.n	800bc42 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800b842:	2300      	movs	r3, #0
 800b844:	e1fd      	b.n	800bc42 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800b846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b848:	2200      	movs	r2, #0
 800b84a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800b84c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b84e:	b2da      	uxtb	r2, r3
 800b850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b852:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800b854:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b856:	785b      	ldrb	r3, [r3, #1]
 800b858:	4618      	mov	r0, r3
 800b85a:	f7fe fe0f 	bl	800a47c <disk_initialize>
 800b85e:	4603      	mov	r3, r0
 800b860:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800b864:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b868:	f003 0301 	and.w	r3, r3, #1
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d001      	beq.n	800b874 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800b870:	2303      	movs	r3, #3
 800b872:	e1e6      	b.n	800bc42 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800b874:	79fb      	ldrb	r3, [r7, #7]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d007      	beq.n	800b88a <find_volume+0xca>
 800b87a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b87e:	f003 0304 	and.w	r3, r3, #4
 800b882:	2b00      	cmp	r3, #0
 800b884:	d001      	beq.n	800b88a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800b886:	230a      	movs	r3, #10
 800b888:	e1db      	b.n	800bc42 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800b88a:	2300      	movs	r3, #0
 800b88c:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800b88e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b890:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b892:	f7ff ff3f 	bl	800b714 <check_fs>
 800b896:	4603      	mov	r3, r0
 800b898:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800b89c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b8a0:	2b02      	cmp	r3, #2
 800b8a2:	d149      	bne.n	800b938 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8a8:	e01e      	b.n	800b8e8 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800b8aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b8ac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800b8b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8b2:	011b      	lsls	r3, r3, #4
 800b8b4:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800b8b8:	4413      	add	r3, r2
 800b8ba:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800b8bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8be:	3304      	adds	r3, #4
 800b8c0:	781b      	ldrb	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d006      	beq.n	800b8d4 <find_volume+0x114>
 800b8c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b8c8:	3308      	adds	r3, #8
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	f7fe fe54 	bl	800a578 <ld_dword>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	e000      	b.n	800b8d6 <find_volume+0x116>
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8d8:	009b      	lsls	r3, r3, #2
 800b8da:	3358      	adds	r3, #88	@ 0x58
 800b8dc:	443b      	add	r3, r7
 800b8de:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800b8e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	643b      	str	r3, [r7, #64]	@ 0x40
 800b8e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d9dd      	bls.n	800b8aa <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800b8f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d002      	beq.n	800b8fe <find_volume+0x13e>
 800b8f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b8fa:	3b01      	subs	r3, #1
 800b8fc:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800b8fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b900:	009b      	lsls	r3, r3, #2
 800b902:	3358      	adds	r3, #88	@ 0x58
 800b904:	443b      	add	r3, r7
 800b906:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800b90a:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800b90c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d005      	beq.n	800b91e <find_volume+0x15e>
 800b912:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800b914:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800b916:	f7ff fefd 	bl	800b714 <check_fs>
 800b91a:	4603      	mov	r3, r0
 800b91c:	e000      	b.n	800b920 <find_volume+0x160>
 800b91e:	2303      	movs	r3, #3
 800b920:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800b924:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b928:	2b01      	cmp	r3, #1
 800b92a:	d905      	bls.n	800b938 <find_volume+0x178>
 800b92c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b92e:	3301      	adds	r3, #1
 800b930:	643b      	str	r3, [r7, #64]	@ 0x40
 800b932:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b934:	2b03      	cmp	r3, #3
 800b936:	d9e2      	bls.n	800b8fe <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800b938:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b93c:	2b04      	cmp	r3, #4
 800b93e:	d101      	bne.n	800b944 <find_volume+0x184>
 800b940:	2301      	movs	r3, #1
 800b942:	e17e      	b.n	800bc42 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800b944:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800b948:	2b01      	cmp	r3, #1
 800b94a:	d901      	bls.n	800b950 <find_volume+0x190>
 800b94c:	230d      	movs	r3, #13
 800b94e:	e178      	b.n	800bc42 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800b950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b952:	3330      	adds	r3, #48	@ 0x30
 800b954:	330b      	adds	r3, #11
 800b956:	4618      	mov	r0, r3
 800b958:	f7fe fdf6 	bl	800a548 <ld_word>
 800b95c:	4603      	mov	r3, r0
 800b95e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b962:	d001      	beq.n	800b968 <find_volume+0x1a8>
 800b964:	230d      	movs	r3, #13
 800b966:	e16c      	b.n	800bc42 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800b968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b96a:	3330      	adds	r3, #48	@ 0x30
 800b96c:	3316      	adds	r3, #22
 800b96e:	4618      	mov	r0, r3
 800b970:	f7fe fdea 	bl	800a548 <ld_word>
 800b974:	4603      	mov	r3, r0
 800b976:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800b978:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d106      	bne.n	800b98c <find_volume+0x1cc>
 800b97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b980:	3330      	adds	r3, #48	@ 0x30
 800b982:	3324      	adds	r3, #36	@ 0x24
 800b984:	4618      	mov	r0, r3
 800b986:	f7fe fdf7 	bl	800a578 <ld_dword>
 800b98a:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800b98c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b98e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b990:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800b992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b994:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800b998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99a:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800b99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b99e:	789b      	ldrb	r3, [r3, #2]
 800b9a0:	2b01      	cmp	r3, #1
 800b9a2:	d005      	beq.n	800b9b0 <find_volume+0x1f0>
 800b9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9a6:	789b      	ldrb	r3, [r3, #2]
 800b9a8:	2b02      	cmp	r3, #2
 800b9aa:	d001      	beq.n	800b9b0 <find_volume+0x1f0>
 800b9ac:	230d      	movs	r3, #13
 800b9ae:	e148      	b.n	800bc42 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800b9b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9b2:	789b      	ldrb	r3, [r3, #2]
 800b9b4:	461a      	mov	r2, r3
 800b9b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9b8:	fb02 f303 	mul.w	r3, r2, r3
 800b9bc:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800b9be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800b9c4:	461a      	mov	r2, r3
 800b9c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9c8:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800b9ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9cc:	895b      	ldrh	r3, [r3, #10]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d008      	beq.n	800b9e4 <find_volume+0x224>
 800b9d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d4:	895b      	ldrh	r3, [r3, #10]
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9da:	895b      	ldrh	r3, [r3, #10]
 800b9dc:	3b01      	subs	r3, #1
 800b9de:	4013      	ands	r3, r2
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d001      	beq.n	800b9e8 <find_volume+0x228>
 800b9e4:	230d      	movs	r3, #13
 800b9e6:	e12c      	b.n	800bc42 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800b9e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9ea:	3330      	adds	r3, #48	@ 0x30
 800b9ec:	3311      	adds	r3, #17
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe fdaa 	bl	800a548 <ld_word>
 800b9f4:	4603      	mov	r3, r0
 800b9f6:	461a      	mov	r2, r3
 800b9f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fa:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800b9fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9fe:	891b      	ldrh	r3, [r3, #8]
 800ba00:	f003 030f 	and.w	r3, r3, #15
 800ba04:	b29b      	uxth	r3, r3
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d001      	beq.n	800ba0e <find_volume+0x24e>
 800ba0a:	230d      	movs	r3, #13
 800ba0c:	e119      	b.n	800bc42 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800ba0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba10:	3330      	adds	r3, #48	@ 0x30
 800ba12:	3313      	adds	r3, #19
 800ba14:	4618      	mov	r0, r3
 800ba16:	f7fe fd97 	bl	800a548 <ld_word>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ba1e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d106      	bne.n	800ba32 <find_volume+0x272>
 800ba24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba26:	3330      	adds	r3, #48	@ 0x30
 800ba28:	3320      	adds	r3, #32
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fe fda4 	bl	800a578 <ld_dword>
 800ba30:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ba32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ba34:	3330      	adds	r3, #48	@ 0x30
 800ba36:	330e      	adds	r3, #14
 800ba38:	4618      	mov	r0, r3
 800ba3a:	f7fe fd85 	bl	800a548 <ld_word>
 800ba3e:	4603      	mov	r3, r0
 800ba40:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ba42:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d101      	bne.n	800ba4c <find_volume+0x28c>
 800ba48:	230d      	movs	r3, #13
 800ba4a:	e0fa      	b.n	800bc42 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ba4c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ba4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ba50:	4413      	add	r3, r2
 800ba52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba54:	8912      	ldrh	r2, [r2, #8]
 800ba56:	0912      	lsrs	r2, r2, #4
 800ba58:	b292      	uxth	r2, r2
 800ba5a:	4413      	add	r3, r2
 800ba5c:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ba5e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d204      	bcs.n	800ba70 <find_volume+0x2b0>
 800ba66:	230d      	movs	r3, #13
 800ba68:	e0eb      	b.n	800bc42 <find_volume+0x482>
 800ba6a:	bf00      	nop
 800ba6c:	20001220 	.word	0x20001220
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ba70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba74:	1ad3      	subs	r3, r2, r3
 800ba76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ba78:	8952      	ldrh	r2, [r2, #10]
 800ba7a:	fbb3 f3f2 	udiv	r3, r3, r2
 800ba7e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ba80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d101      	bne.n	800ba8a <find_volume+0x2ca>
 800ba86:	230d      	movs	r3, #13
 800ba88:	e0db      	b.n	800bc42 <find_volume+0x482>
		fmt = FS_FAT32;
 800ba8a:	2303      	movs	r3, #3
 800ba8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ba90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba92:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800ba96:	4293      	cmp	r3, r2
 800ba98:	d802      	bhi.n	800baa0 <find_volume+0x2e0>
 800ba9a:	2302      	movs	r3, #2
 800ba9c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800baa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800baa2:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800baa6:	4293      	cmp	r3, r2
 800baa8:	d802      	bhi.n	800bab0 <find_volume+0x2f0>
 800baaa:	2301      	movs	r3, #1
 800baac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800bab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bab2:	1c9a      	adds	r2, r3, #2
 800bab4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab6:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800bab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800babc:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800babe:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800bac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bac2:	441a      	add	r2, r3
 800bac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac6:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800bac8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800baca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bacc:	441a      	add	r2, r3
 800bace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad0:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800bad2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bad6:	2b03      	cmp	r3, #3
 800bad8:	d11e      	bne.n	800bb18 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800bada:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800badc:	3330      	adds	r3, #48	@ 0x30
 800bade:	332a      	adds	r3, #42	@ 0x2a
 800bae0:	4618      	mov	r0, r3
 800bae2:	f7fe fd31 	bl	800a548 <ld_word>
 800bae6:	4603      	mov	r3, r0
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d001      	beq.n	800baf0 <find_volume+0x330>
 800baec:	230d      	movs	r3, #13
 800baee:	e0a8      	b.n	800bc42 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800baf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baf2:	891b      	ldrh	r3, [r3, #8]
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d001      	beq.n	800bafc <find_volume+0x33c>
 800baf8:	230d      	movs	r3, #13
 800bafa:	e0a2      	b.n	800bc42 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800bafc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bafe:	3330      	adds	r3, #48	@ 0x30
 800bb00:	332c      	adds	r3, #44	@ 0x2c
 800bb02:	4618      	mov	r0, r3
 800bb04:	f7fe fd38 	bl	800a578 <ld_dword>
 800bb08:	4602      	mov	r2, r0
 800bb0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb0c:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800bb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb10:	695b      	ldr	r3, [r3, #20]
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	647b      	str	r3, [r7, #68]	@ 0x44
 800bb16:	e01f      	b.n	800bb58 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800bb18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb1a:	891b      	ldrh	r3, [r3, #8]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d101      	bne.n	800bb24 <find_volume+0x364>
 800bb20:	230d      	movs	r3, #13
 800bb22:	e08e      	b.n	800bc42 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800bb24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb26:	6a1a      	ldr	r2, [r3, #32]
 800bb28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bb2a:	441a      	add	r2, r3
 800bb2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb2e:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800bb30:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bb34:	2b02      	cmp	r3, #2
 800bb36:	d103      	bne.n	800bb40 <find_volume+0x380>
 800bb38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb3a:	695b      	ldr	r3, [r3, #20]
 800bb3c:	005b      	lsls	r3, r3, #1
 800bb3e:	e00a      	b.n	800bb56 <find_volume+0x396>
 800bb40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb42:	695a      	ldr	r2, [r3, #20]
 800bb44:	4613      	mov	r3, r2
 800bb46:	005b      	lsls	r3, r3, #1
 800bb48:	4413      	add	r3, r2
 800bb4a:	085a      	lsrs	r2, r3, #1
 800bb4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb4e:	695b      	ldr	r3, [r3, #20]
 800bb50:	f003 0301 	and.w	r3, r3, #1
 800bb54:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800bb56:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800bb58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5a:	699a      	ldr	r2, [r3, #24]
 800bb5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800bb5e:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800bb62:	0a5b      	lsrs	r3, r3, #9
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d201      	bcs.n	800bb6c <find_volume+0x3ac>
 800bb68:	230d      	movs	r3, #13
 800bb6a:	e06a      	b.n	800bc42 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800bb6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb6e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bb72:	611a      	str	r2, [r3, #16]
 800bb74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb76:	691a      	ldr	r2, [r3, #16]
 800bb78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7a:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800bb7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb7e:	2280      	movs	r2, #128	@ 0x80
 800bb80:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800bb82:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800bb86:	2b03      	cmp	r3, #3
 800bb88:	d149      	bne.n	800bc1e <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800bb8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb8c:	3330      	adds	r3, #48	@ 0x30
 800bb8e:	3330      	adds	r3, #48	@ 0x30
 800bb90:	4618      	mov	r0, r3
 800bb92:	f7fe fcd9 	bl	800a548 <ld_word>
 800bb96:	4603      	mov	r3, r0
 800bb98:	2b01      	cmp	r3, #1
 800bb9a:	d140      	bne.n	800bc1e <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800bb9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800bb9e:	3301      	adds	r3, #1
 800bba0:	4619      	mov	r1, r3
 800bba2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bba4:	f7fe ff44 	bl	800aa30 <move_window>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d137      	bne.n	800bc1e <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800bbae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb0:	2200      	movs	r2, #0
 800bbb2:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800bbb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbb6:	3330      	adds	r3, #48	@ 0x30
 800bbb8:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800bbbc:	4618      	mov	r0, r3
 800bbbe:	f7fe fcc3 	bl	800a548 <ld_word>
 800bbc2:	4603      	mov	r3, r0
 800bbc4:	461a      	mov	r2, r3
 800bbc6:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d127      	bne.n	800bc1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800bbce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbd0:	3330      	adds	r3, #48	@ 0x30
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7fe fcd0 	bl	800a578 <ld_dword>
 800bbd8:	4603      	mov	r3, r0
 800bbda:	4a1c      	ldr	r2, [pc, #112]	@ (800bc4c <find_volume+0x48c>)
 800bbdc:	4293      	cmp	r3, r2
 800bbde:	d11e      	bne.n	800bc1e <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800bbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbe2:	3330      	adds	r3, #48	@ 0x30
 800bbe4:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800bbe8:	4618      	mov	r0, r3
 800bbea:	f7fe fcc5 	bl	800a578 <ld_dword>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	4a17      	ldr	r2, [pc, #92]	@ (800bc50 <find_volume+0x490>)
 800bbf2:	4293      	cmp	r3, r2
 800bbf4:	d113      	bne.n	800bc1e <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800bbf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bbf8:	3330      	adds	r3, #48	@ 0x30
 800bbfa:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800bbfe:	4618      	mov	r0, r3
 800bc00:	f7fe fcba 	bl	800a578 <ld_dword>
 800bc04:	4602      	mov	r2, r0
 800bc06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc08:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800bc0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc0c:	3330      	adds	r3, #48	@ 0x30
 800bc0e:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7fe fcb0 	bl	800a578 <ld_dword>
 800bc18:	4602      	mov	r2, r0
 800bc1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc1c:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800bc1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc20:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800bc24:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800bc26:	4b0b      	ldr	r3, [pc, #44]	@ (800bc54 <find_volume+0x494>)
 800bc28:	881b      	ldrh	r3, [r3, #0]
 800bc2a:	3301      	adds	r3, #1
 800bc2c:	b29a      	uxth	r2, r3
 800bc2e:	4b09      	ldr	r3, [pc, #36]	@ (800bc54 <find_volume+0x494>)
 800bc30:	801a      	strh	r2, [r3, #0]
 800bc32:	4b08      	ldr	r3, [pc, #32]	@ (800bc54 <find_volume+0x494>)
 800bc34:	881a      	ldrh	r2, [r3, #0]
 800bc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bc38:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800bc3a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800bc3c:	f7fe fe90 	bl	800a960 <clear_lock>
#endif
	return FR_OK;
 800bc40:	2300      	movs	r3, #0
}
 800bc42:	4618      	mov	r0, r3
 800bc44:	3758      	adds	r7, #88	@ 0x58
 800bc46:	46bd      	mov	sp, r7
 800bc48:	bd80      	pop	{r7, pc}
 800bc4a:	bf00      	nop
 800bc4c:	41615252 	.word	0x41615252
 800bc50:	61417272 	.word	0x61417272
 800bc54:	20001224 	.word	0x20001224

0800bc58 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b088      	sub	sp, #32
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	4613      	mov	r3, r2
 800bc64:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800bc6a:	f107 0310 	add.w	r3, r7, #16
 800bc6e:	4618      	mov	r0, r3
 800bc70:	f7ff fd0b 	bl	800b68a <get_ldnumber>
 800bc74:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800bc76:	69fb      	ldr	r3, [r7, #28]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	da01      	bge.n	800bc80 <f_mount+0x28>
 800bc7c:	230b      	movs	r3, #11
 800bc7e:	e02b      	b.n	800bcd8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800bc80:	4a17      	ldr	r2, [pc, #92]	@ (800bce0 <f_mount+0x88>)
 800bc82:	69fb      	ldr	r3, [r7, #28]
 800bc84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bc88:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800bc8a:	69bb      	ldr	r3, [r7, #24]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d005      	beq.n	800bc9c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800bc90:	69b8      	ldr	r0, [r7, #24]
 800bc92:	f7fe fe65 	bl	800a960 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800bc96:	69bb      	ldr	r3, [r7, #24]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d002      	beq.n	800bca8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	2200      	movs	r2, #0
 800bca6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	490d      	ldr	r1, [pc, #52]	@ (800bce0 <f_mount+0x88>)
 800bcac:	69fb      	ldr	r3, [r7, #28]
 800bcae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d002      	beq.n	800bcbe <f_mount+0x66>
 800bcb8:	79fb      	ldrb	r3, [r7, #7]
 800bcba:	2b01      	cmp	r3, #1
 800bcbc:	d001      	beq.n	800bcc2 <f_mount+0x6a>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	e00a      	b.n	800bcd8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800bcc2:	f107 010c 	add.w	r1, r7, #12
 800bcc6:	f107 0308 	add.w	r3, r7, #8
 800bcca:	2200      	movs	r2, #0
 800bccc:	4618      	mov	r0, r3
 800bcce:	f7ff fd77 	bl	800b7c0 <find_volume>
 800bcd2:	4603      	mov	r3, r0
 800bcd4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800bcd6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3720      	adds	r7, #32
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20001220 	.word	0x20001220

0800bce4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b098      	sub	sp, #96	@ 0x60
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	60f8      	str	r0, [r7, #12]
 800bcec:	60b9      	str	r1, [r7, #8]
 800bcee:	4613      	mov	r3, r2
 800bcf0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d101      	bne.n	800bcfc <f_open+0x18>
 800bcf8:	2309      	movs	r3, #9
 800bcfa:	e1a9      	b.n	800c050 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800bcfc:	79fb      	ldrb	r3, [r7, #7]
 800bcfe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800bd02:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800bd04:	79fa      	ldrb	r2, [r7, #7]
 800bd06:	f107 0110 	add.w	r1, r7, #16
 800bd0a:	f107 0308 	add.w	r3, r7, #8
 800bd0e:	4618      	mov	r0, r3
 800bd10:	f7ff fd56 	bl	800b7c0 <find_volume>
 800bd14:	4603      	mov	r3, r0
 800bd16:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800bd1a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	f040 818d 	bne.w	800c03e <f_open+0x35a>
		dj.obj.fs = fs;
 800bd24:	693b      	ldr	r3, [r7, #16]
 800bd26:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	f107 0314 	add.w	r3, r7, #20
 800bd2e:	4611      	mov	r1, r2
 800bd30:	4618      	mov	r0, r3
 800bd32:	f7ff fc39 	bl	800b5a8 <follow_path>
 800bd36:	4603      	mov	r3, r0
 800bd38:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800bd3c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d118      	bne.n	800bd76 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800bd44:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800bd48:	b25b      	sxtb	r3, r3
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	da03      	bge.n	800bd56 <f_open+0x72>
				res = FR_INVALID_NAME;
 800bd4e:	2306      	movs	r3, #6
 800bd50:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bd54:	e00f      	b.n	800bd76 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bd56:	79fb      	ldrb	r3, [r7, #7]
 800bd58:	2b01      	cmp	r3, #1
 800bd5a:	bf8c      	ite	hi
 800bd5c:	2301      	movhi	r3, #1
 800bd5e:	2300      	movls	r3, #0
 800bd60:	b2db      	uxtb	r3, r3
 800bd62:	461a      	mov	r2, r3
 800bd64:	f107 0314 	add.w	r3, r7, #20
 800bd68:	4611      	mov	r1, r2
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7fe fcec 	bl	800a748 <chk_lock>
 800bd70:	4603      	mov	r3, r0
 800bd72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800bd76:	79fb      	ldrb	r3, [r7, #7]
 800bd78:	f003 031c 	and.w	r3, r3, #28
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d07f      	beq.n	800be80 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800bd80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d017      	beq.n	800bdb8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800bd88:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bd8c:	2b04      	cmp	r3, #4
 800bd8e:	d10e      	bne.n	800bdae <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800bd90:	f7fe fd36 	bl	800a800 <enq_lock>
 800bd94:	4603      	mov	r3, r0
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	d006      	beq.n	800bda8 <f_open+0xc4>
 800bd9a:	f107 0314 	add.w	r3, r7, #20
 800bd9e:	4618      	mov	r0, r3
 800bda0:	f7ff fb3b 	bl	800b41a <dir_register>
 800bda4:	4603      	mov	r3, r0
 800bda6:	e000      	b.n	800bdaa <f_open+0xc6>
 800bda8:	2312      	movs	r3, #18
 800bdaa:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800bdae:	79fb      	ldrb	r3, [r7, #7]
 800bdb0:	f043 0308 	orr.w	r3, r3, #8
 800bdb4:	71fb      	strb	r3, [r7, #7]
 800bdb6:	e010      	b.n	800bdda <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800bdb8:	7ebb      	ldrb	r3, [r7, #26]
 800bdba:	f003 0311 	and.w	r3, r3, #17
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d003      	beq.n	800bdca <f_open+0xe6>
					res = FR_DENIED;
 800bdc2:	2307      	movs	r3, #7
 800bdc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800bdc8:	e007      	b.n	800bdda <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800bdca:	79fb      	ldrb	r3, [r7, #7]
 800bdcc:	f003 0304 	and.w	r3, r3, #4
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d002      	beq.n	800bdda <f_open+0xf6>
 800bdd4:	2308      	movs	r3, #8
 800bdd6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800bdda:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d168      	bne.n	800beb4 <f_open+0x1d0>
 800bde2:	79fb      	ldrb	r3, [r7, #7]
 800bde4:	f003 0308 	and.w	r3, r3, #8
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d063      	beq.n	800beb4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800bdec:	f7fe face 	bl	800a38c <get_fattime>
 800bdf0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800bdf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdf4:	330e      	adds	r3, #14
 800bdf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800bdf8:	4618      	mov	r0, r3
 800bdfa:	f7fe fbfb 	bl	800a5f4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800bdfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be00:	3316      	adds	r3, #22
 800be02:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800be04:	4618      	mov	r0, r3
 800be06:	f7fe fbf5 	bl	800a5f4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800be0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be0c:	330b      	adds	r3, #11
 800be0e:	2220      	movs	r2, #32
 800be10:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800be12:	693b      	ldr	r3, [r7, #16]
 800be14:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800be16:	4611      	mov	r1, r2
 800be18:	4618      	mov	r0, r3
 800be1a:	f7ff fa6a 	bl	800b2f2 <ld_clust>
 800be1e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800be24:	2200      	movs	r2, #0
 800be26:	4618      	mov	r0, r3
 800be28:	f7ff fa82 	bl	800b330 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800be2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be2e:	331c      	adds	r3, #28
 800be30:	2100      	movs	r1, #0
 800be32:	4618      	mov	r0, r3
 800be34:	f7fe fbde 	bl	800a5f4 <st_dword>
					fs->wflag = 1;
 800be38:	693b      	ldr	r3, [r7, #16]
 800be3a:	2201      	movs	r2, #1
 800be3c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800be3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be40:	2b00      	cmp	r3, #0
 800be42:	d037      	beq.n	800beb4 <f_open+0x1d0>
						dw = fs->winsect;
 800be44:	693b      	ldr	r3, [r7, #16]
 800be46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800be48:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800be4a:	f107 0314 	add.w	r3, r7, #20
 800be4e:	2200      	movs	r2, #0
 800be50:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800be52:	4618      	mov	r0, r3
 800be54:	f7fe ffc9 	bl	800adea <remove_chain>
 800be58:	4603      	mov	r3, r0
 800be5a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800be5e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be62:	2b00      	cmp	r3, #0
 800be64:	d126      	bne.n	800beb4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800be66:	693b      	ldr	r3, [r7, #16]
 800be68:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800be6a:	4618      	mov	r0, r3
 800be6c:	f7fe fde0 	bl	800aa30 <move_window>
 800be70:	4603      	mov	r3, r0
 800be72:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800be7a:	3a01      	subs	r2, #1
 800be7c:	60da      	str	r2, [r3, #12]
 800be7e:	e019      	b.n	800beb4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800be80:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800be84:	2b00      	cmp	r3, #0
 800be86:	d115      	bne.n	800beb4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800be88:	7ebb      	ldrb	r3, [r7, #26]
 800be8a:	f003 0310 	and.w	r3, r3, #16
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <f_open+0x1b6>
					res = FR_NO_FILE;
 800be92:	2304      	movs	r3, #4
 800be94:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800be98:	e00c      	b.n	800beb4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800be9a:	79fb      	ldrb	r3, [r7, #7]
 800be9c:	f003 0302 	and.w	r3, r3, #2
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d007      	beq.n	800beb4 <f_open+0x1d0>
 800bea4:	7ebb      	ldrb	r3, [r7, #26]
 800bea6:	f003 0301 	and.w	r3, r3, #1
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d002      	beq.n	800beb4 <f_open+0x1d0>
						res = FR_DENIED;
 800beae:	2307      	movs	r3, #7
 800beb0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800beb4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d126      	bne.n	800bf0a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800bebc:	79fb      	ldrb	r3, [r7, #7]
 800bebe:	f003 0308 	and.w	r3, r3, #8
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d003      	beq.n	800bece <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800bec6:	79fb      	ldrb	r3, [r7, #7]
 800bec8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800becc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800bed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800bedc:	79fb      	ldrb	r3, [r7, #7]
 800bede:	2b01      	cmp	r3, #1
 800bee0:	bf8c      	ite	hi
 800bee2:	2301      	movhi	r3, #1
 800bee4:	2300      	movls	r3, #0
 800bee6:	b2db      	uxtb	r3, r3
 800bee8:	461a      	mov	r2, r3
 800beea:	f107 0314 	add.w	r3, r7, #20
 800beee:	4611      	mov	r1, r2
 800bef0:	4618      	mov	r0, r3
 800bef2:	f7fe fca7 	bl	800a844 <inc_lock>
 800bef6:	4602      	mov	r2, r0
 800bef8:	68fb      	ldr	r3, [r7, #12]
 800befa:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	691b      	ldr	r3, [r3, #16]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d102      	bne.n	800bf0a <f_open+0x226>
 800bf04:	2302      	movs	r3, #2
 800bf06:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800bf0a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	f040 8095 	bne.w	800c03e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800bf14:	693b      	ldr	r3, [r7, #16]
 800bf16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf18:	4611      	mov	r1, r2
 800bf1a:	4618      	mov	r0, r3
 800bf1c:	f7ff f9e9 	bl	800b2f2 <ld_clust>
 800bf20:	4602      	mov	r2, r0
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800bf26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bf28:	331c      	adds	r3, #28
 800bf2a:	4618      	mov	r0, r3
 800bf2c:	f7fe fb24 	bl	800a578 <ld_dword>
 800bf30:	4602      	mov	r2, r0
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800bf36:	68fb      	ldr	r3, [r7, #12]
 800bf38:	2200      	movs	r2, #0
 800bf3a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800bf3c:	693a      	ldr	r2, [r7, #16]
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800bf42:	693b      	ldr	r3, [r7, #16]
 800bf44:	88da      	ldrh	r2, [r3, #6]
 800bf46:	68fb      	ldr	r3, [r7, #12]
 800bf48:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	79fa      	ldrb	r2, [r7, #7]
 800bf4e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800bf50:	68fb      	ldr	r3, [r7, #12]
 800bf52:	2200      	movs	r2, #0
 800bf54:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	2200      	movs	r2, #0
 800bf5a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2200      	movs	r2, #0
 800bf60:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	3330      	adds	r3, #48	@ 0x30
 800bf66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f7fe fb8e 	bl	800a68e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800bf72:	79fb      	ldrb	r3, [r7, #7]
 800bf74:	f003 0320 	and.w	r3, r3, #32
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d060      	beq.n	800c03e <f_open+0x35a>
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	68db      	ldr	r3, [r3, #12]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d05c      	beq.n	800c03e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	68da      	ldr	r2, [r3, #12]
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800bf8c:	693b      	ldr	r3, [r7, #16]
 800bf8e:	895b      	ldrh	r3, [r3, #10]
 800bf90:	025b      	lsls	r3, r3, #9
 800bf92:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800bf94:	68fb      	ldr	r3, [r7, #12]
 800bf96:	689b      	ldr	r3, [r3, #8]
 800bf98:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	657b      	str	r3, [r7, #84]	@ 0x54
 800bfa0:	e016      	b.n	800bfd0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800bfa2:	68fb      	ldr	r3, [r7, #12]
 800bfa4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	f7fe fd8e 	bl	800aac8 <get_fat>
 800bfac:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800bfae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfb0:	2b01      	cmp	r3, #1
 800bfb2:	d802      	bhi.n	800bfba <f_open+0x2d6>
 800bfb4:	2302      	movs	r3, #2
 800bfb6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800bfba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bfbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bfc0:	d102      	bne.n	800bfc8 <f_open+0x2e4>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800bfc8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bfca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfcc:	1ad3      	subs	r3, r2, r3
 800bfce:	657b      	str	r3, [r7, #84]	@ 0x54
 800bfd0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d103      	bne.n	800bfe0 <f_open+0x2fc>
 800bfd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bfda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfdc:	429a      	cmp	r2, r3
 800bfde:	d8e0      	bhi.n	800bfa2 <f_open+0x2be>
				}
				fp->clust = clst;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800bfe4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800bfe6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d127      	bne.n	800c03e <f_open+0x35a>
 800bfee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800bff0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d022      	beq.n	800c03e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800bff8:	693b      	ldr	r3, [r7, #16]
 800bffa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800bffc:	4618      	mov	r0, r3
 800bffe:	f7fe fd44 	bl	800aa8a <clust2sect>
 800c002:	6478      	str	r0, [r7, #68]	@ 0x44
 800c004:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c006:	2b00      	cmp	r3, #0
 800c008:	d103      	bne.n	800c012 <f_open+0x32e>
						res = FR_INT_ERR;
 800c00a:	2302      	movs	r3, #2
 800c00c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800c010:	e015      	b.n	800c03e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800c012:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c014:	0a5a      	lsrs	r2, r3, #9
 800c016:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c018:	441a      	add	r2, r3
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	7858      	ldrb	r0, [r3, #1]
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	6a1a      	ldr	r2, [r3, #32]
 800c02c:	2301      	movs	r3, #1
 800c02e:	f7fe fa4b 	bl	800a4c8 <disk_read>
 800c032:	4603      	mov	r3, r0
 800c034:	2b00      	cmp	r3, #0
 800c036:	d002      	beq.n	800c03e <f_open+0x35a>
 800c038:	2301      	movs	r3, #1
 800c03a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800c03e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800c042:	2b00      	cmp	r3, #0
 800c044:	d002      	beq.n	800c04c <f_open+0x368>
 800c046:	68fb      	ldr	r3, [r7, #12]
 800c048:	2200      	movs	r2, #0
 800c04a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800c04c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800c050:	4618      	mov	r0, r3
 800c052:	3760      	adds	r7, #96	@ 0x60
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}

0800c058 <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b092      	sub	sp, #72	@ 0x48
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800c064:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800c068:	f107 030c 	add.w	r3, r7, #12
 800c06c:	2200      	movs	r2, #0
 800c06e:	4618      	mov	r0, r3
 800c070:	f7ff fba6 	bl	800b7c0 <find_volume>
 800c074:	4603      	mov	r3, r0
 800c076:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800c07a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c07e:	2b00      	cmp	r3, #0
 800c080:	f040 8099 	bne.w	800c1b6 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800c084:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800c08a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c08c:	691a      	ldr	r2, [r3, #16]
 800c08e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c090:	695b      	ldr	r3, [r3, #20]
 800c092:	3b02      	subs	r3, #2
 800c094:	429a      	cmp	r2, r3
 800c096:	d804      	bhi.n	800c0a2 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800c098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c09a:	691a      	ldr	r2, [r3, #16]
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	601a      	str	r2, [r3, #0]
 800c0a0:	e089      	b.n	800c1b6 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800c0a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a8:	781b      	ldrb	r3, [r3, #0]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d128      	bne.n	800c100 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800c0ae:	2302      	movs	r3, #2
 800c0b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0b4:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800c0b6:	f107 0314 	add.w	r3, r7, #20
 800c0ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f7fe fd03 	bl	800aac8 <get_fat>
 800c0c2:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800c0c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c0ca:	d103      	bne.n	800c0d4 <f_getfree+0x7c>
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c0d2:	e063      	b.n	800c19c <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800c0d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0d6:	2b01      	cmp	r3, #1
 800c0d8:	d103      	bne.n	800c0e2 <f_getfree+0x8a>
 800c0da:	2302      	movs	r3, #2
 800c0dc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800c0e0:	e05c      	b.n	800c19c <f_getfree+0x144>
					if (stat == 0) nfree++;
 800c0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d102      	bne.n	800c0ee <f_getfree+0x96>
 800c0e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c0ea:	3301      	adds	r3, #1
 800c0ec:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 800c0ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c0f0:	3301      	adds	r3, #1
 800c0f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c0f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0f6:	695b      	ldr	r3, [r3, #20]
 800c0f8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d3db      	bcc.n	800c0b6 <f_getfree+0x5e>
 800c0fe:	e04d      	b.n	800c19c <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800c100:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c102:	695b      	ldr	r3, [r3, #20]
 800c104:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c108:	6a1b      	ldr	r3, [r3, #32]
 800c10a:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800c10c:	2300      	movs	r3, #0
 800c10e:	637b      	str	r3, [r7, #52]	@ 0x34
 800c110:	2300      	movs	r3, #0
 800c112:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800c114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c116:	2b00      	cmp	r3, #0
 800c118:	d113      	bne.n	800c142 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800c11a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c11e:	1c5a      	adds	r2, r3, #1
 800c120:	63ba      	str	r2, [r7, #56]	@ 0x38
 800c122:	4619      	mov	r1, r3
 800c124:	f7fe fc84 	bl	800aa30 <move_window>
 800c128:	4603      	mov	r3, r0
 800c12a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 800c12e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800c132:	2b00      	cmp	r3, #0
 800c134:	d131      	bne.n	800c19a <f_getfree+0x142>
							p = fs->win;
 800c136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c138:	3330      	adds	r3, #48	@ 0x30
 800c13a:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800c13c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800c140:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800c142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	2b02      	cmp	r3, #2
 800c148:	d10f      	bne.n	800c16a <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800c14a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c14c:	f7fe f9fc 	bl	800a548 <ld_word>
 800c150:	4603      	mov	r3, r0
 800c152:	2b00      	cmp	r3, #0
 800c154:	d102      	bne.n	800c15c <f_getfree+0x104>
 800c156:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c158:	3301      	adds	r3, #1
 800c15a:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 800c15c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c15e:	3302      	adds	r3, #2
 800c160:	633b      	str	r3, [r7, #48]	@ 0x30
 800c162:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c164:	3b02      	subs	r3, #2
 800c166:	637b      	str	r3, [r7, #52]	@ 0x34
 800c168:	e010      	b.n	800c18c <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800c16a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800c16c:	f7fe fa04 	bl	800a578 <ld_dword>
 800c170:	4603      	mov	r3, r0
 800c172:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800c176:	2b00      	cmp	r3, #0
 800c178:	d102      	bne.n	800c180 <f_getfree+0x128>
 800c17a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c17c:	3301      	adds	r3, #1
 800c17e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 800c180:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c182:	3304      	adds	r3, #4
 800c184:	633b      	str	r3, [r7, #48]	@ 0x30
 800c186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c188:	3b04      	subs	r3, #4
 800c18a:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 800c18c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c18e:	3b01      	subs	r3, #1
 800c190:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c194:	2b00      	cmp	r3, #0
 800c196:	d1bd      	bne.n	800c114 <f_getfree+0xbc>
 800c198:	e000      	b.n	800c19c <f_getfree+0x144>
							if (res != FR_OK) break;
 800c19a:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1a0:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800c1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800c1a6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800c1a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1aa:	791a      	ldrb	r2, [r3, #4]
 800c1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ae:	f042 0201 	orr.w	r2, r2, #1
 800c1b2:	b2d2      	uxtb	r2, r2
 800c1b4:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800c1b6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3748      	adds	r7, #72	@ 0x48
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
	...

0800c1c4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b087      	sub	sp, #28
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800c1d6:	2300      	movs	r3, #0
 800c1d8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800c1da:	4b1f      	ldr	r3, [pc, #124]	@ (800c258 <FATFS_LinkDriverEx+0x94>)
 800c1dc:	7a5b      	ldrb	r3, [r3, #9]
 800c1de:	b2db      	uxtb	r3, r3
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d131      	bne.n	800c248 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800c1e4:	4b1c      	ldr	r3, [pc, #112]	@ (800c258 <FATFS_LinkDriverEx+0x94>)
 800c1e6:	7a5b      	ldrb	r3, [r3, #9]
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	461a      	mov	r2, r3
 800c1ec:	4b1a      	ldr	r3, [pc, #104]	@ (800c258 <FATFS_LinkDriverEx+0x94>)
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800c1f2:	4b19      	ldr	r3, [pc, #100]	@ (800c258 <FATFS_LinkDriverEx+0x94>)
 800c1f4:	7a5b      	ldrb	r3, [r3, #9]
 800c1f6:	b2db      	uxtb	r3, r3
 800c1f8:	4a17      	ldr	r2, [pc, #92]	@ (800c258 <FATFS_LinkDriverEx+0x94>)
 800c1fa:	009b      	lsls	r3, r3, #2
 800c1fc:	4413      	add	r3, r2
 800c1fe:	68fa      	ldr	r2, [r7, #12]
 800c200:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800c202:	4b15      	ldr	r3, [pc, #84]	@ (800c258 <FATFS_LinkDriverEx+0x94>)
 800c204:	7a5b      	ldrb	r3, [r3, #9]
 800c206:	b2db      	uxtb	r3, r3
 800c208:	461a      	mov	r2, r3
 800c20a:	4b13      	ldr	r3, [pc, #76]	@ (800c258 <FATFS_LinkDriverEx+0x94>)
 800c20c:	4413      	add	r3, r2
 800c20e:	79fa      	ldrb	r2, [r7, #7]
 800c210:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800c212:	4b11      	ldr	r3, [pc, #68]	@ (800c258 <FATFS_LinkDriverEx+0x94>)
 800c214:	7a5b      	ldrb	r3, [r3, #9]
 800c216:	b2db      	uxtb	r3, r3
 800c218:	1c5a      	adds	r2, r3, #1
 800c21a:	b2d1      	uxtb	r1, r2
 800c21c:	4a0e      	ldr	r2, [pc, #56]	@ (800c258 <FATFS_LinkDriverEx+0x94>)
 800c21e:	7251      	strb	r1, [r2, #9]
 800c220:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800c222:	7dbb      	ldrb	r3, [r7, #22]
 800c224:	3330      	adds	r3, #48	@ 0x30
 800c226:	b2da      	uxtb	r2, r3
 800c228:	68bb      	ldr	r3, [r7, #8]
 800c22a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800c22c:	68bb      	ldr	r3, [r7, #8]
 800c22e:	3301      	adds	r3, #1
 800c230:	223a      	movs	r2, #58	@ 0x3a
 800c232:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800c234:	68bb      	ldr	r3, [r7, #8]
 800c236:	3302      	adds	r3, #2
 800c238:	222f      	movs	r2, #47	@ 0x2f
 800c23a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800c23c:	68bb      	ldr	r3, [r7, #8]
 800c23e:	3303      	adds	r3, #3
 800c240:	2200      	movs	r2, #0
 800c242:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800c244:	2300      	movs	r3, #0
 800c246:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800c248:	7dfb      	ldrb	r3, [r7, #23]
}
 800c24a:	4618      	mov	r0, r3
 800c24c:	371c      	adds	r7, #28
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	20001248 	.word	0x20001248

0800c25c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800c266:	2200      	movs	r2, #0
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f7ff ffaa 	bl	800c1c4 <FATFS_LinkDriverEx>
 800c270:	4603      	mov	r3, r0
}
 800c272:	4618      	mov	r0, r3
 800c274:	3708      	adds	r7, #8
 800c276:	46bd      	mov	sp, r7
 800c278:	bd80      	pop	{r7, pc}

0800c27a <__cvt>:
 800c27a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c27e:	ec57 6b10 	vmov	r6, r7, d0
 800c282:	2f00      	cmp	r7, #0
 800c284:	460c      	mov	r4, r1
 800c286:	4619      	mov	r1, r3
 800c288:	463b      	mov	r3, r7
 800c28a:	bfbb      	ittet	lt
 800c28c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c290:	461f      	movlt	r7, r3
 800c292:	2300      	movge	r3, #0
 800c294:	232d      	movlt	r3, #45	@ 0x2d
 800c296:	700b      	strb	r3, [r1, #0]
 800c298:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c29a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c29e:	4691      	mov	r9, r2
 800c2a0:	f023 0820 	bic.w	r8, r3, #32
 800c2a4:	bfbc      	itt	lt
 800c2a6:	4632      	movlt	r2, r6
 800c2a8:	4616      	movlt	r6, r2
 800c2aa:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c2ae:	d005      	beq.n	800c2bc <__cvt+0x42>
 800c2b0:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c2b4:	d100      	bne.n	800c2b8 <__cvt+0x3e>
 800c2b6:	3401      	adds	r4, #1
 800c2b8:	2102      	movs	r1, #2
 800c2ba:	e000      	b.n	800c2be <__cvt+0x44>
 800c2bc:	2103      	movs	r1, #3
 800c2be:	ab03      	add	r3, sp, #12
 800c2c0:	9301      	str	r3, [sp, #4]
 800c2c2:	ab02      	add	r3, sp, #8
 800c2c4:	9300      	str	r3, [sp, #0]
 800c2c6:	ec47 6b10 	vmov	d0, r6, r7
 800c2ca:	4653      	mov	r3, sl
 800c2cc:	4622      	mov	r2, r4
 800c2ce:	f001 ff7b 	bl	800e1c8 <_dtoa_r>
 800c2d2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c2d6:	4605      	mov	r5, r0
 800c2d8:	d119      	bne.n	800c30e <__cvt+0x94>
 800c2da:	f019 0f01 	tst.w	r9, #1
 800c2de:	d00e      	beq.n	800c2fe <__cvt+0x84>
 800c2e0:	eb00 0904 	add.w	r9, r0, r4
 800c2e4:	2200      	movs	r2, #0
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	4630      	mov	r0, r6
 800c2ea:	4639      	mov	r1, r7
 800c2ec:	f7f4 fc14 	bl	8000b18 <__aeabi_dcmpeq>
 800c2f0:	b108      	cbz	r0, 800c2f6 <__cvt+0x7c>
 800c2f2:	f8cd 900c 	str.w	r9, [sp, #12]
 800c2f6:	2230      	movs	r2, #48	@ 0x30
 800c2f8:	9b03      	ldr	r3, [sp, #12]
 800c2fa:	454b      	cmp	r3, r9
 800c2fc:	d31e      	bcc.n	800c33c <__cvt+0xc2>
 800c2fe:	9b03      	ldr	r3, [sp, #12]
 800c300:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c302:	1b5b      	subs	r3, r3, r5
 800c304:	4628      	mov	r0, r5
 800c306:	6013      	str	r3, [r2, #0]
 800c308:	b004      	add	sp, #16
 800c30a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c30e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c312:	eb00 0904 	add.w	r9, r0, r4
 800c316:	d1e5      	bne.n	800c2e4 <__cvt+0x6a>
 800c318:	7803      	ldrb	r3, [r0, #0]
 800c31a:	2b30      	cmp	r3, #48	@ 0x30
 800c31c:	d10a      	bne.n	800c334 <__cvt+0xba>
 800c31e:	2200      	movs	r2, #0
 800c320:	2300      	movs	r3, #0
 800c322:	4630      	mov	r0, r6
 800c324:	4639      	mov	r1, r7
 800c326:	f7f4 fbf7 	bl	8000b18 <__aeabi_dcmpeq>
 800c32a:	b918      	cbnz	r0, 800c334 <__cvt+0xba>
 800c32c:	f1c4 0401 	rsb	r4, r4, #1
 800c330:	f8ca 4000 	str.w	r4, [sl]
 800c334:	f8da 3000 	ldr.w	r3, [sl]
 800c338:	4499      	add	r9, r3
 800c33a:	e7d3      	b.n	800c2e4 <__cvt+0x6a>
 800c33c:	1c59      	adds	r1, r3, #1
 800c33e:	9103      	str	r1, [sp, #12]
 800c340:	701a      	strb	r2, [r3, #0]
 800c342:	e7d9      	b.n	800c2f8 <__cvt+0x7e>

0800c344 <__exponent>:
 800c344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c346:	2900      	cmp	r1, #0
 800c348:	bfba      	itte	lt
 800c34a:	4249      	neglt	r1, r1
 800c34c:	232d      	movlt	r3, #45	@ 0x2d
 800c34e:	232b      	movge	r3, #43	@ 0x2b
 800c350:	2909      	cmp	r1, #9
 800c352:	7002      	strb	r2, [r0, #0]
 800c354:	7043      	strb	r3, [r0, #1]
 800c356:	dd29      	ble.n	800c3ac <__exponent+0x68>
 800c358:	f10d 0307 	add.w	r3, sp, #7
 800c35c:	461d      	mov	r5, r3
 800c35e:	270a      	movs	r7, #10
 800c360:	461a      	mov	r2, r3
 800c362:	fbb1 f6f7 	udiv	r6, r1, r7
 800c366:	fb07 1416 	mls	r4, r7, r6, r1
 800c36a:	3430      	adds	r4, #48	@ 0x30
 800c36c:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c370:	460c      	mov	r4, r1
 800c372:	2c63      	cmp	r4, #99	@ 0x63
 800c374:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c378:	4631      	mov	r1, r6
 800c37a:	dcf1      	bgt.n	800c360 <__exponent+0x1c>
 800c37c:	3130      	adds	r1, #48	@ 0x30
 800c37e:	1e94      	subs	r4, r2, #2
 800c380:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c384:	1c41      	adds	r1, r0, #1
 800c386:	4623      	mov	r3, r4
 800c388:	42ab      	cmp	r3, r5
 800c38a:	d30a      	bcc.n	800c3a2 <__exponent+0x5e>
 800c38c:	f10d 0309 	add.w	r3, sp, #9
 800c390:	1a9b      	subs	r3, r3, r2
 800c392:	42ac      	cmp	r4, r5
 800c394:	bf88      	it	hi
 800c396:	2300      	movhi	r3, #0
 800c398:	3302      	adds	r3, #2
 800c39a:	4403      	add	r3, r0
 800c39c:	1a18      	subs	r0, r3, r0
 800c39e:	b003      	add	sp, #12
 800c3a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3a2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c3a6:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c3aa:	e7ed      	b.n	800c388 <__exponent+0x44>
 800c3ac:	2330      	movs	r3, #48	@ 0x30
 800c3ae:	3130      	adds	r1, #48	@ 0x30
 800c3b0:	7083      	strb	r3, [r0, #2]
 800c3b2:	70c1      	strb	r1, [r0, #3]
 800c3b4:	1d03      	adds	r3, r0, #4
 800c3b6:	e7f1      	b.n	800c39c <__exponent+0x58>

0800c3b8 <_printf_float>:
 800c3b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3bc:	b08d      	sub	sp, #52	@ 0x34
 800c3be:	460c      	mov	r4, r1
 800c3c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c3c4:	4616      	mov	r6, r2
 800c3c6:	461f      	mov	r7, r3
 800c3c8:	4605      	mov	r5, r0
 800c3ca:	f001 fdf7 	bl	800dfbc <_localeconv_r>
 800c3ce:	6803      	ldr	r3, [r0, #0]
 800c3d0:	9304      	str	r3, [sp, #16]
 800c3d2:	4618      	mov	r0, r3
 800c3d4:	f7f3 ff74 	bl	80002c0 <strlen>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3dc:	f8d8 3000 	ldr.w	r3, [r8]
 800c3e0:	9005      	str	r0, [sp, #20]
 800c3e2:	3307      	adds	r3, #7
 800c3e4:	f023 0307 	bic.w	r3, r3, #7
 800c3e8:	f103 0208 	add.w	r2, r3, #8
 800c3ec:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c3f0:	f8d4 b000 	ldr.w	fp, [r4]
 800c3f4:	f8c8 2000 	str.w	r2, [r8]
 800c3f8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c3fc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c400:	9307      	str	r3, [sp, #28]
 800c402:	f8cd 8018 	str.w	r8, [sp, #24]
 800c406:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c40a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c40e:	4b9c      	ldr	r3, [pc, #624]	@ (800c680 <_printf_float+0x2c8>)
 800c410:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c414:	f7f4 fbb2 	bl	8000b7c <__aeabi_dcmpun>
 800c418:	bb70      	cbnz	r0, 800c478 <_printf_float+0xc0>
 800c41a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c41e:	4b98      	ldr	r3, [pc, #608]	@ (800c680 <_printf_float+0x2c8>)
 800c420:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c424:	f7f4 fb8c 	bl	8000b40 <__aeabi_dcmple>
 800c428:	bb30      	cbnz	r0, 800c478 <_printf_float+0xc0>
 800c42a:	2200      	movs	r2, #0
 800c42c:	2300      	movs	r3, #0
 800c42e:	4640      	mov	r0, r8
 800c430:	4649      	mov	r1, r9
 800c432:	f7f4 fb7b 	bl	8000b2c <__aeabi_dcmplt>
 800c436:	b110      	cbz	r0, 800c43e <_printf_float+0x86>
 800c438:	232d      	movs	r3, #45	@ 0x2d
 800c43a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c43e:	4a91      	ldr	r2, [pc, #580]	@ (800c684 <_printf_float+0x2cc>)
 800c440:	4b91      	ldr	r3, [pc, #580]	@ (800c688 <_printf_float+0x2d0>)
 800c442:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c446:	bf94      	ite	ls
 800c448:	4690      	movls	r8, r2
 800c44a:	4698      	movhi	r8, r3
 800c44c:	2303      	movs	r3, #3
 800c44e:	6123      	str	r3, [r4, #16]
 800c450:	f02b 0304 	bic.w	r3, fp, #4
 800c454:	6023      	str	r3, [r4, #0]
 800c456:	f04f 0900 	mov.w	r9, #0
 800c45a:	9700      	str	r7, [sp, #0]
 800c45c:	4633      	mov	r3, r6
 800c45e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c460:	4621      	mov	r1, r4
 800c462:	4628      	mov	r0, r5
 800c464:	f000 fa7c 	bl	800c960 <_printf_common>
 800c468:	3001      	adds	r0, #1
 800c46a:	f040 808d 	bne.w	800c588 <_printf_float+0x1d0>
 800c46e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c472:	b00d      	add	sp, #52	@ 0x34
 800c474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c478:	4642      	mov	r2, r8
 800c47a:	464b      	mov	r3, r9
 800c47c:	4640      	mov	r0, r8
 800c47e:	4649      	mov	r1, r9
 800c480:	f7f4 fb7c 	bl	8000b7c <__aeabi_dcmpun>
 800c484:	b140      	cbz	r0, 800c498 <_printf_float+0xe0>
 800c486:	464b      	mov	r3, r9
 800c488:	2b00      	cmp	r3, #0
 800c48a:	bfbc      	itt	lt
 800c48c:	232d      	movlt	r3, #45	@ 0x2d
 800c48e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c492:	4a7e      	ldr	r2, [pc, #504]	@ (800c68c <_printf_float+0x2d4>)
 800c494:	4b7e      	ldr	r3, [pc, #504]	@ (800c690 <_printf_float+0x2d8>)
 800c496:	e7d4      	b.n	800c442 <_printf_float+0x8a>
 800c498:	6863      	ldr	r3, [r4, #4]
 800c49a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c49e:	9206      	str	r2, [sp, #24]
 800c4a0:	1c5a      	adds	r2, r3, #1
 800c4a2:	d13b      	bne.n	800c51c <_printf_float+0x164>
 800c4a4:	2306      	movs	r3, #6
 800c4a6:	6063      	str	r3, [r4, #4]
 800c4a8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	6022      	str	r2, [r4, #0]
 800c4b0:	9303      	str	r3, [sp, #12]
 800c4b2:	ab0a      	add	r3, sp, #40	@ 0x28
 800c4b4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c4b8:	ab09      	add	r3, sp, #36	@ 0x24
 800c4ba:	9300      	str	r3, [sp, #0]
 800c4bc:	6861      	ldr	r1, [r4, #4]
 800c4be:	ec49 8b10 	vmov	d0, r8, r9
 800c4c2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c4c6:	4628      	mov	r0, r5
 800c4c8:	f7ff fed7 	bl	800c27a <__cvt>
 800c4cc:	9b06      	ldr	r3, [sp, #24]
 800c4ce:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c4d0:	2b47      	cmp	r3, #71	@ 0x47
 800c4d2:	4680      	mov	r8, r0
 800c4d4:	d129      	bne.n	800c52a <_printf_float+0x172>
 800c4d6:	1cc8      	adds	r0, r1, #3
 800c4d8:	db02      	blt.n	800c4e0 <_printf_float+0x128>
 800c4da:	6863      	ldr	r3, [r4, #4]
 800c4dc:	4299      	cmp	r1, r3
 800c4de:	dd41      	ble.n	800c564 <_printf_float+0x1ac>
 800c4e0:	f1aa 0a02 	sub.w	sl, sl, #2
 800c4e4:	fa5f fa8a 	uxtb.w	sl, sl
 800c4e8:	3901      	subs	r1, #1
 800c4ea:	4652      	mov	r2, sl
 800c4ec:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c4f0:	9109      	str	r1, [sp, #36]	@ 0x24
 800c4f2:	f7ff ff27 	bl	800c344 <__exponent>
 800c4f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4f8:	1813      	adds	r3, r2, r0
 800c4fa:	2a01      	cmp	r2, #1
 800c4fc:	4681      	mov	r9, r0
 800c4fe:	6123      	str	r3, [r4, #16]
 800c500:	dc02      	bgt.n	800c508 <_printf_float+0x150>
 800c502:	6822      	ldr	r2, [r4, #0]
 800c504:	07d2      	lsls	r2, r2, #31
 800c506:	d501      	bpl.n	800c50c <_printf_float+0x154>
 800c508:	3301      	adds	r3, #1
 800c50a:	6123      	str	r3, [r4, #16]
 800c50c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0a2      	beq.n	800c45a <_printf_float+0xa2>
 800c514:	232d      	movs	r3, #45	@ 0x2d
 800c516:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c51a:	e79e      	b.n	800c45a <_printf_float+0xa2>
 800c51c:	9a06      	ldr	r2, [sp, #24]
 800c51e:	2a47      	cmp	r2, #71	@ 0x47
 800c520:	d1c2      	bne.n	800c4a8 <_printf_float+0xf0>
 800c522:	2b00      	cmp	r3, #0
 800c524:	d1c0      	bne.n	800c4a8 <_printf_float+0xf0>
 800c526:	2301      	movs	r3, #1
 800c528:	e7bd      	b.n	800c4a6 <_printf_float+0xee>
 800c52a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c52e:	d9db      	bls.n	800c4e8 <_printf_float+0x130>
 800c530:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c534:	d118      	bne.n	800c568 <_printf_float+0x1b0>
 800c536:	2900      	cmp	r1, #0
 800c538:	6863      	ldr	r3, [r4, #4]
 800c53a:	dd0b      	ble.n	800c554 <_printf_float+0x19c>
 800c53c:	6121      	str	r1, [r4, #16]
 800c53e:	b913      	cbnz	r3, 800c546 <_printf_float+0x18e>
 800c540:	6822      	ldr	r2, [r4, #0]
 800c542:	07d0      	lsls	r0, r2, #31
 800c544:	d502      	bpl.n	800c54c <_printf_float+0x194>
 800c546:	3301      	adds	r3, #1
 800c548:	440b      	add	r3, r1
 800c54a:	6123      	str	r3, [r4, #16]
 800c54c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c54e:	f04f 0900 	mov.w	r9, #0
 800c552:	e7db      	b.n	800c50c <_printf_float+0x154>
 800c554:	b913      	cbnz	r3, 800c55c <_printf_float+0x1a4>
 800c556:	6822      	ldr	r2, [r4, #0]
 800c558:	07d2      	lsls	r2, r2, #31
 800c55a:	d501      	bpl.n	800c560 <_printf_float+0x1a8>
 800c55c:	3302      	adds	r3, #2
 800c55e:	e7f4      	b.n	800c54a <_printf_float+0x192>
 800c560:	2301      	movs	r3, #1
 800c562:	e7f2      	b.n	800c54a <_printf_float+0x192>
 800c564:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c568:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c56a:	4299      	cmp	r1, r3
 800c56c:	db05      	blt.n	800c57a <_printf_float+0x1c2>
 800c56e:	6823      	ldr	r3, [r4, #0]
 800c570:	6121      	str	r1, [r4, #16]
 800c572:	07d8      	lsls	r0, r3, #31
 800c574:	d5ea      	bpl.n	800c54c <_printf_float+0x194>
 800c576:	1c4b      	adds	r3, r1, #1
 800c578:	e7e7      	b.n	800c54a <_printf_float+0x192>
 800c57a:	2900      	cmp	r1, #0
 800c57c:	bfd4      	ite	le
 800c57e:	f1c1 0202 	rsble	r2, r1, #2
 800c582:	2201      	movgt	r2, #1
 800c584:	4413      	add	r3, r2
 800c586:	e7e0      	b.n	800c54a <_printf_float+0x192>
 800c588:	6823      	ldr	r3, [r4, #0]
 800c58a:	055a      	lsls	r2, r3, #21
 800c58c:	d407      	bmi.n	800c59e <_printf_float+0x1e6>
 800c58e:	6923      	ldr	r3, [r4, #16]
 800c590:	4642      	mov	r2, r8
 800c592:	4631      	mov	r1, r6
 800c594:	4628      	mov	r0, r5
 800c596:	47b8      	blx	r7
 800c598:	3001      	adds	r0, #1
 800c59a:	d12b      	bne.n	800c5f4 <_printf_float+0x23c>
 800c59c:	e767      	b.n	800c46e <_printf_float+0xb6>
 800c59e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c5a2:	f240 80dd 	bls.w	800c760 <_printf_float+0x3a8>
 800c5a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	f7f4 fab3 	bl	8000b18 <__aeabi_dcmpeq>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d033      	beq.n	800c61e <_printf_float+0x266>
 800c5b6:	4a37      	ldr	r2, [pc, #220]	@ (800c694 <_printf_float+0x2dc>)
 800c5b8:	2301      	movs	r3, #1
 800c5ba:	4631      	mov	r1, r6
 800c5bc:	4628      	mov	r0, r5
 800c5be:	47b8      	blx	r7
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	f43f af54 	beq.w	800c46e <_printf_float+0xb6>
 800c5c6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c5ca:	4543      	cmp	r3, r8
 800c5cc:	db02      	blt.n	800c5d4 <_printf_float+0x21c>
 800c5ce:	6823      	ldr	r3, [r4, #0]
 800c5d0:	07d8      	lsls	r0, r3, #31
 800c5d2:	d50f      	bpl.n	800c5f4 <_printf_float+0x23c>
 800c5d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c5d8:	4631      	mov	r1, r6
 800c5da:	4628      	mov	r0, r5
 800c5dc:	47b8      	blx	r7
 800c5de:	3001      	adds	r0, #1
 800c5e0:	f43f af45 	beq.w	800c46e <_printf_float+0xb6>
 800c5e4:	f04f 0900 	mov.w	r9, #0
 800c5e8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c5ec:	f104 0a1a 	add.w	sl, r4, #26
 800c5f0:	45c8      	cmp	r8, r9
 800c5f2:	dc09      	bgt.n	800c608 <_printf_float+0x250>
 800c5f4:	6823      	ldr	r3, [r4, #0]
 800c5f6:	079b      	lsls	r3, r3, #30
 800c5f8:	f100 8103 	bmi.w	800c802 <_printf_float+0x44a>
 800c5fc:	68e0      	ldr	r0, [r4, #12]
 800c5fe:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c600:	4298      	cmp	r0, r3
 800c602:	bfb8      	it	lt
 800c604:	4618      	movlt	r0, r3
 800c606:	e734      	b.n	800c472 <_printf_float+0xba>
 800c608:	2301      	movs	r3, #1
 800c60a:	4652      	mov	r2, sl
 800c60c:	4631      	mov	r1, r6
 800c60e:	4628      	mov	r0, r5
 800c610:	47b8      	blx	r7
 800c612:	3001      	adds	r0, #1
 800c614:	f43f af2b 	beq.w	800c46e <_printf_float+0xb6>
 800c618:	f109 0901 	add.w	r9, r9, #1
 800c61c:	e7e8      	b.n	800c5f0 <_printf_float+0x238>
 800c61e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c620:	2b00      	cmp	r3, #0
 800c622:	dc39      	bgt.n	800c698 <_printf_float+0x2e0>
 800c624:	4a1b      	ldr	r2, [pc, #108]	@ (800c694 <_printf_float+0x2dc>)
 800c626:	2301      	movs	r3, #1
 800c628:	4631      	mov	r1, r6
 800c62a:	4628      	mov	r0, r5
 800c62c:	47b8      	blx	r7
 800c62e:	3001      	adds	r0, #1
 800c630:	f43f af1d 	beq.w	800c46e <_printf_float+0xb6>
 800c634:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c638:	ea59 0303 	orrs.w	r3, r9, r3
 800c63c:	d102      	bne.n	800c644 <_printf_float+0x28c>
 800c63e:	6823      	ldr	r3, [r4, #0]
 800c640:	07d9      	lsls	r1, r3, #31
 800c642:	d5d7      	bpl.n	800c5f4 <_printf_float+0x23c>
 800c644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c648:	4631      	mov	r1, r6
 800c64a:	4628      	mov	r0, r5
 800c64c:	47b8      	blx	r7
 800c64e:	3001      	adds	r0, #1
 800c650:	f43f af0d 	beq.w	800c46e <_printf_float+0xb6>
 800c654:	f04f 0a00 	mov.w	sl, #0
 800c658:	f104 0b1a 	add.w	fp, r4, #26
 800c65c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c65e:	425b      	negs	r3, r3
 800c660:	4553      	cmp	r3, sl
 800c662:	dc01      	bgt.n	800c668 <_printf_float+0x2b0>
 800c664:	464b      	mov	r3, r9
 800c666:	e793      	b.n	800c590 <_printf_float+0x1d8>
 800c668:	2301      	movs	r3, #1
 800c66a:	465a      	mov	r2, fp
 800c66c:	4631      	mov	r1, r6
 800c66e:	4628      	mov	r0, r5
 800c670:	47b8      	blx	r7
 800c672:	3001      	adds	r0, #1
 800c674:	f43f aefb 	beq.w	800c46e <_printf_float+0xb6>
 800c678:	f10a 0a01 	add.w	sl, sl, #1
 800c67c:	e7ee      	b.n	800c65c <_printf_float+0x2a4>
 800c67e:	bf00      	nop
 800c680:	7fefffff 	.word	0x7fefffff
 800c684:	08010a70 	.word	0x08010a70
 800c688:	08010a74 	.word	0x08010a74
 800c68c:	08010a78 	.word	0x08010a78
 800c690:	08010a7c 	.word	0x08010a7c
 800c694:	08010a80 	.word	0x08010a80
 800c698:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c69a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c69e:	4553      	cmp	r3, sl
 800c6a0:	bfa8      	it	ge
 800c6a2:	4653      	movge	r3, sl
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	4699      	mov	r9, r3
 800c6a8:	dc36      	bgt.n	800c718 <_printf_float+0x360>
 800c6aa:	f04f 0b00 	mov.w	fp, #0
 800c6ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6b2:	f104 021a 	add.w	r2, r4, #26
 800c6b6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c6b8:	9306      	str	r3, [sp, #24]
 800c6ba:	eba3 0309 	sub.w	r3, r3, r9
 800c6be:	455b      	cmp	r3, fp
 800c6c0:	dc31      	bgt.n	800c726 <_printf_float+0x36e>
 800c6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6c4:	459a      	cmp	sl, r3
 800c6c6:	dc3a      	bgt.n	800c73e <_printf_float+0x386>
 800c6c8:	6823      	ldr	r3, [r4, #0]
 800c6ca:	07da      	lsls	r2, r3, #31
 800c6cc:	d437      	bmi.n	800c73e <_printf_float+0x386>
 800c6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d0:	ebaa 0903 	sub.w	r9, sl, r3
 800c6d4:	9b06      	ldr	r3, [sp, #24]
 800c6d6:	ebaa 0303 	sub.w	r3, sl, r3
 800c6da:	4599      	cmp	r9, r3
 800c6dc:	bfa8      	it	ge
 800c6de:	4699      	movge	r9, r3
 800c6e0:	f1b9 0f00 	cmp.w	r9, #0
 800c6e4:	dc33      	bgt.n	800c74e <_printf_float+0x396>
 800c6e6:	f04f 0800 	mov.w	r8, #0
 800c6ea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c6ee:	f104 0b1a 	add.w	fp, r4, #26
 800c6f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6f4:	ebaa 0303 	sub.w	r3, sl, r3
 800c6f8:	eba3 0309 	sub.w	r3, r3, r9
 800c6fc:	4543      	cmp	r3, r8
 800c6fe:	f77f af79 	ble.w	800c5f4 <_printf_float+0x23c>
 800c702:	2301      	movs	r3, #1
 800c704:	465a      	mov	r2, fp
 800c706:	4631      	mov	r1, r6
 800c708:	4628      	mov	r0, r5
 800c70a:	47b8      	blx	r7
 800c70c:	3001      	adds	r0, #1
 800c70e:	f43f aeae 	beq.w	800c46e <_printf_float+0xb6>
 800c712:	f108 0801 	add.w	r8, r8, #1
 800c716:	e7ec      	b.n	800c6f2 <_printf_float+0x33a>
 800c718:	4642      	mov	r2, r8
 800c71a:	4631      	mov	r1, r6
 800c71c:	4628      	mov	r0, r5
 800c71e:	47b8      	blx	r7
 800c720:	3001      	adds	r0, #1
 800c722:	d1c2      	bne.n	800c6aa <_printf_float+0x2f2>
 800c724:	e6a3      	b.n	800c46e <_printf_float+0xb6>
 800c726:	2301      	movs	r3, #1
 800c728:	4631      	mov	r1, r6
 800c72a:	4628      	mov	r0, r5
 800c72c:	9206      	str	r2, [sp, #24]
 800c72e:	47b8      	blx	r7
 800c730:	3001      	adds	r0, #1
 800c732:	f43f ae9c 	beq.w	800c46e <_printf_float+0xb6>
 800c736:	9a06      	ldr	r2, [sp, #24]
 800c738:	f10b 0b01 	add.w	fp, fp, #1
 800c73c:	e7bb      	b.n	800c6b6 <_printf_float+0x2fe>
 800c73e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c742:	4631      	mov	r1, r6
 800c744:	4628      	mov	r0, r5
 800c746:	47b8      	blx	r7
 800c748:	3001      	adds	r0, #1
 800c74a:	d1c0      	bne.n	800c6ce <_printf_float+0x316>
 800c74c:	e68f      	b.n	800c46e <_printf_float+0xb6>
 800c74e:	9a06      	ldr	r2, [sp, #24]
 800c750:	464b      	mov	r3, r9
 800c752:	4442      	add	r2, r8
 800c754:	4631      	mov	r1, r6
 800c756:	4628      	mov	r0, r5
 800c758:	47b8      	blx	r7
 800c75a:	3001      	adds	r0, #1
 800c75c:	d1c3      	bne.n	800c6e6 <_printf_float+0x32e>
 800c75e:	e686      	b.n	800c46e <_printf_float+0xb6>
 800c760:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c764:	f1ba 0f01 	cmp.w	sl, #1
 800c768:	dc01      	bgt.n	800c76e <_printf_float+0x3b6>
 800c76a:	07db      	lsls	r3, r3, #31
 800c76c:	d536      	bpl.n	800c7dc <_printf_float+0x424>
 800c76e:	2301      	movs	r3, #1
 800c770:	4642      	mov	r2, r8
 800c772:	4631      	mov	r1, r6
 800c774:	4628      	mov	r0, r5
 800c776:	47b8      	blx	r7
 800c778:	3001      	adds	r0, #1
 800c77a:	f43f ae78 	beq.w	800c46e <_printf_float+0xb6>
 800c77e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c782:	4631      	mov	r1, r6
 800c784:	4628      	mov	r0, r5
 800c786:	47b8      	blx	r7
 800c788:	3001      	adds	r0, #1
 800c78a:	f43f ae70 	beq.w	800c46e <_printf_float+0xb6>
 800c78e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c792:	2200      	movs	r2, #0
 800c794:	2300      	movs	r3, #0
 800c796:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c79a:	f7f4 f9bd 	bl	8000b18 <__aeabi_dcmpeq>
 800c79e:	b9c0      	cbnz	r0, 800c7d2 <_printf_float+0x41a>
 800c7a0:	4653      	mov	r3, sl
 800c7a2:	f108 0201 	add.w	r2, r8, #1
 800c7a6:	4631      	mov	r1, r6
 800c7a8:	4628      	mov	r0, r5
 800c7aa:	47b8      	blx	r7
 800c7ac:	3001      	adds	r0, #1
 800c7ae:	d10c      	bne.n	800c7ca <_printf_float+0x412>
 800c7b0:	e65d      	b.n	800c46e <_printf_float+0xb6>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	465a      	mov	r2, fp
 800c7b6:	4631      	mov	r1, r6
 800c7b8:	4628      	mov	r0, r5
 800c7ba:	47b8      	blx	r7
 800c7bc:	3001      	adds	r0, #1
 800c7be:	f43f ae56 	beq.w	800c46e <_printf_float+0xb6>
 800c7c2:	f108 0801 	add.w	r8, r8, #1
 800c7c6:	45d0      	cmp	r8, sl
 800c7c8:	dbf3      	blt.n	800c7b2 <_printf_float+0x3fa>
 800c7ca:	464b      	mov	r3, r9
 800c7cc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c7d0:	e6df      	b.n	800c592 <_printf_float+0x1da>
 800c7d2:	f04f 0800 	mov.w	r8, #0
 800c7d6:	f104 0b1a 	add.w	fp, r4, #26
 800c7da:	e7f4      	b.n	800c7c6 <_printf_float+0x40e>
 800c7dc:	2301      	movs	r3, #1
 800c7de:	4642      	mov	r2, r8
 800c7e0:	e7e1      	b.n	800c7a6 <_printf_float+0x3ee>
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	464a      	mov	r2, r9
 800c7e6:	4631      	mov	r1, r6
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	47b8      	blx	r7
 800c7ec:	3001      	adds	r0, #1
 800c7ee:	f43f ae3e 	beq.w	800c46e <_printf_float+0xb6>
 800c7f2:	f108 0801 	add.w	r8, r8, #1
 800c7f6:	68e3      	ldr	r3, [r4, #12]
 800c7f8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c7fa:	1a5b      	subs	r3, r3, r1
 800c7fc:	4543      	cmp	r3, r8
 800c7fe:	dcf0      	bgt.n	800c7e2 <_printf_float+0x42a>
 800c800:	e6fc      	b.n	800c5fc <_printf_float+0x244>
 800c802:	f04f 0800 	mov.w	r8, #0
 800c806:	f104 0919 	add.w	r9, r4, #25
 800c80a:	e7f4      	b.n	800c7f6 <_printf_float+0x43e>

0800c80c <malloc>:
 800c80c:	4b02      	ldr	r3, [pc, #8]	@ (800c818 <malloc+0xc>)
 800c80e:	4601      	mov	r1, r0
 800c810:	6818      	ldr	r0, [r3, #0]
 800c812:	f000 b825 	b.w	800c860 <_malloc_r>
 800c816:	bf00      	nop
 800c818:	200001a4 	.word	0x200001a4

0800c81c <sbrk_aligned>:
 800c81c:	b570      	push	{r4, r5, r6, lr}
 800c81e:	4e0f      	ldr	r6, [pc, #60]	@ (800c85c <sbrk_aligned+0x40>)
 800c820:	460c      	mov	r4, r1
 800c822:	6831      	ldr	r1, [r6, #0]
 800c824:	4605      	mov	r5, r0
 800c826:	b911      	cbnz	r1, 800c82e <sbrk_aligned+0x12>
 800c828:	f001 fbcc 	bl	800dfc4 <_sbrk_r>
 800c82c:	6030      	str	r0, [r6, #0]
 800c82e:	4621      	mov	r1, r4
 800c830:	4628      	mov	r0, r5
 800c832:	f001 fbc7 	bl	800dfc4 <_sbrk_r>
 800c836:	1c43      	adds	r3, r0, #1
 800c838:	d103      	bne.n	800c842 <sbrk_aligned+0x26>
 800c83a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c83e:	4620      	mov	r0, r4
 800c840:	bd70      	pop	{r4, r5, r6, pc}
 800c842:	1cc4      	adds	r4, r0, #3
 800c844:	f024 0403 	bic.w	r4, r4, #3
 800c848:	42a0      	cmp	r0, r4
 800c84a:	d0f8      	beq.n	800c83e <sbrk_aligned+0x22>
 800c84c:	1a21      	subs	r1, r4, r0
 800c84e:	4628      	mov	r0, r5
 800c850:	f001 fbb8 	bl	800dfc4 <_sbrk_r>
 800c854:	3001      	adds	r0, #1
 800c856:	d1f2      	bne.n	800c83e <sbrk_aligned+0x22>
 800c858:	e7ef      	b.n	800c83a <sbrk_aligned+0x1e>
 800c85a:	bf00      	nop
 800c85c:	20001254 	.word	0x20001254

0800c860 <_malloc_r>:
 800c860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c864:	1ccd      	adds	r5, r1, #3
 800c866:	f025 0503 	bic.w	r5, r5, #3
 800c86a:	3508      	adds	r5, #8
 800c86c:	2d0c      	cmp	r5, #12
 800c86e:	bf38      	it	cc
 800c870:	250c      	movcc	r5, #12
 800c872:	2d00      	cmp	r5, #0
 800c874:	4606      	mov	r6, r0
 800c876:	db01      	blt.n	800c87c <_malloc_r+0x1c>
 800c878:	42a9      	cmp	r1, r5
 800c87a:	d904      	bls.n	800c886 <_malloc_r+0x26>
 800c87c:	230c      	movs	r3, #12
 800c87e:	6033      	str	r3, [r6, #0]
 800c880:	2000      	movs	r0, #0
 800c882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c95c <_malloc_r+0xfc>
 800c88a:	f000 fc0b 	bl	800d0a4 <__malloc_lock>
 800c88e:	f8d8 3000 	ldr.w	r3, [r8]
 800c892:	461c      	mov	r4, r3
 800c894:	bb44      	cbnz	r4, 800c8e8 <_malloc_r+0x88>
 800c896:	4629      	mov	r1, r5
 800c898:	4630      	mov	r0, r6
 800c89a:	f7ff ffbf 	bl	800c81c <sbrk_aligned>
 800c89e:	1c43      	adds	r3, r0, #1
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	d158      	bne.n	800c956 <_malloc_r+0xf6>
 800c8a4:	f8d8 4000 	ldr.w	r4, [r8]
 800c8a8:	4627      	mov	r7, r4
 800c8aa:	2f00      	cmp	r7, #0
 800c8ac:	d143      	bne.n	800c936 <_malloc_r+0xd6>
 800c8ae:	2c00      	cmp	r4, #0
 800c8b0:	d04b      	beq.n	800c94a <_malloc_r+0xea>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	4639      	mov	r1, r7
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	eb04 0903 	add.w	r9, r4, r3
 800c8bc:	f001 fb82 	bl	800dfc4 <_sbrk_r>
 800c8c0:	4581      	cmp	r9, r0
 800c8c2:	d142      	bne.n	800c94a <_malloc_r+0xea>
 800c8c4:	6821      	ldr	r1, [r4, #0]
 800c8c6:	1a6d      	subs	r5, r5, r1
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f7ff ffa6 	bl	800c81c <sbrk_aligned>
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	d03a      	beq.n	800c94a <_malloc_r+0xea>
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	442b      	add	r3, r5
 800c8d8:	6023      	str	r3, [r4, #0]
 800c8da:	f8d8 3000 	ldr.w	r3, [r8]
 800c8de:	685a      	ldr	r2, [r3, #4]
 800c8e0:	bb62      	cbnz	r2, 800c93c <_malloc_r+0xdc>
 800c8e2:	f8c8 7000 	str.w	r7, [r8]
 800c8e6:	e00f      	b.n	800c908 <_malloc_r+0xa8>
 800c8e8:	6822      	ldr	r2, [r4, #0]
 800c8ea:	1b52      	subs	r2, r2, r5
 800c8ec:	d420      	bmi.n	800c930 <_malloc_r+0xd0>
 800c8ee:	2a0b      	cmp	r2, #11
 800c8f0:	d917      	bls.n	800c922 <_malloc_r+0xc2>
 800c8f2:	1961      	adds	r1, r4, r5
 800c8f4:	42a3      	cmp	r3, r4
 800c8f6:	6025      	str	r5, [r4, #0]
 800c8f8:	bf18      	it	ne
 800c8fa:	6059      	strne	r1, [r3, #4]
 800c8fc:	6863      	ldr	r3, [r4, #4]
 800c8fe:	bf08      	it	eq
 800c900:	f8c8 1000 	streq.w	r1, [r8]
 800c904:	5162      	str	r2, [r4, r5]
 800c906:	604b      	str	r3, [r1, #4]
 800c908:	4630      	mov	r0, r6
 800c90a:	f000 fbd1 	bl	800d0b0 <__malloc_unlock>
 800c90e:	f104 000b 	add.w	r0, r4, #11
 800c912:	1d23      	adds	r3, r4, #4
 800c914:	f020 0007 	bic.w	r0, r0, #7
 800c918:	1ac2      	subs	r2, r0, r3
 800c91a:	bf1c      	itt	ne
 800c91c:	1a1b      	subne	r3, r3, r0
 800c91e:	50a3      	strne	r3, [r4, r2]
 800c920:	e7af      	b.n	800c882 <_malloc_r+0x22>
 800c922:	6862      	ldr	r2, [r4, #4]
 800c924:	42a3      	cmp	r3, r4
 800c926:	bf0c      	ite	eq
 800c928:	f8c8 2000 	streq.w	r2, [r8]
 800c92c:	605a      	strne	r2, [r3, #4]
 800c92e:	e7eb      	b.n	800c908 <_malloc_r+0xa8>
 800c930:	4623      	mov	r3, r4
 800c932:	6864      	ldr	r4, [r4, #4]
 800c934:	e7ae      	b.n	800c894 <_malloc_r+0x34>
 800c936:	463c      	mov	r4, r7
 800c938:	687f      	ldr	r7, [r7, #4]
 800c93a:	e7b6      	b.n	800c8aa <_malloc_r+0x4a>
 800c93c:	461a      	mov	r2, r3
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	42a3      	cmp	r3, r4
 800c942:	d1fb      	bne.n	800c93c <_malloc_r+0xdc>
 800c944:	2300      	movs	r3, #0
 800c946:	6053      	str	r3, [r2, #4]
 800c948:	e7de      	b.n	800c908 <_malloc_r+0xa8>
 800c94a:	230c      	movs	r3, #12
 800c94c:	6033      	str	r3, [r6, #0]
 800c94e:	4630      	mov	r0, r6
 800c950:	f000 fbae 	bl	800d0b0 <__malloc_unlock>
 800c954:	e794      	b.n	800c880 <_malloc_r+0x20>
 800c956:	6005      	str	r5, [r0, #0]
 800c958:	e7d6      	b.n	800c908 <_malloc_r+0xa8>
 800c95a:	bf00      	nop
 800c95c:	20001258 	.word	0x20001258

0800c960 <_printf_common>:
 800c960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c964:	4616      	mov	r6, r2
 800c966:	4698      	mov	r8, r3
 800c968:	688a      	ldr	r2, [r1, #8]
 800c96a:	690b      	ldr	r3, [r1, #16]
 800c96c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c970:	4293      	cmp	r3, r2
 800c972:	bfb8      	it	lt
 800c974:	4613      	movlt	r3, r2
 800c976:	6033      	str	r3, [r6, #0]
 800c978:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c97c:	4607      	mov	r7, r0
 800c97e:	460c      	mov	r4, r1
 800c980:	b10a      	cbz	r2, 800c986 <_printf_common+0x26>
 800c982:	3301      	adds	r3, #1
 800c984:	6033      	str	r3, [r6, #0]
 800c986:	6823      	ldr	r3, [r4, #0]
 800c988:	0699      	lsls	r1, r3, #26
 800c98a:	bf42      	ittt	mi
 800c98c:	6833      	ldrmi	r3, [r6, #0]
 800c98e:	3302      	addmi	r3, #2
 800c990:	6033      	strmi	r3, [r6, #0]
 800c992:	6825      	ldr	r5, [r4, #0]
 800c994:	f015 0506 	ands.w	r5, r5, #6
 800c998:	d106      	bne.n	800c9a8 <_printf_common+0x48>
 800c99a:	f104 0a19 	add.w	sl, r4, #25
 800c99e:	68e3      	ldr	r3, [r4, #12]
 800c9a0:	6832      	ldr	r2, [r6, #0]
 800c9a2:	1a9b      	subs	r3, r3, r2
 800c9a4:	42ab      	cmp	r3, r5
 800c9a6:	dc26      	bgt.n	800c9f6 <_printf_common+0x96>
 800c9a8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c9ac:	6822      	ldr	r2, [r4, #0]
 800c9ae:	3b00      	subs	r3, #0
 800c9b0:	bf18      	it	ne
 800c9b2:	2301      	movne	r3, #1
 800c9b4:	0692      	lsls	r2, r2, #26
 800c9b6:	d42b      	bmi.n	800ca10 <_printf_common+0xb0>
 800c9b8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c9bc:	4641      	mov	r1, r8
 800c9be:	4638      	mov	r0, r7
 800c9c0:	47c8      	blx	r9
 800c9c2:	3001      	adds	r0, #1
 800c9c4:	d01e      	beq.n	800ca04 <_printf_common+0xa4>
 800c9c6:	6823      	ldr	r3, [r4, #0]
 800c9c8:	6922      	ldr	r2, [r4, #16]
 800c9ca:	f003 0306 	and.w	r3, r3, #6
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	bf02      	ittt	eq
 800c9d2:	68e5      	ldreq	r5, [r4, #12]
 800c9d4:	6833      	ldreq	r3, [r6, #0]
 800c9d6:	1aed      	subeq	r5, r5, r3
 800c9d8:	68a3      	ldr	r3, [r4, #8]
 800c9da:	bf0c      	ite	eq
 800c9dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9e0:	2500      	movne	r5, #0
 800c9e2:	4293      	cmp	r3, r2
 800c9e4:	bfc4      	itt	gt
 800c9e6:	1a9b      	subgt	r3, r3, r2
 800c9e8:	18ed      	addgt	r5, r5, r3
 800c9ea:	2600      	movs	r6, #0
 800c9ec:	341a      	adds	r4, #26
 800c9ee:	42b5      	cmp	r5, r6
 800c9f0:	d11a      	bne.n	800ca28 <_printf_common+0xc8>
 800c9f2:	2000      	movs	r0, #0
 800c9f4:	e008      	b.n	800ca08 <_printf_common+0xa8>
 800c9f6:	2301      	movs	r3, #1
 800c9f8:	4652      	mov	r2, sl
 800c9fa:	4641      	mov	r1, r8
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	47c8      	blx	r9
 800ca00:	3001      	adds	r0, #1
 800ca02:	d103      	bne.n	800ca0c <_printf_common+0xac>
 800ca04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ca08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ca0c:	3501      	adds	r5, #1
 800ca0e:	e7c6      	b.n	800c99e <_printf_common+0x3e>
 800ca10:	18e1      	adds	r1, r4, r3
 800ca12:	1c5a      	adds	r2, r3, #1
 800ca14:	2030      	movs	r0, #48	@ 0x30
 800ca16:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ca1a:	4422      	add	r2, r4
 800ca1c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ca20:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ca24:	3302      	adds	r3, #2
 800ca26:	e7c7      	b.n	800c9b8 <_printf_common+0x58>
 800ca28:	2301      	movs	r3, #1
 800ca2a:	4622      	mov	r2, r4
 800ca2c:	4641      	mov	r1, r8
 800ca2e:	4638      	mov	r0, r7
 800ca30:	47c8      	blx	r9
 800ca32:	3001      	adds	r0, #1
 800ca34:	d0e6      	beq.n	800ca04 <_printf_common+0xa4>
 800ca36:	3601      	adds	r6, #1
 800ca38:	e7d9      	b.n	800c9ee <_printf_common+0x8e>
	...

0800ca3c <_printf_i>:
 800ca3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca40:	7e0f      	ldrb	r7, [r1, #24]
 800ca42:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca44:	2f78      	cmp	r7, #120	@ 0x78
 800ca46:	4691      	mov	r9, r2
 800ca48:	4680      	mov	r8, r0
 800ca4a:	460c      	mov	r4, r1
 800ca4c:	469a      	mov	sl, r3
 800ca4e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca52:	d807      	bhi.n	800ca64 <_printf_i+0x28>
 800ca54:	2f62      	cmp	r7, #98	@ 0x62
 800ca56:	d80a      	bhi.n	800ca6e <_printf_i+0x32>
 800ca58:	2f00      	cmp	r7, #0
 800ca5a:	f000 80d2 	beq.w	800cc02 <_printf_i+0x1c6>
 800ca5e:	2f58      	cmp	r7, #88	@ 0x58
 800ca60:	f000 80b9 	beq.w	800cbd6 <_printf_i+0x19a>
 800ca64:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca68:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca6c:	e03a      	b.n	800cae4 <_printf_i+0xa8>
 800ca6e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca72:	2b15      	cmp	r3, #21
 800ca74:	d8f6      	bhi.n	800ca64 <_printf_i+0x28>
 800ca76:	a101      	add	r1, pc, #4	@ (adr r1, 800ca7c <_printf_i+0x40>)
 800ca78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca7c:	0800cad5 	.word	0x0800cad5
 800ca80:	0800cae9 	.word	0x0800cae9
 800ca84:	0800ca65 	.word	0x0800ca65
 800ca88:	0800ca65 	.word	0x0800ca65
 800ca8c:	0800ca65 	.word	0x0800ca65
 800ca90:	0800ca65 	.word	0x0800ca65
 800ca94:	0800cae9 	.word	0x0800cae9
 800ca98:	0800ca65 	.word	0x0800ca65
 800ca9c:	0800ca65 	.word	0x0800ca65
 800caa0:	0800ca65 	.word	0x0800ca65
 800caa4:	0800ca65 	.word	0x0800ca65
 800caa8:	0800cbe9 	.word	0x0800cbe9
 800caac:	0800cb13 	.word	0x0800cb13
 800cab0:	0800cba3 	.word	0x0800cba3
 800cab4:	0800ca65 	.word	0x0800ca65
 800cab8:	0800ca65 	.word	0x0800ca65
 800cabc:	0800cc0b 	.word	0x0800cc0b
 800cac0:	0800ca65 	.word	0x0800ca65
 800cac4:	0800cb13 	.word	0x0800cb13
 800cac8:	0800ca65 	.word	0x0800ca65
 800cacc:	0800ca65 	.word	0x0800ca65
 800cad0:	0800cbab 	.word	0x0800cbab
 800cad4:	6833      	ldr	r3, [r6, #0]
 800cad6:	1d1a      	adds	r2, r3, #4
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	6032      	str	r2, [r6, #0]
 800cadc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800cae0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cae4:	2301      	movs	r3, #1
 800cae6:	e09d      	b.n	800cc24 <_printf_i+0x1e8>
 800cae8:	6833      	ldr	r3, [r6, #0]
 800caea:	6820      	ldr	r0, [r4, #0]
 800caec:	1d19      	adds	r1, r3, #4
 800caee:	6031      	str	r1, [r6, #0]
 800caf0:	0606      	lsls	r6, r0, #24
 800caf2:	d501      	bpl.n	800caf8 <_printf_i+0xbc>
 800caf4:	681d      	ldr	r5, [r3, #0]
 800caf6:	e003      	b.n	800cb00 <_printf_i+0xc4>
 800caf8:	0645      	lsls	r5, r0, #25
 800cafa:	d5fb      	bpl.n	800caf4 <_printf_i+0xb8>
 800cafc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cb00:	2d00      	cmp	r5, #0
 800cb02:	da03      	bge.n	800cb0c <_printf_i+0xd0>
 800cb04:	232d      	movs	r3, #45	@ 0x2d
 800cb06:	426d      	negs	r5, r5
 800cb08:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cb0c:	4859      	ldr	r0, [pc, #356]	@ (800cc74 <_printf_i+0x238>)
 800cb0e:	230a      	movs	r3, #10
 800cb10:	e011      	b.n	800cb36 <_printf_i+0xfa>
 800cb12:	6821      	ldr	r1, [r4, #0]
 800cb14:	6833      	ldr	r3, [r6, #0]
 800cb16:	0608      	lsls	r0, r1, #24
 800cb18:	f853 5b04 	ldr.w	r5, [r3], #4
 800cb1c:	d402      	bmi.n	800cb24 <_printf_i+0xe8>
 800cb1e:	0649      	lsls	r1, r1, #25
 800cb20:	bf48      	it	mi
 800cb22:	b2ad      	uxthmi	r5, r5
 800cb24:	2f6f      	cmp	r7, #111	@ 0x6f
 800cb26:	4853      	ldr	r0, [pc, #332]	@ (800cc74 <_printf_i+0x238>)
 800cb28:	6033      	str	r3, [r6, #0]
 800cb2a:	bf14      	ite	ne
 800cb2c:	230a      	movne	r3, #10
 800cb2e:	2308      	moveq	r3, #8
 800cb30:	2100      	movs	r1, #0
 800cb32:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cb36:	6866      	ldr	r6, [r4, #4]
 800cb38:	60a6      	str	r6, [r4, #8]
 800cb3a:	2e00      	cmp	r6, #0
 800cb3c:	bfa2      	ittt	ge
 800cb3e:	6821      	ldrge	r1, [r4, #0]
 800cb40:	f021 0104 	bicge.w	r1, r1, #4
 800cb44:	6021      	strge	r1, [r4, #0]
 800cb46:	b90d      	cbnz	r5, 800cb4c <_printf_i+0x110>
 800cb48:	2e00      	cmp	r6, #0
 800cb4a:	d04b      	beq.n	800cbe4 <_printf_i+0x1a8>
 800cb4c:	4616      	mov	r6, r2
 800cb4e:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb52:	fb03 5711 	mls	r7, r3, r1, r5
 800cb56:	5dc7      	ldrb	r7, [r0, r7]
 800cb58:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb5c:	462f      	mov	r7, r5
 800cb5e:	42bb      	cmp	r3, r7
 800cb60:	460d      	mov	r5, r1
 800cb62:	d9f4      	bls.n	800cb4e <_printf_i+0x112>
 800cb64:	2b08      	cmp	r3, #8
 800cb66:	d10b      	bne.n	800cb80 <_printf_i+0x144>
 800cb68:	6823      	ldr	r3, [r4, #0]
 800cb6a:	07df      	lsls	r7, r3, #31
 800cb6c:	d508      	bpl.n	800cb80 <_printf_i+0x144>
 800cb6e:	6923      	ldr	r3, [r4, #16]
 800cb70:	6861      	ldr	r1, [r4, #4]
 800cb72:	4299      	cmp	r1, r3
 800cb74:	bfde      	ittt	le
 800cb76:	2330      	movle	r3, #48	@ 0x30
 800cb78:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb7c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800cb80:	1b92      	subs	r2, r2, r6
 800cb82:	6122      	str	r2, [r4, #16]
 800cb84:	f8cd a000 	str.w	sl, [sp]
 800cb88:	464b      	mov	r3, r9
 800cb8a:	aa03      	add	r2, sp, #12
 800cb8c:	4621      	mov	r1, r4
 800cb8e:	4640      	mov	r0, r8
 800cb90:	f7ff fee6 	bl	800c960 <_printf_common>
 800cb94:	3001      	adds	r0, #1
 800cb96:	d14a      	bne.n	800cc2e <_printf_i+0x1f2>
 800cb98:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb9c:	b004      	add	sp, #16
 800cb9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cba2:	6823      	ldr	r3, [r4, #0]
 800cba4:	f043 0320 	orr.w	r3, r3, #32
 800cba8:	6023      	str	r3, [r4, #0]
 800cbaa:	4833      	ldr	r0, [pc, #204]	@ (800cc78 <_printf_i+0x23c>)
 800cbac:	2778      	movs	r7, #120	@ 0x78
 800cbae:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cbb2:	6823      	ldr	r3, [r4, #0]
 800cbb4:	6831      	ldr	r1, [r6, #0]
 800cbb6:	061f      	lsls	r7, r3, #24
 800cbb8:	f851 5b04 	ldr.w	r5, [r1], #4
 800cbbc:	d402      	bmi.n	800cbc4 <_printf_i+0x188>
 800cbbe:	065f      	lsls	r7, r3, #25
 800cbc0:	bf48      	it	mi
 800cbc2:	b2ad      	uxthmi	r5, r5
 800cbc4:	6031      	str	r1, [r6, #0]
 800cbc6:	07d9      	lsls	r1, r3, #31
 800cbc8:	bf44      	itt	mi
 800cbca:	f043 0320 	orrmi.w	r3, r3, #32
 800cbce:	6023      	strmi	r3, [r4, #0]
 800cbd0:	b11d      	cbz	r5, 800cbda <_printf_i+0x19e>
 800cbd2:	2310      	movs	r3, #16
 800cbd4:	e7ac      	b.n	800cb30 <_printf_i+0xf4>
 800cbd6:	4827      	ldr	r0, [pc, #156]	@ (800cc74 <_printf_i+0x238>)
 800cbd8:	e7e9      	b.n	800cbae <_printf_i+0x172>
 800cbda:	6823      	ldr	r3, [r4, #0]
 800cbdc:	f023 0320 	bic.w	r3, r3, #32
 800cbe0:	6023      	str	r3, [r4, #0]
 800cbe2:	e7f6      	b.n	800cbd2 <_printf_i+0x196>
 800cbe4:	4616      	mov	r6, r2
 800cbe6:	e7bd      	b.n	800cb64 <_printf_i+0x128>
 800cbe8:	6833      	ldr	r3, [r6, #0]
 800cbea:	6825      	ldr	r5, [r4, #0]
 800cbec:	6961      	ldr	r1, [r4, #20]
 800cbee:	1d18      	adds	r0, r3, #4
 800cbf0:	6030      	str	r0, [r6, #0]
 800cbf2:	062e      	lsls	r6, r5, #24
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	d501      	bpl.n	800cbfc <_printf_i+0x1c0>
 800cbf8:	6019      	str	r1, [r3, #0]
 800cbfa:	e002      	b.n	800cc02 <_printf_i+0x1c6>
 800cbfc:	0668      	lsls	r0, r5, #25
 800cbfe:	d5fb      	bpl.n	800cbf8 <_printf_i+0x1bc>
 800cc00:	8019      	strh	r1, [r3, #0]
 800cc02:	2300      	movs	r3, #0
 800cc04:	6123      	str	r3, [r4, #16]
 800cc06:	4616      	mov	r6, r2
 800cc08:	e7bc      	b.n	800cb84 <_printf_i+0x148>
 800cc0a:	6833      	ldr	r3, [r6, #0]
 800cc0c:	1d1a      	adds	r2, r3, #4
 800cc0e:	6032      	str	r2, [r6, #0]
 800cc10:	681e      	ldr	r6, [r3, #0]
 800cc12:	6862      	ldr	r2, [r4, #4]
 800cc14:	2100      	movs	r1, #0
 800cc16:	4630      	mov	r0, r6
 800cc18:	f7f3 fb02 	bl	8000220 <memchr>
 800cc1c:	b108      	cbz	r0, 800cc22 <_printf_i+0x1e6>
 800cc1e:	1b80      	subs	r0, r0, r6
 800cc20:	6060      	str	r0, [r4, #4]
 800cc22:	6863      	ldr	r3, [r4, #4]
 800cc24:	6123      	str	r3, [r4, #16]
 800cc26:	2300      	movs	r3, #0
 800cc28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cc2c:	e7aa      	b.n	800cb84 <_printf_i+0x148>
 800cc2e:	6923      	ldr	r3, [r4, #16]
 800cc30:	4632      	mov	r2, r6
 800cc32:	4649      	mov	r1, r9
 800cc34:	4640      	mov	r0, r8
 800cc36:	47d0      	blx	sl
 800cc38:	3001      	adds	r0, #1
 800cc3a:	d0ad      	beq.n	800cb98 <_printf_i+0x15c>
 800cc3c:	6823      	ldr	r3, [r4, #0]
 800cc3e:	079b      	lsls	r3, r3, #30
 800cc40:	d413      	bmi.n	800cc6a <_printf_i+0x22e>
 800cc42:	68e0      	ldr	r0, [r4, #12]
 800cc44:	9b03      	ldr	r3, [sp, #12]
 800cc46:	4298      	cmp	r0, r3
 800cc48:	bfb8      	it	lt
 800cc4a:	4618      	movlt	r0, r3
 800cc4c:	e7a6      	b.n	800cb9c <_printf_i+0x160>
 800cc4e:	2301      	movs	r3, #1
 800cc50:	4632      	mov	r2, r6
 800cc52:	4649      	mov	r1, r9
 800cc54:	4640      	mov	r0, r8
 800cc56:	47d0      	blx	sl
 800cc58:	3001      	adds	r0, #1
 800cc5a:	d09d      	beq.n	800cb98 <_printf_i+0x15c>
 800cc5c:	3501      	adds	r5, #1
 800cc5e:	68e3      	ldr	r3, [r4, #12]
 800cc60:	9903      	ldr	r1, [sp, #12]
 800cc62:	1a5b      	subs	r3, r3, r1
 800cc64:	42ab      	cmp	r3, r5
 800cc66:	dcf2      	bgt.n	800cc4e <_printf_i+0x212>
 800cc68:	e7eb      	b.n	800cc42 <_printf_i+0x206>
 800cc6a:	2500      	movs	r5, #0
 800cc6c:	f104 0619 	add.w	r6, r4, #25
 800cc70:	e7f5      	b.n	800cc5e <_printf_i+0x222>
 800cc72:	bf00      	nop
 800cc74:	08010a82 	.word	0x08010a82
 800cc78:	08010a93 	.word	0x08010a93

0800cc7c <_scanf_float>:
 800cc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc80:	b087      	sub	sp, #28
 800cc82:	4617      	mov	r7, r2
 800cc84:	9303      	str	r3, [sp, #12]
 800cc86:	688b      	ldr	r3, [r1, #8]
 800cc88:	1e5a      	subs	r2, r3, #1
 800cc8a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800cc8e:	bf81      	itttt	hi
 800cc90:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800cc94:	eb03 0b05 	addhi.w	fp, r3, r5
 800cc98:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800cc9c:	608b      	strhi	r3, [r1, #8]
 800cc9e:	680b      	ldr	r3, [r1, #0]
 800cca0:	460a      	mov	r2, r1
 800cca2:	f04f 0500 	mov.w	r5, #0
 800cca6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800ccaa:	f842 3b1c 	str.w	r3, [r2], #28
 800ccae:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ccb2:	4680      	mov	r8, r0
 800ccb4:	460c      	mov	r4, r1
 800ccb6:	bf98      	it	ls
 800ccb8:	f04f 0b00 	movls.w	fp, #0
 800ccbc:	9201      	str	r2, [sp, #4]
 800ccbe:	4616      	mov	r6, r2
 800ccc0:	46aa      	mov	sl, r5
 800ccc2:	46a9      	mov	r9, r5
 800ccc4:	9502      	str	r5, [sp, #8]
 800ccc6:	68a2      	ldr	r2, [r4, #8]
 800ccc8:	b152      	cbz	r2, 800cce0 <_scanf_float+0x64>
 800ccca:	683b      	ldr	r3, [r7, #0]
 800cccc:	781b      	ldrb	r3, [r3, #0]
 800ccce:	2b4e      	cmp	r3, #78	@ 0x4e
 800ccd0:	d864      	bhi.n	800cd9c <_scanf_float+0x120>
 800ccd2:	2b40      	cmp	r3, #64	@ 0x40
 800ccd4:	d83c      	bhi.n	800cd50 <_scanf_float+0xd4>
 800ccd6:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 800ccda:	b2c8      	uxtb	r0, r1
 800ccdc:	280e      	cmp	r0, #14
 800ccde:	d93a      	bls.n	800cd56 <_scanf_float+0xda>
 800cce0:	f1b9 0f00 	cmp.w	r9, #0
 800cce4:	d003      	beq.n	800ccee <_scanf_float+0x72>
 800cce6:	6823      	ldr	r3, [r4, #0]
 800cce8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccec:	6023      	str	r3, [r4, #0]
 800ccee:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800ccf2:	f1ba 0f01 	cmp.w	sl, #1
 800ccf6:	f200 8117 	bhi.w	800cf28 <_scanf_float+0x2ac>
 800ccfa:	9b01      	ldr	r3, [sp, #4]
 800ccfc:	429e      	cmp	r6, r3
 800ccfe:	f200 8108 	bhi.w	800cf12 <_scanf_float+0x296>
 800cd02:	2001      	movs	r0, #1
 800cd04:	b007      	add	sp, #28
 800cd06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd0a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 800cd0e:	2a0d      	cmp	r2, #13
 800cd10:	d8e6      	bhi.n	800cce0 <_scanf_float+0x64>
 800cd12:	a101      	add	r1, pc, #4	@ (adr r1, 800cd18 <_scanf_float+0x9c>)
 800cd14:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cd18:	0800ce5f 	.word	0x0800ce5f
 800cd1c:	0800cce1 	.word	0x0800cce1
 800cd20:	0800cce1 	.word	0x0800cce1
 800cd24:	0800cce1 	.word	0x0800cce1
 800cd28:	0800cebf 	.word	0x0800cebf
 800cd2c:	0800ce97 	.word	0x0800ce97
 800cd30:	0800cce1 	.word	0x0800cce1
 800cd34:	0800cce1 	.word	0x0800cce1
 800cd38:	0800ce6d 	.word	0x0800ce6d
 800cd3c:	0800cce1 	.word	0x0800cce1
 800cd40:	0800cce1 	.word	0x0800cce1
 800cd44:	0800cce1 	.word	0x0800cce1
 800cd48:	0800cce1 	.word	0x0800cce1
 800cd4c:	0800ce25 	.word	0x0800ce25
 800cd50:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800cd54:	e7db      	b.n	800cd0e <_scanf_float+0x92>
 800cd56:	290e      	cmp	r1, #14
 800cd58:	d8c2      	bhi.n	800cce0 <_scanf_float+0x64>
 800cd5a:	a001      	add	r0, pc, #4	@ (adr r0, 800cd60 <_scanf_float+0xe4>)
 800cd5c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cd60:	0800ce15 	.word	0x0800ce15
 800cd64:	0800cce1 	.word	0x0800cce1
 800cd68:	0800ce15 	.word	0x0800ce15
 800cd6c:	0800ceab 	.word	0x0800ceab
 800cd70:	0800cce1 	.word	0x0800cce1
 800cd74:	0800cdbd 	.word	0x0800cdbd
 800cd78:	0800cdfb 	.word	0x0800cdfb
 800cd7c:	0800cdfb 	.word	0x0800cdfb
 800cd80:	0800cdfb 	.word	0x0800cdfb
 800cd84:	0800cdfb 	.word	0x0800cdfb
 800cd88:	0800cdfb 	.word	0x0800cdfb
 800cd8c:	0800cdfb 	.word	0x0800cdfb
 800cd90:	0800cdfb 	.word	0x0800cdfb
 800cd94:	0800cdfb 	.word	0x0800cdfb
 800cd98:	0800cdfb 	.word	0x0800cdfb
 800cd9c:	2b6e      	cmp	r3, #110	@ 0x6e
 800cd9e:	d809      	bhi.n	800cdb4 <_scanf_float+0x138>
 800cda0:	2b60      	cmp	r3, #96	@ 0x60
 800cda2:	d8b2      	bhi.n	800cd0a <_scanf_float+0x8e>
 800cda4:	2b54      	cmp	r3, #84	@ 0x54
 800cda6:	d07b      	beq.n	800cea0 <_scanf_float+0x224>
 800cda8:	2b59      	cmp	r3, #89	@ 0x59
 800cdaa:	d199      	bne.n	800cce0 <_scanf_float+0x64>
 800cdac:	2d07      	cmp	r5, #7
 800cdae:	d197      	bne.n	800cce0 <_scanf_float+0x64>
 800cdb0:	2508      	movs	r5, #8
 800cdb2:	e02c      	b.n	800ce0e <_scanf_float+0x192>
 800cdb4:	2b74      	cmp	r3, #116	@ 0x74
 800cdb6:	d073      	beq.n	800cea0 <_scanf_float+0x224>
 800cdb8:	2b79      	cmp	r3, #121	@ 0x79
 800cdba:	e7f6      	b.n	800cdaa <_scanf_float+0x12e>
 800cdbc:	6821      	ldr	r1, [r4, #0]
 800cdbe:	05c8      	lsls	r0, r1, #23
 800cdc0:	d51b      	bpl.n	800cdfa <_scanf_float+0x17e>
 800cdc2:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800cdc6:	6021      	str	r1, [r4, #0]
 800cdc8:	f109 0901 	add.w	r9, r9, #1
 800cdcc:	f1bb 0f00 	cmp.w	fp, #0
 800cdd0:	d003      	beq.n	800cdda <_scanf_float+0x15e>
 800cdd2:	3201      	adds	r2, #1
 800cdd4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800cdd8:	60a2      	str	r2, [r4, #8]
 800cdda:	68a3      	ldr	r3, [r4, #8]
 800cddc:	3b01      	subs	r3, #1
 800cdde:	60a3      	str	r3, [r4, #8]
 800cde0:	6923      	ldr	r3, [r4, #16]
 800cde2:	3301      	adds	r3, #1
 800cde4:	6123      	str	r3, [r4, #16]
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	3b01      	subs	r3, #1
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	607b      	str	r3, [r7, #4]
 800cdee:	f340 8087 	ble.w	800cf00 <_scanf_float+0x284>
 800cdf2:	683b      	ldr	r3, [r7, #0]
 800cdf4:	3301      	adds	r3, #1
 800cdf6:	603b      	str	r3, [r7, #0]
 800cdf8:	e765      	b.n	800ccc6 <_scanf_float+0x4a>
 800cdfa:	eb1a 0105 	adds.w	r1, sl, r5
 800cdfe:	f47f af6f 	bne.w	800cce0 <_scanf_float+0x64>
 800ce02:	6822      	ldr	r2, [r4, #0]
 800ce04:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 800ce08:	6022      	str	r2, [r4, #0]
 800ce0a:	460d      	mov	r5, r1
 800ce0c:	468a      	mov	sl, r1
 800ce0e:	f806 3b01 	strb.w	r3, [r6], #1
 800ce12:	e7e2      	b.n	800cdda <_scanf_float+0x15e>
 800ce14:	6822      	ldr	r2, [r4, #0]
 800ce16:	0610      	lsls	r0, r2, #24
 800ce18:	f57f af62 	bpl.w	800cce0 <_scanf_float+0x64>
 800ce1c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800ce20:	6022      	str	r2, [r4, #0]
 800ce22:	e7f4      	b.n	800ce0e <_scanf_float+0x192>
 800ce24:	f1ba 0f00 	cmp.w	sl, #0
 800ce28:	d10e      	bne.n	800ce48 <_scanf_float+0x1cc>
 800ce2a:	f1b9 0f00 	cmp.w	r9, #0
 800ce2e:	d10e      	bne.n	800ce4e <_scanf_float+0x1d2>
 800ce30:	6822      	ldr	r2, [r4, #0]
 800ce32:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ce36:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ce3a:	d108      	bne.n	800ce4e <_scanf_float+0x1d2>
 800ce3c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ce40:	6022      	str	r2, [r4, #0]
 800ce42:	f04f 0a01 	mov.w	sl, #1
 800ce46:	e7e2      	b.n	800ce0e <_scanf_float+0x192>
 800ce48:	f1ba 0f02 	cmp.w	sl, #2
 800ce4c:	d055      	beq.n	800cefa <_scanf_float+0x27e>
 800ce4e:	2d01      	cmp	r5, #1
 800ce50:	d002      	beq.n	800ce58 <_scanf_float+0x1dc>
 800ce52:	2d04      	cmp	r5, #4
 800ce54:	f47f af44 	bne.w	800cce0 <_scanf_float+0x64>
 800ce58:	3501      	adds	r5, #1
 800ce5a:	b2ed      	uxtb	r5, r5
 800ce5c:	e7d7      	b.n	800ce0e <_scanf_float+0x192>
 800ce5e:	f1ba 0f01 	cmp.w	sl, #1
 800ce62:	f47f af3d 	bne.w	800cce0 <_scanf_float+0x64>
 800ce66:	f04f 0a02 	mov.w	sl, #2
 800ce6a:	e7d0      	b.n	800ce0e <_scanf_float+0x192>
 800ce6c:	b97d      	cbnz	r5, 800ce8e <_scanf_float+0x212>
 800ce6e:	f1b9 0f00 	cmp.w	r9, #0
 800ce72:	f47f af38 	bne.w	800cce6 <_scanf_float+0x6a>
 800ce76:	6822      	ldr	r2, [r4, #0]
 800ce78:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800ce7c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800ce80:	f040 8108 	bne.w	800d094 <_scanf_float+0x418>
 800ce84:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800ce88:	6022      	str	r2, [r4, #0]
 800ce8a:	2501      	movs	r5, #1
 800ce8c:	e7bf      	b.n	800ce0e <_scanf_float+0x192>
 800ce8e:	2d03      	cmp	r5, #3
 800ce90:	d0e2      	beq.n	800ce58 <_scanf_float+0x1dc>
 800ce92:	2d05      	cmp	r5, #5
 800ce94:	e7de      	b.n	800ce54 <_scanf_float+0x1d8>
 800ce96:	2d02      	cmp	r5, #2
 800ce98:	f47f af22 	bne.w	800cce0 <_scanf_float+0x64>
 800ce9c:	2503      	movs	r5, #3
 800ce9e:	e7b6      	b.n	800ce0e <_scanf_float+0x192>
 800cea0:	2d06      	cmp	r5, #6
 800cea2:	f47f af1d 	bne.w	800cce0 <_scanf_float+0x64>
 800cea6:	2507      	movs	r5, #7
 800cea8:	e7b1      	b.n	800ce0e <_scanf_float+0x192>
 800ceaa:	6822      	ldr	r2, [r4, #0]
 800ceac:	0591      	lsls	r1, r2, #22
 800ceae:	f57f af17 	bpl.w	800cce0 <_scanf_float+0x64>
 800ceb2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800ceb6:	6022      	str	r2, [r4, #0]
 800ceb8:	f8cd 9008 	str.w	r9, [sp, #8]
 800cebc:	e7a7      	b.n	800ce0e <_scanf_float+0x192>
 800cebe:	6822      	ldr	r2, [r4, #0]
 800cec0:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800cec4:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800cec8:	d006      	beq.n	800ced8 <_scanf_float+0x25c>
 800ceca:	0550      	lsls	r0, r2, #21
 800cecc:	f57f af08 	bpl.w	800cce0 <_scanf_float+0x64>
 800ced0:	f1b9 0f00 	cmp.w	r9, #0
 800ced4:	f000 80de 	beq.w	800d094 <_scanf_float+0x418>
 800ced8:	0591      	lsls	r1, r2, #22
 800ceda:	bf58      	it	pl
 800cedc:	9902      	ldrpl	r1, [sp, #8]
 800cede:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800cee2:	bf58      	it	pl
 800cee4:	eba9 0101 	subpl.w	r1, r9, r1
 800cee8:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800ceec:	bf58      	it	pl
 800ceee:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800cef2:	6022      	str	r2, [r4, #0]
 800cef4:	f04f 0900 	mov.w	r9, #0
 800cef8:	e789      	b.n	800ce0e <_scanf_float+0x192>
 800cefa:	f04f 0a03 	mov.w	sl, #3
 800cefe:	e786      	b.n	800ce0e <_scanf_float+0x192>
 800cf00:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800cf04:	4639      	mov	r1, r7
 800cf06:	4640      	mov	r0, r8
 800cf08:	4798      	blx	r3
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	f43f aedb 	beq.w	800ccc6 <_scanf_float+0x4a>
 800cf10:	e6e6      	b.n	800cce0 <_scanf_float+0x64>
 800cf12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf1a:	463a      	mov	r2, r7
 800cf1c:	4640      	mov	r0, r8
 800cf1e:	4798      	blx	r3
 800cf20:	6923      	ldr	r3, [r4, #16]
 800cf22:	3b01      	subs	r3, #1
 800cf24:	6123      	str	r3, [r4, #16]
 800cf26:	e6e8      	b.n	800ccfa <_scanf_float+0x7e>
 800cf28:	1e6b      	subs	r3, r5, #1
 800cf2a:	2b06      	cmp	r3, #6
 800cf2c:	d824      	bhi.n	800cf78 <_scanf_float+0x2fc>
 800cf2e:	2d02      	cmp	r5, #2
 800cf30:	d836      	bhi.n	800cfa0 <_scanf_float+0x324>
 800cf32:	9b01      	ldr	r3, [sp, #4]
 800cf34:	429e      	cmp	r6, r3
 800cf36:	f67f aee4 	bls.w	800cd02 <_scanf_float+0x86>
 800cf3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf3e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf42:	463a      	mov	r2, r7
 800cf44:	4640      	mov	r0, r8
 800cf46:	4798      	blx	r3
 800cf48:	6923      	ldr	r3, [r4, #16]
 800cf4a:	3b01      	subs	r3, #1
 800cf4c:	6123      	str	r3, [r4, #16]
 800cf4e:	e7f0      	b.n	800cf32 <_scanf_float+0x2b6>
 800cf50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf54:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800cf58:	463a      	mov	r2, r7
 800cf5a:	4640      	mov	r0, r8
 800cf5c:	4798      	blx	r3
 800cf5e:	6923      	ldr	r3, [r4, #16]
 800cf60:	3b01      	subs	r3, #1
 800cf62:	6123      	str	r3, [r4, #16]
 800cf64:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800cf68:	fa5f fa8a 	uxtb.w	sl, sl
 800cf6c:	f1ba 0f02 	cmp.w	sl, #2
 800cf70:	d1ee      	bne.n	800cf50 <_scanf_float+0x2d4>
 800cf72:	3d03      	subs	r5, #3
 800cf74:	b2ed      	uxtb	r5, r5
 800cf76:	1b76      	subs	r6, r6, r5
 800cf78:	6823      	ldr	r3, [r4, #0]
 800cf7a:	05da      	lsls	r2, r3, #23
 800cf7c:	d530      	bpl.n	800cfe0 <_scanf_float+0x364>
 800cf7e:	055b      	lsls	r3, r3, #21
 800cf80:	d511      	bpl.n	800cfa6 <_scanf_float+0x32a>
 800cf82:	9b01      	ldr	r3, [sp, #4]
 800cf84:	429e      	cmp	r6, r3
 800cf86:	f67f aebc 	bls.w	800cd02 <_scanf_float+0x86>
 800cf8a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cf8e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800cf92:	463a      	mov	r2, r7
 800cf94:	4640      	mov	r0, r8
 800cf96:	4798      	blx	r3
 800cf98:	6923      	ldr	r3, [r4, #16]
 800cf9a:	3b01      	subs	r3, #1
 800cf9c:	6123      	str	r3, [r4, #16]
 800cf9e:	e7f0      	b.n	800cf82 <_scanf_float+0x306>
 800cfa0:	46aa      	mov	sl, r5
 800cfa2:	46b3      	mov	fp, r6
 800cfa4:	e7de      	b.n	800cf64 <_scanf_float+0x2e8>
 800cfa6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800cfaa:	6923      	ldr	r3, [r4, #16]
 800cfac:	2965      	cmp	r1, #101	@ 0x65
 800cfae:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cfb2:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 800cfb6:	6123      	str	r3, [r4, #16]
 800cfb8:	d00c      	beq.n	800cfd4 <_scanf_float+0x358>
 800cfba:	2945      	cmp	r1, #69	@ 0x45
 800cfbc:	d00a      	beq.n	800cfd4 <_scanf_float+0x358>
 800cfbe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cfc2:	463a      	mov	r2, r7
 800cfc4:	4640      	mov	r0, r8
 800cfc6:	4798      	blx	r3
 800cfc8:	6923      	ldr	r3, [r4, #16]
 800cfca:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800cfce:	3b01      	subs	r3, #1
 800cfd0:	1eb5      	subs	r5, r6, #2
 800cfd2:	6123      	str	r3, [r4, #16]
 800cfd4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800cfd8:	463a      	mov	r2, r7
 800cfda:	4640      	mov	r0, r8
 800cfdc:	4798      	blx	r3
 800cfde:	462e      	mov	r6, r5
 800cfe0:	6822      	ldr	r2, [r4, #0]
 800cfe2:	f012 0210 	ands.w	r2, r2, #16
 800cfe6:	d001      	beq.n	800cfec <_scanf_float+0x370>
 800cfe8:	2000      	movs	r0, #0
 800cfea:	e68b      	b.n	800cd04 <_scanf_float+0x88>
 800cfec:	7032      	strb	r2, [r6, #0]
 800cfee:	6823      	ldr	r3, [r4, #0]
 800cff0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800cff4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800cff8:	d11c      	bne.n	800d034 <_scanf_float+0x3b8>
 800cffa:	9b02      	ldr	r3, [sp, #8]
 800cffc:	454b      	cmp	r3, r9
 800cffe:	eba3 0209 	sub.w	r2, r3, r9
 800d002:	d123      	bne.n	800d04c <_scanf_float+0x3d0>
 800d004:	9901      	ldr	r1, [sp, #4]
 800d006:	2200      	movs	r2, #0
 800d008:	4640      	mov	r0, r8
 800d00a:	f000 ff1d 	bl	800de48 <_strtod_r>
 800d00e:	9b03      	ldr	r3, [sp, #12]
 800d010:	6821      	ldr	r1, [r4, #0]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	f011 0f02 	tst.w	r1, #2
 800d018:	ec57 6b10 	vmov	r6, r7, d0
 800d01c:	f103 0204 	add.w	r2, r3, #4
 800d020:	d01f      	beq.n	800d062 <_scanf_float+0x3e6>
 800d022:	9903      	ldr	r1, [sp, #12]
 800d024:	600a      	str	r2, [r1, #0]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	e9c3 6700 	strd	r6, r7, [r3]
 800d02c:	68e3      	ldr	r3, [r4, #12]
 800d02e:	3301      	adds	r3, #1
 800d030:	60e3      	str	r3, [r4, #12]
 800d032:	e7d9      	b.n	800cfe8 <_scanf_float+0x36c>
 800d034:	9b04      	ldr	r3, [sp, #16]
 800d036:	2b00      	cmp	r3, #0
 800d038:	d0e4      	beq.n	800d004 <_scanf_float+0x388>
 800d03a:	9905      	ldr	r1, [sp, #20]
 800d03c:	230a      	movs	r3, #10
 800d03e:	3101      	adds	r1, #1
 800d040:	4640      	mov	r0, r8
 800d042:	f000 ff81 	bl	800df48 <_strtol_r>
 800d046:	9b04      	ldr	r3, [sp, #16]
 800d048:	9e05      	ldr	r6, [sp, #20]
 800d04a:	1ac2      	subs	r2, r0, r3
 800d04c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800d050:	429e      	cmp	r6, r3
 800d052:	bf28      	it	cs
 800d054:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800d058:	4910      	ldr	r1, [pc, #64]	@ (800d09c <_scanf_float+0x420>)
 800d05a:	4630      	mov	r0, r6
 800d05c:	f000 f82e 	bl	800d0bc <siprintf>
 800d060:	e7d0      	b.n	800d004 <_scanf_float+0x388>
 800d062:	f011 0f04 	tst.w	r1, #4
 800d066:	9903      	ldr	r1, [sp, #12]
 800d068:	600a      	str	r2, [r1, #0]
 800d06a:	d1dc      	bne.n	800d026 <_scanf_float+0x3aa>
 800d06c:	681d      	ldr	r5, [r3, #0]
 800d06e:	4632      	mov	r2, r6
 800d070:	463b      	mov	r3, r7
 800d072:	4630      	mov	r0, r6
 800d074:	4639      	mov	r1, r7
 800d076:	f7f3 fd81 	bl	8000b7c <__aeabi_dcmpun>
 800d07a:	b128      	cbz	r0, 800d088 <_scanf_float+0x40c>
 800d07c:	4808      	ldr	r0, [pc, #32]	@ (800d0a0 <_scanf_float+0x424>)
 800d07e:	f000 fff7 	bl	800e070 <nanf>
 800d082:	ed85 0a00 	vstr	s0, [r5]
 800d086:	e7d1      	b.n	800d02c <_scanf_float+0x3b0>
 800d088:	4630      	mov	r0, r6
 800d08a:	4639      	mov	r1, r7
 800d08c:	f7f3 fdd4 	bl	8000c38 <__aeabi_d2f>
 800d090:	6028      	str	r0, [r5, #0]
 800d092:	e7cb      	b.n	800d02c <_scanf_float+0x3b0>
 800d094:	f04f 0900 	mov.w	r9, #0
 800d098:	e629      	b.n	800ccee <_scanf_float+0x72>
 800d09a:	bf00      	nop
 800d09c:	08010aa4 	.word	0x08010aa4
 800d0a0:	08010c44 	.word	0x08010c44

0800d0a4 <__malloc_lock>:
 800d0a4:	4801      	ldr	r0, [pc, #4]	@ (800d0ac <__malloc_lock+0x8>)
 800d0a6:	f000 bfc8 	b.w	800e03a <__retarget_lock_acquire_recursive>
 800d0aa:	bf00      	nop
 800d0ac:	20001398 	.word	0x20001398

0800d0b0 <__malloc_unlock>:
 800d0b0:	4801      	ldr	r0, [pc, #4]	@ (800d0b8 <__malloc_unlock+0x8>)
 800d0b2:	f000 bfc3 	b.w	800e03c <__retarget_lock_release_recursive>
 800d0b6:	bf00      	nop
 800d0b8:	20001398 	.word	0x20001398

0800d0bc <siprintf>:
 800d0bc:	b40e      	push	{r1, r2, r3}
 800d0be:	b500      	push	{lr}
 800d0c0:	b09c      	sub	sp, #112	@ 0x70
 800d0c2:	ab1d      	add	r3, sp, #116	@ 0x74
 800d0c4:	9002      	str	r0, [sp, #8]
 800d0c6:	9006      	str	r0, [sp, #24]
 800d0c8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d0cc:	4809      	ldr	r0, [pc, #36]	@ (800d0f4 <siprintf+0x38>)
 800d0ce:	9107      	str	r1, [sp, #28]
 800d0d0:	9104      	str	r1, [sp, #16]
 800d0d2:	4909      	ldr	r1, [pc, #36]	@ (800d0f8 <siprintf+0x3c>)
 800d0d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800d0d8:	9105      	str	r1, [sp, #20]
 800d0da:	6800      	ldr	r0, [r0, #0]
 800d0dc:	9301      	str	r3, [sp, #4]
 800d0de:	a902      	add	r1, sp, #8
 800d0e0:	f002 fa14 	bl	800f50c <_svfiprintf_r>
 800d0e4:	9b02      	ldr	r3, [sp, #8]
 800d0e6:	2200      	movs	r2, #0
 800d0e8:	701a      	strb	r2, [r3, #0]
 800d0ea:	b01c      	add	sp, #112	@ 0x70
 800d0ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800d0f0:	b003      	add	sp, #12
 800d0f2:	4770      	bx	lr
 800d0f4:	200001a4 	.word	0x200001a4
 800d0f8:	ffff0208 	.word	0xffff0208

0800d0fc <std>:
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	b510      	push	{r4, lr}
 800d100:	4604      	mov	r4, r0
 800d102:	e9c0 3300 	strd	r3, r3, [r0]
 800d106:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d10a:	6083      	str	r3, [r0, #8]
 800d10c:	8181      	strh	r1, [r0, #12]
 800d10e:	6643      	str	r3, [r0, #100]	@ 0x64
 800d110:	81c2      	strh	r2, [r0, #14]
 800d112:	6183      	str	r3, [r0, #24]
 800d114:	4619      	mov	r1, r3
 800d116:	2208      	movs	r2, #8
 800d118:	305c      	adds	r0, #92	@ 0x5c
 800d11a:	f000 ff47 	bl	800dfac <memset>
 800d11e:	4b0d      	ldr	r3, [pc, #52]	@ (800d154 <std+0x58>)
 800d120:	6263      	str	r3, [r4, #36]	@ 0x24
 800d122:	4b0d      	ldr	r3, [pc, #52]	@ (800d158 <std+0x5c>)
 800d124:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d126:	4b0d      	ldr	r3, [pc, #52]	@ (800d15c <std+0x60>)
 800d128:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d12a:	4b0d      	ldr	r3, [pc, #52]	@ (800d160 <std+0x64>)
 800d12c:	6323      	str	r3, [r4, #48]	@ 0x30
 800d12e:	4b0d      	ldr	r3, [pc, #52]	@ (800d164 <std+0x68>)
 800d130:	6224      	str	r4, [r4, #32]
 800d132:	429c      	cmp	r4, r3
 800d134:	d006      	beq.n	800d144 <std+0x48>
 800d136:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d13a:	4294      	cmp	r4, r2
 800d13c:	d002      	beq.n	800d144 <std+0x48>
 800d13e:	33d0      	adds	r3, #208	@ 0xd0
 800d140:	429c      	cmp	r4, r3
 800d142:	d105      	bne.n	800d150 <std+0x54>
 800d144:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d148:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d14c:	f000 bf74 	b.w	800e038 <__retarget_lock_init_recursive>
 800d150:	bd10      	pop	{r4, pc}
 800d152:	bf00      	nop
 800d154:	080101e5 	.word	0x080101e5
 800d158:	08010207 	.word	0x08010207
 800d15c:	0801023f 	.word	0x0801023f
 800d160:	08010263 	.word	0x08010263
 800d164:	2000125c 	.word	0x2000125c

0800d168 <stdio_exit_handler>:
 800d168:	4a02      	ldr	r2, [pc, #8]	@ (800d174 <stdio_exit_handler+0xc>)
 800d16a:	4903      	ldr	r1, [pc, #12]	@ (800d178 <stdio_exit_handler+0x10>)
 800d16c:	4803      	ldr	r0, [pc, #12]	@ (800d17c <stdio_exit_handler+0x14>)
 800d16e:	f000 beed 	b.w	800df4c <_fwalk_sglue>
 800d172:	bf00      	nop
 800d174:	2000002c 	.word	0x2000002c
 800d178:	0800f831 	.word	0x0800f831
 800d17c:	200001a8 	.word	0x200001a8

0800d180 <cleanup_stdio>:
 800d180:	6841      	ldr	r1, [r0, #4]
 800d182:	4b0c      	ldr	r3, [pc, #48]	@ (800d1b4 <cleanup_stdio+0x34>)
 800d184:	4299      	cmp	r1, r3
 800d186:	b510      	push	{r4, lr}
 800d188:	4604      	mov	r4, r0
 800d18a:	d001      	beq.n	800d190 <cleanup_stdio+0x10>
 800d18c:	f002 fb50 	bl	800f830 <_fflush_r>
 800d190:	68a1      	ldr	r1, [r4, #8]
 800d192:	4b09      	ldr	r3, [pc, #36]	@ (800d1b8 <cleanup_stdio+0x38>)
 800d194:	4299      	cmp	r1, r3
 800d196:	d002      	beq.n	800d19e <cleanup_stdio+0x1e>
 800d198:	4620      	mov	r0, r4
 800d19a:	f002 fb49 	bl	800f830 <_fflush_r>
 800d19e:	68e1      	ldr	r1, [r4, #12]
 800d1a0:	4b06      	ldr	r3, [pc, #24]	@ (800d1bc <cleanup_stdio+0x3c>)
 800d1a2:	4299      	cmp	r1, r3
 800d1a4:	d004      	beq.n	800d1b0 <cleanup_stdio+0x30>
 800d1a6:	4620      	mov	r0, r4
 800d1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1ac:	f002 bb40 	b.w	800f830 <_fflush_r>
 800d1b0:	bd10      	pop	{r4, pc}
 800d1b2:	bf00      	nop
 800d1b4:	2000125c 	.word	0x2000125c
 800d1b8:	200012c4 	.word	0x200012c4
 800d1bc:	2000132c 	.word	0x2000132c

0800d1c0 <global_stdio_init.part.0>:
 800d1c0:	b510      	push	{r4, lr}
 800d1c2:	4b0b      	ldr	r3, [pc, #44]	@ (800d1f0 <global_stdio_init.part.0+0x30>)
 800d1c4:	4c0b      	ldr	r4, [pc, #44]	@ (800d1f4 <global_stdio_init.part.0+0x34>)
 800d1c6:	4a0c      	ldr	r2, [pc, #48]	@ (800d1f8 <global_stdio_init.part.0+0x38>)
 800d1c8:	601a      	str	r2, [r3, #0]
 800d1ca:	4620      	mov	r0, r4
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	2104      	movs	r1, #4
 800d1d0:	f7ff ff94 	bl	800d0fc <std>
 800d1d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d1d8:	2201      	movs	r2, #1
 800d1da:	2109      	movs	r1, #9
 800d1dc:	f7ff ff8e 	bl	800d0fc <std>
 800d1e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d1e4:	2202      	movs	r2, #2
 800d1e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d1ea:	2112      	movs	r1, #18
 800d1ec:	f7ff bf86 	b.w	800d0fc <std>
 800d1f0:	20001394 	.word	0x20001394
 800d1f4:	2000125c 	.word	0x2000125c
 800d1f8:	0800d169 	.word	0x0800d169

0800d1fc <__sfp_lock_acquire>:
 800d1fc:	4801      	ldr	r0, [pc, #4]	@ (800d204 <__sfp_lock_acquire+0x8>)
 800d1fe:	f000 bf1c 	b.w	800e03a <__retarget_lock_acquire_recursive>
 800d202:	bf00      	nop
 800d204:	20001399 	.word	0x20001399

0800d208 <__sfp_lock_release>:
 800d208:	4801      	ldr	r0, [pc, #4]	@ (800d210 <__sfp_lock_release+0x8>)
 800d20a:	f000 bf17 	b.w	800e03c <__retarget_lock_release_recursive>
 800d20e:	bf00      	nop
 800d210:	20001399 	.word	0x20001399

0800d214 <__sinit>:
 800d214:	b510      	push	{r4, lr}
 800d216:	4604      	mov	r4, r0
 800d218:	f7ff fff0 	bl	800d1fc <__sfp_lock_acquire>
 800d21c:	6a23      	ldr	r3, [r4, #32]
 800d21e:	b11b      	cbz	r3, 800d228 <__sinit+0x14>
 800d220:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d224:	f7ff bff0 	b.w	800d208 <__sfp_lock_release>
 800d228:	4b04      	ldr	r3, [pc, #16]	@ (800d23c <__sinit+0x28>)
 800d22a:	6223      	str	r3, [r4, #32]
 800d22c:	4b04      	ldr	r3, [pc, #16]	@ (800d240 <__sinit+0x2c>)
 800d22e:	681b      	ldr	r3, [r3, #0]
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1f5      	bne.n	800d220 <__sinit+0xc>
 800d234:	f7ff ffc4 	bl	800d1c0 <global_stdio_init.part.0>
 800d238:	e7f2      	b.n	800d220 <__sinit+0xc>
 800d23a:	bf00      	nop
 800d23c:	0800d181 	.word	0x0800d181
 800d240:	20001394 	.word	0x20001394

0800d244 <sulp>:
 800d244:	b570      	push	{r4, r5, r6, lr}
 800d246:	4604      	mov	r4, r0
 800d248:	460d      	mov	r5, r1
 800d24a:	ec45 4b10 	vmov	d0, r4, r5
 800d24e:	4616      	mov	r6, r2
 800d250:	f002 fe8a 	bl	800ff68 <__ulp>
 800d254:	ec51 0b10 	vmov	r0, r1, d0
 800d258:	b17e      	cbz	r6, 800d27a <sulp+0x36>
 800d25a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d25e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d262:	2b00      	cmp	r3, #0
 800d264:	dd09      	ble.n	800d27a <sulp+0x36>
 800d266:	051b      	lsls	r3, r3, #20
 800d268:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800d26c:	2400      	movs	r4, #0
 800d26e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800d272:	4622      	mov	r2, r4
 800d274:	462b      	mov	r3, r5
 800d276:	f7f3 f9e7 	bl	8000648 <__aeabi_dmul>
 800d27a:	ec41 0b10 	vmov	d0, r0, r1
 800d27e:	bd70      	pop	{r4, r5, r6, pc}

0800d280 <_strtod_l>:
 800d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d284:	b09f      	sub	sp, #124	@ 0x7c
 800d286:	460c      	mov	r4, r1
 800d288:	9217      	str	r2, [sp, #92]	@ 0x5c
 800d28a:	2200      	movs	r2, #0
 800d28c:	921a      	str	r2, [sp, #104]	@ 0x68
 800d28e:	9005      	str	r0, [sp, #20]
 800d290:	f04f 0a00 	mov.w	sl, #0
 800d294:	f04f 0b00 	mov.w	fp, #0
 800d298:	460a      	mov	r2, r1
 800d29a:	9219      	str	r2, [sp, #100]	@ 0x64
 800d29c:	7811      	ldrb	r1, [r2, #0]
 800d29e:	292b      	cmp	r1, #43	@ 0x2b
 800d2a0:	d04a      	beq.n	800d338 <_strtod_l+0xb8>
 800d2a2:	d838      	bhi.n	800d316 <_strtod_l+0x96>
 800d2a4:	290d      	cmp	r1, #13
 800d2a6:	d832      	bhi.n	800d30e <_strtod_l+0x8e>
 800d2a8:	2908      	cmp	r1, #8
 800d2aa:	d832      	bhi.n	800d312 <_strtod_l+0x92>
 800d2ac:	2900      	cmp	r1, #0
 800d2ae:	d03b      	beq.n	800d328 <_strtod_l+0xa8>
 800d2b0:	2200      	movs	r2, #0
 800d2b2:	920b      	str	r2, [sp, #44]	@ 0x2c
 800d2b4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800d2b6:	782a      	ldrb	r2, [r5, #0]
 800d2b8:	2a30      	cmp	r2, #48	@ 0x30
 800d2ba:	f040 80b3 	bne.w	800d424 <_strtod_l+0x1a4>
 800d2be:	786a      	ldrb	r2, [r5, #1]
 800d2c0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d2c4:	2a58      	cmp	r2, #88	@ 0x58
 800d2c6:	d16e      	bne.n	800d3a6 <_strtod_l+0x126>
 800d2c8:	9302      	str	r3, [sp, #8]
 800d2ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2cc:	9301      	str	r3, [sp, #4]
 800d2ce:	ab1a      	add	r3, sp, #104	@ 0x68
 800d2d0:	9300      	str	r3, [sp, #0]
 800d2d2:	4a8e      	ldr	r2, [pc, #568]	@ (800d50c <_strtod_l+0x28c>)
 800d2d4:	9805      	ldr	r0, [sp, #20]
 800d2d6:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d2d8:	a919      	add	r1, sp, #100	@ 0x64
 800d2da:	f001 fdeb 	bl	800eeb4 <__gethex>
 800d2de:	f010 060f 	ands.w	r6, r0, #15
 800d2e2:	4604      	mov	r4, r0
 800d2e4:	d005      	beq.n	800d2f2 <_strtod_l+0x72>
 800d2e6:	2e06      	cmp	r6, #6
 800d2e8:	d128      	bne.n	800d33c <_strtod_l+0xbc>
 800d2ea:	3501      	adds	r5, #1
 800d2ec:	2300      	movs	r3, #0
 800d2ee:	9519      	str	r5, [sp, #100]	@ 0x64
 800d2f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d2f2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f040 858e 	bne.w	800de16 <_strtod_l+0xb96>
 800d2fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2fc:	b1cb      	cbz	r3, 800d332 <_strtod_l+0xb2>
 800d2fe:	4652      	mov	r2, sl
 800d300:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800d304:	ec43 2b10 	vmov	d0, r2, r3
 800d308:	b01f      	add	sp, #124	@ 0x7c
 800d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30e:	2920      	cmp	r1, #32
 800d310:	d1ce      	bne.n	800d2b0 <_strtod_l+0x30>
 800d312:	3201      	adds	r2, #1
 800d314:	e7c1      	b.n	800d29a <_strtod_l+0x1a>
 800d316:	292d      	cmp	r1, #45	@ 0x2d
 800d318:	d1ca      	bne.n	800d2b0 <_strtod_l+0x30>
 800d31a:	2101      	movs	r1, #1
 800d31c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d31e:	1c51      	adds	r1, r2, #1
 800d320:	9119      	str	r1, [sp, #100]	@ 0x64
 800d322:	7852      	ldrb	r2, [r2, #1]
 800d324:	2a00      	cmp	r2, #0
 800d326:	d1c5      	bne.n	800d2b4 <_strtod_l+0x34>
 800d328:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d32a:	9419      	str	r4, [sp, #100]	@ 0x64
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	f040 8570 	bne.w	800de12 <_strtod_l+0xb92>
 800d332:	4652      	mov	r2, sl
 800d334:	465b      	mov	r3, fp
 800d336:	e7e5      	b.n	800d304 <_strtod_l+0x84>
 800d338:	2100      	movs	r1, #0
 800d33a:	e7ef      	b.n	800d31c <_strtod_l+0x9c>
 800d33c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d33e:	b13a      	cbz	r2, 800d350 <_strtod_l+0xd0>
 800d340:	2135      	movs	r1, #53	@ 0x35
 800d342:	a81c      	add	r0, sp, #112	@ 0x70
 800d344:	f002 ff0a 	bl	801015c <__copybits>
 800d348:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d34a:	9805      	ldr	r0, [sp, #20]
 800d34c:	f002 fad8 	bl	800f900 <_Bfree>
 800d350:	3e01      	subs	r6, #1
 800d352:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800d354:	2e04      	cmp	r6, #4
 800d356:	d806      	bhi.n	800d366 <_strtod_l+0xe6>
 800d358:	e8df f006 	tbb	[pc, r6]
 800d35c:	201d0314 	.word	0x201d0314
 800d360:	14          	.byte	0x14
 800d361:	00          	.byte	0x00
 800d362:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800d366:	05e1      	lsls	r1, r4, #23
 800d368:	bf48      	it	mi
 800d36a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800d36e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d372:	0d1b      	lsrs	r3, r3, #20
 800d374:	051b      	lsls	r3, r3, #20
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1bb      	bne.n	800d2f2 <_strtod_l+0x72>
 800d37a:	f000 fe33 	bl	800dfe4 <__errno>
 800d37e:	2322      	movs	r3, #34	@ 0x22
 800d380:	6003      	str	r3, [r0, #0]
 800d382:	e7b6      	b.n	800d2f2 <_strtod_l+0x72>
 800d384:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800d388:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800d38c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800d390:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d394:	e7e7      	b.n	800d366 <_strtod_l+0xe6>
 800d396:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800d514 <_strtod_l+0x294>
 800d39a:	e7e4      	b.n	800d366 <_strtod_l+0xe6>
 800d39c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800d3a0:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800d3a4:	e7df      	b.n	800d366 <_strtod_l+0xe6>
 800d3a6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3a8:	1c5a      	adds	r2, r3, #1
 800d3aa:	9219      	str	r2, [sp, #100]	@ 0x64
 800d3ac:	785b      	ldrb	r3, [r3, #1]
 800d3ae:	2b30      	cmp	r3, #48	@ 0x30
 800d3b0:	d0f9      	beq.n	800d3a6 <_strtod_l+0x126>
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d09d      	beq.n	800d2f2 <_strtod_l+0x72>
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3ba:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d3bc:	930c      	str	r3, [sp, #48]	@ 0x30
 800d3be:	2300      	movs	r3, #0
 800d3c0:	9308      	str	r3, [sp, #32]
 800d3c2:	930a      	str	r3, [sp, #40]	@ 0x28
 800d3c4:	461f      	mov	r7, r3
 800d3c6:	220a      	movs	r2, #10
 800d3c8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800d3ca:	7805      	ldrb	r5, [r0, #0]
 800d3cc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800d3d0:	b2d9      	uxtb	r1, r3
 800d3d2:	2909      	cmp	r1, #9
 800d3d4:	d928      	bls.n	800d428 <_strtod_l+0x1a8>
 800d3d6:	494e      	ldr	r1, [pc, #312]	@ (800d510 <_strtod_l+0x290>)
 800d3d8:	2201      	movs	r2, #1
 800d3da:	f000 fdd5 	bl	800df88 <strncmp>
 800d3de:	2800      	cmp	r0, #0
 800d3e0:	d032      	beq.n	800d448 <_strtod_l+0x1c8>
 800d3e2:	2000      	movs	r0, #0
 800d3e4:	462a      	mov	r2, r5
 800d3e6:	4681      	mov	r9, r0
 800d3e8:	463d      	mov	r5, r7
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	2a65      	cmp	r2, #101	@ 0x65
 800d3ee:	d001      	beq.n	800d3f4 <_strtod_l+0x174>
 800d3f0:	2a45      	cmp	r2, #69	@ 0x45
 800d3f2:	d114      	bne.n	800d41e <_strtod_l+0x19e>
 800d3f4:	b91d      	cbnz	r5, 800d3fe <_strtod_l+0x17e>
 800d3f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d3f8:	4302      	orrs	r2, r0
 800d3fa:	d095      	beq.n	800d328 <_strtod_l+0xa8>
 800d3fc:	2500      	movs	r5, #0
 800d3fe:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800d400:	1c62      	adds	r2, r4, #1
 800d402:	9219      	str	r2, [sp, #100]	@ 0x64
 800d404:	7862      	ldrb	r2, [r4, #1]
 800d406:	2a2b      	cmp	r2, #43	@ 0x2b
 800d408:	d077      	beq.n	800d4fa <_strtod_l+0x27a>
 800d40a:	2a2d      	cmp	r2, #45	@ 0x2d
 800d40c:	d07b      	beq.n	800d506 <_strtod_l+0x286>
 800d40e:	f04f 0c00 	mov.w	ip, #0
 800d412:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800d416:	2909      	cmp	r1, #9
 800d418:	f240 8082 	bls.w	800d520 <_strtod_l+0x2a0>
 800d41c:	9419      	str	r4, [sp, #100]	@ 0x64
 800d41e:	f04f 0800 	mov.w	r8, #0
 800d422:	e0a2      	b.n	800d56a <_strtod_l+0x2ea>
 800d424:	2300      	movs	r3, #0
 800d426:	e7c7      	b.n	800d3b8 <_strtod_l+0x138>
 800d428:	2f08      	cmp	r7, #8
 800d42a:	bfd5      	itete	le
 800d42c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800d42e:	9908      	ldrgt	r1, [sp, #32]
 800d430:	fb02 3301 	mlale	r3, r2, r1, r3
 800d434:	fb02 3301 	mlagt	r3, r2, r1, r3
 800d438:	f100 0001 	add.w	r0, r0, #1
 800d43c:	bfd4      	ite	le
 800d43e:	930a      	strle	r3, [sp, #40]	@ 0x28
 800d440:	9308      	strgt	r3, [sp, #32]
 800d442:	3701      	adds	r7, #1
 800d444:	9019      	str	r0, [sp, #100]	@ 0x64
 800d446:	e7bf      	b.n	800d3c8 <_strtod_l+0x148>
 800d448:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d44a:	1c5a      	adds	r2, r3, #1
 800d44c:	9219      	str	r2, [sp, #100]	@ 0x64
 800d44e:	785a      	ldrb	r2, [r3, #1]
 800d450:	b37f      	cbz	r7, 800d4b2 <_strtod_l+0x232>
 800d452:	4681      	mov	r9, r0
 800d454:	463d      	mov	r5, r7
 800d456:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800d45a:	2b09      	cmp	r3, #9
 800d45c:	d912      	bls.n	800d484 <_strtod_l+0x204>
 800d45e:	2301      	movs	r3, #1
 800d460:	e7c4      	b.n	800d3ec <_strtod_l+0x16c>
 800d462:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d464:	1c5a      	adds	r2, r3, #1
 800d466:	9219      	str	r2, [sp, #100]	@ 0x64
 800d468:	785a      	ldrb	r2, [r3, #1]
 800d46a:	3001      	adds	r0, #1
 800d46c:	2a30      	cmp	r2, #48	@ 0x30
 800d46e:	d0f8      	beq.n	800d462 <_strtod_l+0x1e2>
 800d470:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800d474:	2b08      	cmp	r3, #8
 800d476:	f200 84d3 	bhi.w	800de20 <_strtod_l+0xba0>
 800d47a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d47c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d47e:	4681      	mov	r9, r0
 800d480:	2000      	movs	r0, #0
 800d482:	4605      	mov	r5, r0
 800d484:	3a30      	subs	r2, #48	@ 0x30
 800d486:	f100 0301 	add.w	r3, r0, #1
 800d48a:	d02a      	beq.n	800d4e2 <_strtod_l+0x262>
 800d48c:	4499      	add	r9, r3
 800d48e:	eb00 0c05 	add.w	ip, r0, r5
 800d492:	462b      	mov	r3, r5
 800d494:	210a      	movs	r1, #10
 800d496:	4563      	cmp	r3, ip
 800d498:	d10d      	bne.n	800d4b6 <_strtod_l+0x236>
 800d49a:	1c69      	adds	r1, r5, #1
 800d49c:	4401      	add	r1, r0
 800d49e:	4428      	add	r0, r5
 800d4a0:	2808      	cmp	r0, #8
 800d4a2:	dc16      	bgt.n	800d4d2 <_strtod_l+0x252>
 800d4a4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d4a6:	230a      	movs	r3, #10
 800d4a8:	fb03 2300 	mla	r3, r3, r0, r2
 800d4ac:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	e018      	b.n	800d4e4 <_strtod_l+0x264>
 800d4b2:	4638      	mov	r0, r7
 800d4b4:	e7da      	b.n	800d46c <_strtod_l+0x1ec>
 800d4b6:	2b08      	cmp	r3, #8
 800d4b8:	f103 0301 	add.w	r3, r3, #1
 800d4bc:	dc03      	bgt.n	800d4c6 <_strtod_l+0x246>
 800d4be:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d4c0:	434e      	muls	r6, r1
 800d4c2:	960a      	str	r6, [sp, #40]	@ 0x28
 800d4c4:	e7e7      	b.n	800d496 <_strtod_l+0x216>
 800d4c6:	2b10      	cmp	r3, #16
 800d4c8:	bfde      	ittt	le
 800d4ca:	9e08      	ldrle	r6, [sp, #32]
 800d4cc:	434e      	mulle	r6, r1
 800d4ce:	9608      	strle	r6, [sp, #32]
 800d4d0:	e7e1      	b.n	800d496 <_strtod_l+0x216>
 800d4d2:	280f      	cmp	r0, #15
 800d4d4:	dceb      	bgt.n	800d4ae <_strtod_l+0x22e>
 800d4d6:	9808      	ldr	r0, [sp, #32]
 800d4d8:	230a      	movs	r3, #10
 800d4da:	fb03 2300 	mla	r3, r3, r0, r2
 800d4de:	9308      	str	r3, [sp, #32]
 800d4e0:	e7e5      	b.n	800d4ae <_strtod_l+0x22e>
 800d4e2:	4629      	mov	r1, r5
 800d4e4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d4e6:	1c50      	adds	r0, r2, #1
 800d4e8:	9019      	str	r0, [sp, #100]	@ 0x64
 800d4ea:	7852      	ldrb	r2, [r2, #1]
 800d4ec:	4618      	mov	r0, r3
 800d4ee:	460d      	mov	r5, r1
 800d4f0:	e7b1      	b.n	800d456 <_strtod_l+0x1d6>
 800d4f2:	f04f 0900 	mov.w	r9, #0
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	e77d      	b.n	800d3f6 <_strtod_l+0x176>
 800d4fa:	f04f 0c00 	mov.w	ip, #0
 800d4fe:	1ca2      	adds	r2, r4, #2
 800d500:	9219      	str	r2, [sp, #100]	@ 0x64
 800d502:	78a2      	ldrb	r2, [r4, #2]
 800d504:	e785      	b.n	800d412 <_strtod_l+0x192>
 800d506:	f04f 0c01 	mov.w	ip, #1
 800d50a:	e7f8      	b.n	800d4fe <_strtod_l+0x27e>
 800d50c:	08010ac0 	.word	0x08010ac0
 800d510:	08010aa9 	.word	0x08010aa9
 800d514:	7ff00000 	.word	0x7ff00000
 800d518:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d51a:	1c51      	adds	r1, r2, #1
 800d51c:	9119      	str	r1, [sp, #100]	@ 0x64
 800d51e:	7852      	ldrb	r2, [r2, #1]
 800d520:	2a30      	cmp	r2, #48	@ 0x30
 800d522:	d0f9      	beq.n	800d518 <_strtod_l+0x298>
 800d524:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800d528:	2908      	cmp	r1, #8
 800d52a:	f63f af78 	bhi.w	800d41e <_strtod_l+0x19e>
 800d52e:	3a30      	subs	r2, #48	@ 0x30
 800d530:	920e      	str	r2, [sp, #56]	@ 0x38
 800d532:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d534:	920f      	str	r2, [sp, #60]	@ 0x3c
 800d536:	f04f 080a 	mov.w	r8, #10
 800d53a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800d53c:	1c56      	adds	r6, r2, #1
 800d53e:	9619      	str	r6, [sp, #100]	@ 0x64
 800d540:	7852      	ldrb	r2, [r2, #1]
 800d542:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800d546:	f1be 0f09 	cmp.w	lr, #9
 800d54a:	d939      	bls.n	800d5c0 <_strtod_l+0x340>
 800d54c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800d54e:	1a76      	subs	r6, r6, r1
 800d550:	2e08      	cmp	r6, #8
 800d552:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800d556:	dc03      	bgt.n	800d560 <_strtod_l+0x2e0>
 800d558:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d55a:	4588      	cmp	r8, r1
 800d55c:	bfa8      	it	ge
 800d55e:	4688      	movge	r8, r1
 800d560:	f1bc 0f00 	cmp.w	ip, #0
 800d564:	d001      	beq.n	800d56a <_strtod_l+0x2ea>
 800d566:	f1c8 0800 	rsb	r8, r8, #0
 800d56a:	2d00      	cmp	r5, #0
 800d56c:	d14e      	bne.n	800d60c <_strtod_l+0x38c>
 800d56e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d570:	4308      	orrs	r0, r1
 800d572:	f47f aebe 	bne.w	800d2f2 <_strtod_l+0x72>
 800d576:	2b00      	cmp	r3, #0
 800d578:	f47f aed6 	bne.w	800d328 <_strtod_l+0xa8>
 800d57c:	2a69      	cmp	r2, #105	@ 0x69
 800d57e:	d028      	beq.n	800d5d2 <_strtod_l+0x352>
 800d580:	dc25      	bgt.n	800d5ce <_strtod_l+0x34e>
 800d582:	2a49      	cmp	r2, #73	@ 0x49
 800d584:	d025      	beq.n	800d5d2 <_strtod_l+0x352>
 800d586:	2a4e      	cmp	r2, #78	@ 0x4e
 800d588:	f47f aece 	bne.w	800d328 <_strtod_l+0xa8>
 800d58c:	499b      	ldr	r1, [pc, #620]	@ (800d7fc <_strtod_l+0x57c>)
 800d58e:	a819      	add	r0, sp, #100	@ 0x64
 800d590:	f001 feb2 	bl	800f2f8 <__match>
 800d594:	2800      	cmp	r0, #0
 800d596:	f43f aec7 	beq.w	800d328 <_strtod_l+0xa8>
 800d59a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d59c:	781b      	ldrb	r3, [r3, #0]
 800d59e:	2b28      	cmp	r3, #40	@ 0x28
 800d5a0:	d12e      	bne.n	800d600 <_strtod_l+0x380>
 800d5a2:	4997      	ldr	r1, [pc, #604]	@ (800d800 <_strtod_l+0x580>)
 800d5a4:	aa1c      	add	r2, sp, #112	@ 0x70
 800d5a6:	a819      	add	r0, sp, #100	@ 0x64
 800d5a8:	f001 feba 	bl	800f320 <__hexnan>
 800d5ac:	2805      	cmp	r0, #5
 800d5ae:	d127      	bne.n	800d600 <_strtod_l+0x380>
 800d5b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800d5b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800d5b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800d5ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800d5be:	e698      	b.n	800d2f2 <_strtod_l+0x72>
 800d5c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800d5c2:	fb08 2101 	mla	r1, r8, r1, r2
 800d5c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800d5ca:	920e      	str	r2, [sp, #56]	@ 0x38
 800d5cc:	e7b5      	b.n	800d53a <_strtod_l+0x2ba>
 800d5ce:	2a6e      	cmp	r2, #110	@ 0x6e
 800d5d0:	e7da      	b.n	800d588 <_strtod_l+0x308>
 800d5d2:	498c      	ldr	r1, [pc, #560]	@ (800d804 <_strtod_l+0x584>)
 800d5d4:	a819      	add	r0, sp, #100	@ 0x64
 800d5d6:	f001 fe8f 	bl	800f2f8 <__match>
 800d5da:	2800      	cmp	r0, #0
 800d5dc:	f43f aea4 	beq.w	800d328 <_strtod_l+0xa8>
 800d5e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5e2:	4989      	ldr	r1, [pc, #548]	@ (800d808 <_strtod_l+0x588>)
 800d5e4:	3b01      	subs	r3, #1
 800d5e6:	a819      	add	r0, sp, #100	@ 0x64
 800d5e8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d5ea:	f001 fe85 	bl	800f2f8 <__match>
 800d5ee:	b910      	cbnz	r0, 800d5f6 <_strtod_l+0x376>
 800d5f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d5f2:	3301      	adds	r3, #1
 800d5f4:	9319      	str	r3, [sp, #100]	@ 0x64
 800d5f6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800d818 <_strtod_l+0x598>
 800d5fa:	f04f 0a00 	mov.w	sl, #0
 800d5fe:	e678      	b.n	800d2f2 <_strtod_l+0x72>
 800d600:	4882      	ldr	r0, [pc, #520]	@ (800d80c <_strtod_l+0x58c>)
 800d602:	f000 fd2d 	bl	800e060 <nan>
 800d606:	ec5b ab10 	vmov	sl, fp, d0
 800d60a:	e672      	b.n	800d2f2 <_strtod_l+0x72>
 800d60c:	eba8 0309 	sub.w	r3, r8, r9
 800d610:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d612:	9309      	str	r3, [sp, #36]	@ 0x24
 800d614:	2f00      	cmp	r7, #0
 800d616:	bf08      	it	eq
 800d618:	462f      	moveq	r7, r5
 800d61a:	2d10      	cmp	r5, #16
 800d61c:	462c      	mov	r4, r5
 800d61e:	bfa8      	it	ge
 800d620:	2410      	movge	r4, #16
 800d622:	f7f2 ff97 	bl	8000554 <__aeabi_ui2d>
 800d626:	2d09      	cmp	r5, #9
 800d628:	4682      	mov	sl, r0
 800d62a:	468b      	mov	fp, r1
 800d62c:	dc13      	bgt.n	800d656 <_strtod_l+0x3d6>
 800d62e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d630:	2b00      	cmp	r3, #0
 800d632:	f43f ae5e 	beq.w	800d2f2 <_strtod_l+0x72>
 800d636:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d638:	dd78      	ble.n	800d72c <_strtod_l+0x4ac>
 800d63a:	2b16      	cmp	r3, #22
 800d63c:	dc5f      	bgt.n	800d6fe <_strtod_l+0x47e>
 800d63e:	4974      	ldr	r1, [pc, #464]	@ (800d810 <_strtod_l+0x590>)
 800d640:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d644:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d648:	4652      	mov	r2, sl
 800d64a:	465b      	mov	r3, fp
 800d64c:	f7f2 fffc 	bl	8000648 <__aeabi_dmul>
 800d650:	4682      	mov	sl, r0
 800d652:	468b      	mov	fp, r1
 800d654:	e64d      	b.n	800d2f2 <_strtod_l+0x72>
 800d656:	4b6e      	ldr	r3, [pc, #440]	@ (800d810 <_strtod_l+0x590>)
 800d658:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d65c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800d660:	f7f2 fff2 	bl	8000648 <__aeabi_dmul>
 800d664:	4682      	mov	sl, r0
 800d666:	9808      	ldr	r0, [sp, #32]
 800d668:	468b      	mov	fp, r1
 800d66a:	f7f2 ff73 	bl	8000554 <__aeabi_ui2d>
 800d66e:	4602      	mov	r2, r0
 800d670:	460b      	mov	r3, r1
 800d672:	4650      	mov	r0, sl
 800d674:	4659      	mov	r1, fp
 800d676:	f7f2 fe31 	bl	80002dc <__adddf3>
 800d67a:	2d0f      	cmp	r5, #15
 800d67c:	4682      	mov	sl, r0
 800d67e:	468b      	mov	fp, r1
 800d680:	ddd5      	ble.n	800d62e <_strtod_l+0x3ae>
 800d682:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d684:	1b2c      	subs	r4, r5, r4
 800d686:	441c      	add	r4, r3
 800d688:	2c00      	cmp	r4, #0
 800d68a:	f340 8096 	ble.w	800d7ba <_strtod_l+0x53a>
 800d68e:	f014 030f 	ands.w	r3, r4, #15
 800d692:	d00a      	beq.n	800d6aa <_strtod_l+0x42a>
 800d694:	495e      	ldr	r1, [pc, #376]	@ (800d810 <_strtod_l+0x590>)
 800d696:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d69a:	4652      	mov	r2, sl
 800d69c:	465b      	mov	r3, fp
 800d69e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d6a2:	f7f2 ffd1 	bl	8000648 <__aeabi_dmul>
 800d6a6:	4682      	mov	sl, r0
 800d6a8:	468b      	mov	fp, r1
 800d6aa:	f034 040f 	bics.w	r4, r4, #15
 800d6ae:	d073      	beq.n	800d798 <_strtod_l+0x518>
 800d6b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800d6b4:	dd48      	ble.n	800d748 <_strtod_l+0x4c8>
 800d6b6:	2400      	movs	r4, #0
 800d6b8:	46a0      	mov	r8, r4
 800d6ba:	940a      	str	r4, [sp, #40]	@ 0x28
 800d6bc:	46a1      	mov	r9, r4
 800d6be:	9a05      	ldr	r2, [sp, #20]
 800d6c0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800d818 <_strtod_l+0x598>
 800d6c4:	2322      	movs	r3, #34	@ 0x22
 800d6c6:	6013      	str	r3, [r2, #0]
 800d6c8:	f04f 0a00 	mov.w	sl, #0
 800d6cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	f43f ae0f 	beq.w	800d2f2 <_strtod_l+0x72>
 800d6d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d6d6:	9805      	ldr	r0, [sp, #20]
 800d6d8:	f002 f912 	bl	800f900 <_Bfree>
 800d6dc:	9805      	ldr	r0, [sp, #20]
 800d6de:	4649      	mov	r1, r9
 800d6e0:	f002 f90e 	bl	800f900 <_Bfree>
 800d6e4:	9805      	ldr	r0, [sp, #20]
 800d6e6:	4641      	mov	r1, r8
 800d6e8:	f002 f90a 	bl	800f900 <_Bfree>
 800d6ec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d6ee:	9805      	ldr	r0, [sp, #20]
 800d6f0:	f002 f906 	bl	800f900 <_Bfree>
 800d6f4:	9805      	ldr	r0, [sp, #20]
 800d6f6:	4621      	mov	r1, r4
 800d6f8:	f002 f902 	bl	800f900 <_Bfree>
 800d6fc:	e5f9      	b.n	800d2f2 <_strtod_l+0x72>
 800d6fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d700:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800d704:	4293      	cmp	r3, r2
 800d706:	dbbc      	blt.n	800d682 <_strtod_l+0x402>
 800d708:	4c41      	ldr	r4, [pc, #260]	@ (800d810 <_strtod_l+0x590>)
 800d70a:	f1c5 050f 	rsb	r5, r5, #15
 800d70e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d712:	4652      	mov	r2, sl
 800d714:	465b      	mov	r3, fp
 800d716:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d71a:	f7f2 ff95 	bl	8000648 <__aeabi_dmul>
 800d71e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d720:	1b5d      	subs	r5, r3, r5
 800d722:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d726:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d72a:	e78f      	b.n	800d64c <_strtod_l+0x3cc>
 800d72c:	3316      	adds	r3, #22
 800d72e:	dba8      	blt.n	800d682 <_strtod_l+0x402>
 800d730:	4b37      	ldr	r3, [pc, #220]	@ (800d810 <_strtod_l+0x590>)
 800d732:	eba9 0808 	sub.w	r8, r9, r8
 800d736:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800d73a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800d73e:	4650      	mov	r0, sl
 800d740:	4659      	mov	r1, fp
 800d742:	f7f3 f8ab 	bl	800089c <__aeabi_ddiv>
 800d746:	e783      	b.n	800d650 <_strtod_l+0x3d0>
 800d748:	4b32      	ldr	r3, [pc, #200]	@ (800d814 <_strtod_l+0x594>)
 800d74a:	9308      	str	r3, [sp, #32]
 800d74c:	2300      	movs	r3, #0
 800d74e:	1124      	asrs	r4, r4, #4
 800d750:	4650      	mov	r0, sl
 800d752:	4659      	mov	r1, fp
 800d754:	461e      	mov	r6, r3
 800d756:	2c01      	cmp	r4, #1
 800d758:	dc21      	bgt.n	800d79e <_strtod_l+0x51e>
 800d75a:	b10b      	cbz	r3, 800d760 <_strtod_l+0x4e0>
 800d75c:	4682      	mov	sl, r0
 800d75e:	468b      	mov	fp, r1
 800d760:	492c      	ldr	r1, [pc, #176]	@ (800d814 <_strtod_l+0x594>)
 800d762:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800d766:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800d76a:	4652      	mov	r2, sl
 800d76c:	465b      	mov	r3, fp
 800d76e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d772:	f7f2 ff69 	bl	8000648 <__aeabi_dmul>
 800d776:	4b28      	ldr	r3, [pc, #160]	@ (800d818 <_strtod_l+0x598>)
 800d778:	460a      	mov	r2, r1
 800d77a:	400b      	ands	r3, r1
 800d77c:	4927      	ldr	r1, [pc, #156]	@ (800d81c <_strtod_l+0x59c>)
 800d77e:	428b      	cmp	r3, r1
 800d780:	4682      	mov	sl, r0
 800d782:	d898      	bhi.n	800d6b6 <_strtod_l+0x436>
 800d784:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d788:	428b      	cmp	r3, r1
 800d78a:	bf86      	itte	hi
 800d78c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800d820 <_strtod_l+0x5a0>
 800d790:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800d794:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d798:	2300      	movs	r3, #0
 800d79a:	9308      	str	r3, [sp, #32]
 800d79c:	e07a      	b.n	800d894 <_strtod_l+0x614>
 800d79e:	07e2      	lsls	r2, r4, #31
 800d7a0:	d505      	bpl.n	800d7ae <_strtod_l+0x52e>
 800d7a2:	9b08      	ldr	r3, [sp, #32]
 800d7a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a8:	f7f2 ff4e 	bl	8000648 <__aeabi_dmul>
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	9a08      	ldr	r2, [sp, #32]
 800d7b0:	3208      	adds	r2, #8
 800d7b2:	3601      	adds	r6, #1
 800d7b4:	1064      	asrs	r4, r4, #1
 800d7b6:	9208      	str	r2, [sp, #32]
 800d7b8:	e7cd      	b.n	800d756 <_strtod_l+0x4d6>
 800d7ba:	d0ed      	beq.n	800d798 <_strtod_l+0x518>
 800d7bc:	4264      	negs	r4, r4
 800d7be:	f014 020f 	ands.w	r2, r4, #15
 800d7c2:	d00a      	beq.n	800d7da <_strtod_l+0x55a>
 800d7c4:	4b12      	ldr	r3, [pc, #72]	@ (800d810 <_strtod_l+0x590>)
 800d7c6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d7ca:	4650      	mov	r0, sl
 800d7cc:	4659      	mov	r1, fp
 800d7ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7d2:	f7f3 f863 	bl	800089c <__aeabi_ddiv>
 800d7d6:	4682      	mov	sl, r0
 800d7d8:	468b      	mov	fp, r1
 800d7da:	1124      	asrs	r4, r4, #4
 800d7dc:	d0dc      	beq.n	800d798 <_strtod_l+0x518>
 800d7de:	2c1f      	cmp	r4, #31
 800d7e0:	dd20      	ble.n	800d824 <_strtod_l+0x5a4>
 800d7e2:	2400      	movs	r4, #0
 800d7e4:	46a0      	mov	r8, r4
 800d7e6:	940a      	str	r4, [sp, #40]	@ 0x28
 800d7e8:	46a1      	mov	r9, r4
 800d7ea:	9a05      	ldr	r2, [sp, #20]
 800d7ec:	2322      	movs	r3, #34	@ 0x22
 800d7ee:	f04f 0a00 	mov.w	sl, #0
 800d7f2:	f04f 0b00 	mov.w	fp, #0
 800d7f6:	6013      	str	r3, [r2, #0]
 800d7f8:	e768      	b.n	800d6cc <_strtod_l+0x44c>
 800d7fa:	bf00      	nop
 800d7fc:	08010a7d 	.word	0x08010a7d
 800d800:	08010aac 	.word	0x08010aac
 800d804:	08010a75 	.word	0x08010a75
 800d808:	08010c48 	.word	0x08010c48
 800d80c:	08010c44 	.word	0x08010c44
 800d810:	08010dd0 	.word	0x08010dd0
 800d814:	08010da8 	.word	0x08010da8
 800d818:	7ff00000 	.word	0x7ff00000
 800d81c:	7ca00000 	.word	0x7ca00000
 800d820:	7fefffff 	.word	0x7fefffff
 800d824:	f014 0310 	ands.w	r3, r4, #16
 800d828:	bf18      	it	ne
 800d82a:	236a      	movne	r3, #106	@ 0x6a
 800d82c:	4ea9      	ldr	r6, [pc, #676]	@ (800dad4 <_strtod_l+0x854>)
 800d82e:	9308      	str	r3, [sp, #32]
 800d830:	4650      	mov	r0, sl
 800d832:	4659      	mov	r1, fp
 800d834:	2300      	movs	r3, #0
 800d836:	07e2      	lsls	r2, r4, #31
 800d838:	d504      	bpl.n	800d844 <_strtod_l+0x5c4>
 800d83a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d83e:	f7f2 ff03 	bl	8000648 <__aeabi_dmul>
 800d842:	2301      	movs	r3, #1
 800d844:	1064      	asrs	r4, r4, #1
 800d846:	f106 0608 	add.w	r6, r6, #8
 800d84a:	d1f4      	bne.n	800d836 <_strtod_l+0x5b6>
 800d84c:	b10b      	cbz	r3, 800d852 <_strtod_l+0x5d2>
 800d84e:	4682      	mov	sl, r0
 800d850:	468b      	mov	fp, r1
 800d852:	9b08      	ldr	r3, [sp, #32]
 800d854:	b1b3      	cbz	r3, 800d884 <_strtod_l+0x604>
 800d856:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d85a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d85e:	2b00      	cmp	r3, #0
 800d860:	4659      	mov	r1, fp
 800d862:	dd0f      	ble.n	800d884 <_strtod_l+0x604>
 800d864:	2b1f      	cmp	r3, #31
 800d866:	dd55      	ble.n	800d914 <_strtod_l+0x694>
 800d868:	2b34      	cmp	r3, #52	@ 0x34
 800d86a:	bfde      	ittt	le
 800d86c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 800d870:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d874:	4093      	lslle	r3, r2
 800d876:	f04f 0a00 	mov.w	sl, #0
 800d87a:	bfcc      	ite	gt
 800d87c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d880:	ea03 0b01 	andle.w	fp, r3, r1
 800d884:	2200      	movs	r2, #0
 800d886:	2300      	movs	r3, #0
 800d888:	4650      	mov	r0, sl
 800d88a:	4659      	mov	r1, fp
 800d88c:	f7f3 f944 	bl	8000b18 <__aeabi_dcmpeq>
 800d890:	2800      	cmp	r0, #0
 800d892:	d1a6      	bne.n	800d7e2 <_strtod_l+0x562>
 800d894:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d89a:	9805      	ldr	r0, [sp, #20]
 800d89c:	462b      	mov	r3, r5
 800d89e:	463a      	mov	r2, r7
 800d8a0:	f002 f896 	bl	800f9d0 <__s2b>
 800d8a4:	900a      	str	r0, [sp, #40]	@ 0x28
 800d8a6:	2800      	cmp	r0, #0
 800d8a8:	f43f af05 	beq.w	800d6b6 <_strtod_l+0x436>
 800d8ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8ae:	2a00      	cmp	r2, #0
 800d8b0:	eba9 0308 	sub.w	r3, r9, r8
 800d8b4:	bfa8      	it	ge
 800d8b6:	2300      	movge	r3, #0
 800d8b8:	9312      	str	r3, [sp, #72]	@ 0x48
 800d8ba:	2400      	movs	r4, #0
 800d8bc:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d8c0:	9316      	str	r3, [sp, #88]	@ 0x58
 800d8c2:	46a0      	mov	r8, r4
 800d8c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8c6:	9805      	ldr	r0, [sp, #20]
 800d8c8:	6859      	ldr	r1, [r3, #4]
 800d8ca:	f001 ffd9 	bl	800f880 <_Balloc>
 800d8ce:	4681      	mov	r9, r0
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	f43f aef4 	beq.w	800d6be <_strtod_l+0x43e>
 800d8d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d8d8:	691a      	ldr	r2, [r3, #16]
 800d8da:	3202      	adds	r2, #2
 800d8dc:	f103 010c 	add.w	r1, r3, #12
 800d8e0:	0092      	lsls	r2, r2, #2
 800d8e2:	300c      	adds	r0, #12
 800d8e4:	f000 fbab 	bl	800e03e <memcpy>
 800d8e8:	ec4b ab10 	vmov	d0, sl, fp
 800d8ec:	9805      	ldr	r0, [sp, #20]
 800d8ee:	aa1c      	add	r2, sp, #112	@ 0x70
 800d8f0:	a91b      	add	r1, sp, #108	@ 0x6c
 800d8f2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d8f6:	f002 fba7 	bl	8010048 <__d2b>
 800d8fa:	901a      	str	r0, [sp, #104]	@ 0x68
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	f43f aede 	beq.w	800d6be <_strtod_l+0x43e>
 800d902:	9805      	ldr	r0, [sp, #20]
 800d904:	2101      	movs	r1, #1
 800d906:	f002 f8f9 	bl	800fafc <__i2b>
 800d90a:	4680      	mov	r8, r0
 800d90c:	b948      	cbnz	r0, 800d922 <_strtod_l+0x6a2>
 800d90e:	f04f 0800 	mov.w	r8, #0
 800d912:	e6d4      	b.n	800d6be <_strtod_l+0x43e>
 800d914:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d918:	fa02 f303 	lsl.w	r3, r2, r3
 800d91c:	ea03 0a0a 	and.w	sl, r3, sl
 800d920:	e7b0      	b.n	800d884 <_strtod_l+0x604>
 800d922:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d924:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d926:	2d00      	cmp	r5, #0
 800d928:	bfab      	itete	ge
 800d92a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d92c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d92e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d930:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d932:	bfac      	ite	ge
 800d934:	18ef      	addge	r7, r5, r3
 800d936:	1b5e      	sublt	r6, r3, r5
 800d938:	9b08      	ldr	r3, [sp, #32]
 800d93a:	1aed      	subs	r5, r5, r3
 800d93c:	4415      	add	r5, r2
 800d93e:	4b66      	ldr	r3, [pc, #408]	@ (800dad8 <_strtod_l+0x858>)
 800d940:	3d01      	subs	r5, #1
 800d942:	429d      	cmp	r5, r3
 800d944:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d948:	da50      	bge.n	800d9ec <_strtod_l+0x76c>
 800d94a:	1b5b      	subs	r3, r3, r5
 800d94c:	2b1f      	cmp	r3, #31
 800d94e:	eba2 0203 	sub.w	r2, r2, r3
 800d952:	f04f 0101 	mov.w	r1, #1
 800d956:	dc3d      	bgt.n	800d9d4 <_strtod_l+0x754>
 800d958:	fa01 f303 	lsl.w	r3, r1, r3
 800d95c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d95e:	2300      	movs	r3, #0
 800d960:	9310      	str	r3, [sp, #64]	@ 0x40
 800d962:	18bd      	adds	r5, r7, r2
 800d964:	9b08      	ldr	r3, [sp, #32]
 800d966:	42af      	cmp	r7, r5
 800d968:	4416      	add	r6, r2
 800d96a:	441e      	add	r6, r3
 800d96c:	463b      	mov	r3, r7
 800d96e:	bfa8      	it	ge
 800d970:	462b      	movge	r3, r5
 800d972:	42b3      	cmp	r3, r6
 800d974:	bfa8      	it	ge
 800d976:	4633      	movge	r3, r6
 800d978:	2b00      	cmp	r3, #0
 800d97a:	bfc2      	ittt	gt
 800d97c:	1aed      	subgt	r5, r5, r3
 800d97e:	1af6      	subgt	r6, r6, r3
 800d980:	1aff      	subgt	r7, r7, r3
 800d982:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d984:	2b00      	cmp	r3, #0
 800d986:	dd16      	ble.n	800d9b6 <_strtod_l+0x736>
 800d988:	4641      	mov	r1, r8
 800d98a:	9805      	ldr	r0, [sp, #20]
 800d98c:	461a      	mov	r2, r3
 800d98e:	f002 f975 	bl	800fc7c <__pow5mult>
 800d992:	4680      	mov	r8, r0
 800d994:	2800      	cmp	r0, #0
 800d996:	d0ba      	beq.n	800d90e <_strtod_l+0x68e>
 800d998:	4601      	mov	r1, r0
 800d99a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d99c:	9805      	ldr	r0, [sp, #20]
 800d99e:	f002 f8c3 	bl	800fb28 <__multiply>
 800d9a2:	900e      	str	r0, [sp, #56]	@ 0x38
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	f43f ae8a 	beq.w	800d6be <_strtod_l+0x43e>
 800d9aa:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d9ac:	9805      	ldr	r0, [sp, #20]
 800d9ae:	f001 ffa7 	bl	800f900 <_Bfree>
 800d9b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800d9b6:	2d00      	cmp	r5, #0
 800d9b8:	dc1d      	bgt.n	800d9f6 <_strtod_l+0x776>
 800d9ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	dd23      	ble.n	800da08 <_strtod_l+0x788>
 800d9c0:	4649      	mov	r1, r9
 800d9c2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d9c4:	9805      	ldr	r0, [sp, #20]
 800d9c6:	f002 f959 	bl	800fc7c <__pow5mult>
 800d9ca:	4681      	mov	r9, r0
 800d9cc:	b9e0      	cbnz	r0, 800da08 <_strtod_l+0x788>
 800d9ce:	f04f 0900 	mov.w	r9, #0
 800d9d2:	e674      	b.n	800d6be <_strtod_l+0x43e>
 800d9d4:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d9d8:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d9dc:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d9e0:	35e2      	adds	r5, #226	@ 0xe2
 800d9e2:	fa01 f305 	lsl.w	r3, r1, r5
 800d9e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800d9e8:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d9ea:	e7ba      	b.n	800d962 <_strtod_l+0x6e2>
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	9310      	str	r3, [sp, #64]	@ 0x40
 800d9f0:	2301      	movs	r3, #1
 800d9f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d9f4:	e7b5      	b.n	800d962 <_strtod_l+0x6e2>
 800d9f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d9f8:	9805      	ldr	r0, [sp, #20]
 800d9fa:	462a      	mov	r2, r5
 800d9fc:	f002 f998 	bl	800fd30 <__lshift>
 800da00:	901a      	str	r0, [sp, #104]	@ 0x68
 800da02:	2800      	cmp	r0, #0
 800da04:	d1d9      	bne.n	800d9ba <_strtod_l+0x73a>
 800da06:	e65a      	b.n	800d6be <_strtod_l+0x43e>
 800da08:	2e00      	cmp	r6, #0
 800da0a:	dd07      	ble.n	800da1c <_strtod_l+0x79c>
 800da0c:	4649      	mov	r1, r9
 800da0e:	9805      	ldr	r0, [sp, #20]
 800da10:	4632      	mov	r2, r6
 800da12:	f002 f98d 	bl	800fd30 <__lshift>
 800da16:	4681      	mov	r9, r0
 800da18:	2800      	cmp	r0, #0
 800da1a:	d0d8      	beq.n	800d9ce <_strtod_l+0x74e>
 800da1c:	2f00      	cmp	r7, #0
 800da1e:	dd08      	ble.n	800da32 <_strtod_l+0x7b2>
 800da20:	4641      	mov	r1, r8
 800da22:	9805      	ldr	r0, [sp, #20]
 800da24:	463a      	mov	r2, r7
 800da26:	f002 f983 	bl	800fd30 <__lshift>
 800da2a:	4680      	mov	r8, r0
 800da2c:	2800      	cmp	r0, #0
 800da2e:	f43f ae46 	beq.w	800d6be <_strtod_l+0x43e>
 800da32:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800da34:	9805      	ldr	r0, [sp, #20]
 800da36:	464a      	mov	r2, r9
 800da38:	f002 fa02 	bl	800fe40 <__mdiff>
 800da3c:	4604      	mov	r4, r0
 800da3e:	2800      	cmp	r0, #0
 800da40:	f43f ae3d 	beq.w	800d6be <_strtod_l+0x43e>
 800da44:	68c3      	ldr	r3, [r0, #12]
 800da46:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da48:	2300      	movs	r3, #0
 800da4a:	60c3      	str	r3, [r0, #12]
 800da4c:	4641      	mov	r1, r8
 800da4e:	f002 f9db 	bl	800fe08 <__mcmp>
 800da52:	2800      	cmp	r0, #0
 800da54:	da46      	bge.n	800dae4 <_strtod_l+0x864>
 800da56:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800da58:	ea53 030a 	orrs.w	r3, r3, sl
 800da5c:	d16c      	bne.n	800db38 <_strtod_l+0x8b8>
 800da5e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800da62:	2b00      	cmp	r3, #0
 800da64:	d168      	bne.n	800db38 <_strtod_l+0x8b8>
 800da66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da6a:	0d1b      	lsrs	r3, r3, #20
 800da6c:	051b      	lsls	r3, r3, #20
 800da6e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800da72:	d961      	bls.n	800db38 <_strtod_l+0x8b8>
 800da74:	6963      	ldr	r3, [r4, #20]
 800da76:	b913      	cbnz	r3, 800da7e <_strtod_l+0x7fe>
 800da78:	6923      	ldr	r3, [r4, #16]
 800da7a:	2b01      	cmp	r3, #1
 800da7c:	dd5c      	ble.n	800db38 <_strtod_l+0x8b8>
 800da7e:	4621      	mov	r1, r4
 800da80:	2201      	movs	r2, #1
 800da82:	9805      	ldr	r0, [sp, #20]
 800da84:	f002 f954 	bl	800fd30 <__lshift>
 800da88:	4641      	mov	r1, r8
 800da8a:	4604      	mov	r4, r0
 800da8c:	f002 f9bc 	bl	800fe08 <__mcmp>
 800da90:	2800      	cmp	r0, #0
 800da92:	dd51      	ble.n	800db38 <_strtod_l+0x8b8>
 800da94:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800da98:	9a08      	ldr	r2, [sp, #32]
 800da9a:	0d1b      	lsrs	r3, r3, #20
 800da9c:	051b      	lsls	r3, r3, #20
 800da9e:	2a00      	cmp	r2, #0
 800daa0:	d06b      	beq.n	800db7a <_strtod_l+0x8fa>
 800daa2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800daa6:	d868      	bhi.n	800db7a <_strtod_l+0x8fa>
 800daa8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800daac:	f67f ae9d 	bls.w	800d7ea <_strtod_l+0x56a>
 800dab0:	4b0a      	ldr	r3, [pc, #40]	@ (800dadc <_strtod_l+0x85c>)
 800dab2:	4650      	mov	r0, sl
 800dab4:	4659      	mov	r1, fp
 800dab6:	2200      	movs	r2, #0
 800dab8:	f7f2 fdc6 	bl	8000648 <__aeabi_dmul>
 800dabc:	4b08      	ldr	r3, [pc, #32]	@ (800dae0 <_strtod_l+0x860>)
 800dabe:	400b      	ands	r3, r1
 800dac0:	4682      	mov	sl, r0
 800dac2:	468b      	mov	fp, r1
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	f47f ae05 	bne.w	800d6d4 <_strtod_l+0x454>
 800daca:	9a05      	ldr	r2, [sp, #20]
 800dacc:	2322      	movs	r3, #34	@ 0x22
 800dace:	6013      	str	r3, [r2, #0]
 800dad0:	e600      	b.n	800d6d4 <_strtod_l+0x454>
 800dad2:	bf00      	nop
 800dad4:	08010ad8 	.word	0x08010ad8
 800dad8:	fffffc02 	.word	0xfffffc02
 800dadc:	39500000 	.word	0x39500000
 800dae0:	7ff00000 	.word	0x7ff00000
 800dae4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dae8:	d165      	bne.n	800dbb6 <_strtod_l+0x936>
 800daea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800daec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800daf0:	b35a      	cbz	r2, 800db4a <_strtod_l+0x8ca>
 800daf2:	4a9f      	ldr	r2, [pc, #636]	@ (800dd70 <_strtod_l+0xaf0>)
 800daf4:	4293      	cmp	r3, r2
 800daf6:	d12b      	bne.n	800db50 <_strtod_l+0x8d0>
 800daf8:	9b08      	ldr	r3, [sp, #32]
 800dafa:	4651      	mov	r1, sl
 800dafc:	b303      	cbz	r3, 800db40 <_strtod_l+0x8c0>
 800dafe:	4b9d      	ldr	r3, [pc, #628]	@ (800dd74 <_strtod_l+0xaf4>)
 800db00:	465a      	mov	r2, fp
 800db02:	4013      	ands	r3, r2
 800db04:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800db08:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800db0c:	d81b      	bhi.n	800db46 <_strtod_l+0x8c6>
 800db0e:	0d1b      	lsrs	r3, r3, #20
 800db10:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800db14:	fa02 f303 	lsl.w	r3, r2, r3
 800db18:	4299      	cmp	r1, r3
 800db1a:	d119      	bne.n	800db50 <_strtod_l+0x8d0>
 800db1c:	4b96      	ldr	r3, [pc, #600]	@ (800dd78 <_strtod_l+0xaf8>)
 800db1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db20:	429a      	cmp	r2, r3
 800db22:	d102      	bne.n	800db2a <_strtod_l+0x8aa>
 800db24:	3101      	adds	r1, #1
 800db26:	f43f adca 	beq.w	800d6be <_strtod_l+0x43e>
 800db2a:	4b92      	ldr	r3, [pc, #584]	@ (800dd74 <_strtod_l+0xaf4>)
 800db2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db2e:	401a      	ands	r2, r3
 800db30:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800db34:	f04f 0a00 	mov.w	sl, #0
 800db38:	9b08      	ldr	r3, [sp, #32]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d1b8      	bne.n	800dab0 <_strtod_l+0x830>
 800db3e:	e5c9      	b.n	800d6d4 <_strtod_l+0x454>
 800db40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db44:	e7e8      	b.n	800db18 <_strtod_l+0x898>
 800db46:	4613      	mov	r3, r2
 800db48:	e7e6      	b.n	800db18 <_strtod_l+0x898>
 800db4a:	ea53 030a 	orrs.w	r3, r3, sl
 800db4e:	d0a1      	beq.n	800da94 <_strtod_l+0x814>
 800db50:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800db52:	b1db      	cbz	r3, 800db8c <_strtod_l+0x90c>
 800db54:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800db56:	4213      	tst	r3, r2
 800db58:	d0ee      	beq.n	800db38 <_strtod_l+0x8b8>
 800db5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db5c:	9a08      	ldr	r2, [sp, #32]
 800db5e:	4650      	mov	r0, sl
 800db60:	4659      	mov	r1, fp
 800db62:	b1bb      	cbz	r3, 800db94 <_strtod_l+0x914>
 800db64:	f7ff fb6e 	bl	800d244 <sulp>
 800db68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db6c:	ec53 2b10 	vmov	r2, r3, d0
 800db70:	f7f2 fbb4 	bl	80002dc <__adddf3>
 800db74:	4682      	mov	sl, r0
 800db76:	468b      	mov	fp, r1
 800db78:	e7de      	b.n	800db38 <_strtod_l+0x8b8>
 800db7a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800db7e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800db82:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800db86:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800db8a:	e7d5      	b.n	800db38 <_strtod_l+0x8b8>
 800db8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800db8e:	ea13 0f0a 	tst.w	r3, sl
 800db92:	e7e1      	b.n	800db58 <_strtod_l+0x8d8>
 800db94:	f7ff fb56 	bl	800d244 <sulp>
 800db98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800db9c:	ec53 2b10 	vmov	r2, r3, d0
 800dba0:	f7f2 fb9a 	bl	80002d8 <__aeabi_dsub>
 800dba4:	2200      	movs	r2, #0
 800dba6:	2300      	movs	r3, #0
 800dba8:	4682      	mov	sl, r0
 800dbaa:	468b      	mov	fp, r1
 800dbac:	f7f2 ffb4 	bl	8000b18 <__aeabi_dcmpeq>
 800dbb0:	2800      	cmp	r0, #0
 800dbb2:	d0c1      	beq.n	800db38 <_strtod_l+0x8b8>
 800dbb4:	e619      	b.n	800d7ea <_strtod_l+0x56a>
 800dbb6:	4641      	mov	r1, r8
 800dbb8:	4620      	mov	r0, r4
 800dbba:	f002 fa9d 	bl	80100f8 <__ratio>
 800dbbe:	ec57 6b10 	vmov	r6, r7, d0
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dbc8:	4630      	mov	r0, r6
 800dbca:	4639      	mov	r1, r7
 800dbcc:	f7f2 ffb8 	bl	8000b40 <__aeabi_dcmple>
 800dbd0:	2800      	cmp	r0, #0
 800dbd2:	d06f      	beq.n	800dcb4 <_strtod_l+0xa34>
 800dbd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d17a      	bne.n	800dcd0 <_strtod_l+0xa50>
 800dbda:	f1ba 0f00 	cmp.w	sl, #0
 800dbde:	d158      	bne.n	800dc92 <_strtod_l+0xa12>
 800dbe0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dbe2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	d15a      	bne.n	800dca0 <_strtod_l+0xa20>
 800dbea:	4b64      	ldr	r3, [pc, #400]	@ (800dd7c <_strtod_l+0xafc>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	4630      	mov	r0, r6
 800dbf0:	4639      	mov	r1, r7
 800dbf2:	f7f2 ff9b 	bl	8000b2c <__aeabi_dcmplt>
 800dbf6:	2800      	cmp	r0, #0
 800dbf8:	d159      	bne.n	800dcae <_strtod_l+0xa2e>
 800dbfa:	4630      	mov	r0, r6
 800dbfc:	4639      	mov	r1, r7
 800dbfe:	4b60      	ldr	r3, [pc, #384]	@ (800dd80 <_strtod_l+0xb00>)
 800dc00:	2200      	movs	r2, #0
 800dc02:	f7f2 fd21 	bl	8000648 <__aeabi_dmul>
 800dc06:	4606      	mov	r6, r0
 800dc08:	460f      	mov	r7, r1
 800dc0a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800dc0e:	9606      	str	r6, [sp, #24]
 800dc10:	9307      	str	r3, [sp, #28]
 800dc12:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc16:	4d57      	ldr	r5, [pc, #348]	@ (800dd74 <_strtod_l+0xaf4>)
 800dc18:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800dc1c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc1e:	401d      	ands	r5, r3
 800dc20:	4b58      	ldr	r3, [pc, #352]	@ (800dd84 <_strtod_l+0xb04>)
 800dc22:	429d      	cmp	r5, r3
 800dc24:	f040 80b2 	bne.w	800dd8c <_strtod_l+0xb0c>
 800dc28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc2a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800dc2e:	ec4b ab10 	vmov	d0, sl, fp
 800dc32:	f002 f999 	bl	800ff68 <__ulp>
 800dc36:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800dc3a:	ec51 0b10 	vmov	r0, r1, d0
 800dc3e:	f7f2 fd03 	bl	8000648 <__aeabi_dmul>
 800dc42:	4652      	mov	r2, sl
 800dc44:	465b      	mov	r3, fp
 800dc46:	f7f2 fb49 	bl	80002dc <__adddf3>
 800dc4a:	460b      	mov	r3, r1
 800dc4c:	4949      	ldr	r1, [pc, #292]	@ (800dd74 <_strtod_l+0xaf4>)
 800dc4e:	4a4e      	ldr	r2, [pc, #312]	@ (800dd88 <_strtod_l+0xb08>)
 800dc50:	4019      	ands	r1, r3
 800dc52:	4291      	cmp	r1, r2
 800dc54:	4682      	mov	sl, r0
 800dc56:	d942      	bls.n	800dcde <_strtod_l+0xa5e>
 800dc58:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800dc5a:	4b47      	ldr	r3, [pc, #284]	@ (800dd78 <_strtod_l+0xaf8>)
 800dc5c:	429a      	cmp	r2, r3
 800dc5e:	d103      	bne.n	800dc68 <_strtod_l+0x9e8>
 800dc60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dc62:	3301      	adds	r3, #1
 800dc64:	f43f ad2b 	beq.w	800d6be <_strtod_l+0x43e>
 800dc68:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800dd78 <_strtod_l+0xaf8>
 800dc6c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800dc70:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800dc72:	9805      	ldr	r0, [sp, #20]
 800dc74:	f001 fe44 	bl	800f900 <_Bfree>
 800dc78:	9805      	ldr	r0, [sp, #20]
 800dc7a:	4649      	mov	r1, r9
 800dc7c:	f001 fe40 	bl	800f900 <_Bfree>
 800dc80:	9805      	ldr	r0, [sp, #20]
 800dc82:	4641      	mov	r1, r8
 800dc84:	f001 fe3c 	bl	800f900 <_Bfree>
 800dc88:	9805      	ldr	r0, [sp, #20]
 800dc8a:	4621      	mov	r1, r4
 800dc8c:	f001 fe38 	bl	800f900 <_Bfree>
 800dc90:	e618      	b.n	800d8c4 <_strtod_l+0x644>
 800dc92:	f1ba 0f01 	cmp.w	sl, #1
 800dc96:	d103      	bne.n	800dca0 <_strtod_l+0xa20>
 800dc98:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	f43f ada5 	beq.w	800d7ea <_strtod_l+0x56a>
 800dca0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800dd50 <_strtod_l+0xad0>
 800dca4:	4f35      	ldr	r7, [pc, #212]	@ (800dd7c <_strtod_l+0xafc>)
 800dca6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dcaa:	2600      	movs	r6, #0
 800dcac:	e7b1      	b.n	800dc12 <_strtod_l+0x992>
 800dcae:	4f34      	ldr	r7, [pc, #208]	@ (800dd80 <_strtod_l+0xb00>)
 800dcb0:	2600      	movs	r6, #0
 800dcb2:	e7aa      	b.n	800dc0a <_strtod_l+0x98a>
 800dcb4:	4b32      	ldr	r3, [pc, #200]	@ (800dd80 <_strtod_l+0xb00>)
 800dcb6:	4630      	mov	r0, r6
 800dcb8:	4639      	mov	r1, r7
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f7f2 fcc4 	bl	8000648 <__aeabi_dmul>
 800dcc0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dcc2:	4606      	mov	r6, r0
 800dcc4:	460f      	mov	r7, r1
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d09f      	beq.n	800dc0a <_strtod_l+0x98a>
 800dcca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800dcce:	e7a0      	b.n	800dc12 <_strtod_l+0x992>
 800dcd0:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800dd58 <_strtod_l+0xad8>
 800dcd4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800dcd8:	ec57 6b17 	vmov	r6, r7, d7
 800dcdc:	e799      	b.n	800dc12 <_strtod_l+0x992>
 800dcde:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800dce2:	9b08      	ldr	r3, [sp, #32]
 800dce4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d1c1      	bne.n	800dc70 <_strtod_l+0x9f0>
 800dcec:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800dcf0:	0d1b      	lsrs	r3, r3, #20
 800dcf2:	051b      	lsls	r3, r3, #20
 800dcf4:	429d      	cmp	r5, r3
 800dcf6:	d1bb      	bne.n	800dc70 <_strtod_l+0x9f0>
 800dcf8:	4630      	mov	r0, r6
 800dcfa:	4639      	mov	r1, r7
 800dcfc:	f7f3 f804 	bl	8000d08 <__aeabi_d2lz>
 800dd00:	f7f2 fc74 	bl	80005ec <__aeabi_l2d>
 800dd04:	4602      	mov	r2, r0
 800dd06:	460b      	mov	r3, r1
 800dd08:	4630      	mov	r0, r6
 800dd0a:	4639      	mov	r1, r7
 800dd0c:	f7f2 fae4 	bl	80002d8 <__aeabi_dsub>
 800dd10:	460b      	mov	r3, r1
 800dd12:	4602      	mov	r2, r0
 800dd14:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800dd18:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800dd1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800dd1e:	ea46 060a 	orr.w	r6, r6, sl
 800dd22:	431e      	orrs	r6, r3
 800dd24:	d06f      	beq.n	800de06 <_strtod_l+0xb86>
 800dd26:	a30e      	add	r3, pc, #56	@ (adr r3, 800dd60 <_strtod_l+0xae0>)
 800dd28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd2c:	f7f2 fefe 	bl	8000b2c <__aeabi_dcmplt>
 800dd30:	2800      	cmp	r0, #0
 800dd32:	f47f accf 	bne.w	800d6d4 <_strtod_l+0x454>
 800dd36:	a30c      	add	r3, pc, #48	@ (adr r3, 800dd68 <_strtod_l+0xae8>)
 800dd38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd40:	f7f2 ff12 	bl	8000b68 <__aeabi_dcmpgt>
 800dd44:	2800      	cmp	r0, #0
 800dd46:	d093      	beq.n	800dc70 <_strtod_l+0x9f0>
 800dd48:	e4c4      	b.n	800d6d4 <_strtod_l+0x454>
 800dd4a:	bf00      	nop
 800dd4c:	f3af 8000 	nop.w
 800dd50:	00000000 	.word	0x00000000
 800dd54:	bff00000 	.word	0xbff00000
 800dd58:	00000000 	.word	0x00000000
 800dd5c:	3ff00000 	.word	0x3ff00000
 800dd60:	94a03595 	.word	0x94a03595
 800dd64:	3fdfffff 	.word	0x3fdfffff
 800dd68:	35afe535 	.word	0x35afe535
 800dd6c:	3fe00000 	.word	0x3fe00000
 800dd70:	000fffff 	.word	0x000fffff
 800dd74:	7ff00000 	.word	0x7ff00000
 800dd78:	7fefffff 	.word	0x7fefffff
 800dd7c:	3ff00000 	.word	0x3ff00000
 800dd80:	3fe00000 	.word	0x3fe00000
 800dd84:	7fe00000 	.word	0x7fe00000
 800dd88:	7c9fffff 	.word	0x7c9fffff
 800dd8c:	9b08      	ldr	r3, [sp, #32]
 800dd8e:	b323      	cbz	r3, 800ddda <_strtod_l+0xb5a>
 800dd90:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800dd94:	d821      	bhi.n	800ddda <_strtod_l+0xb5a>
 800dd96:	a328      	add	r3, pc, #160	@ (adr r3, 800de38 <_strtod_l+0xbb8>)
 800dd98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd9c:	4630      	mov	r0, r6
 800dd9e:	4639      	mov	r1, r7
 800dda0:	f7f2 fece 	bl	8000b40 <__aeabi_dcmple>
 800dda4:	b1a0      	cbz	r0, 800ddd0 <_strtod_l+0xb50>
 800dda6:	4639      	mov	r1, r7
 800dda8:	4630      	mov	r0, r6
 800ddaa:	f7f2 ff25 	bl	8000bf8 <__aeabi_d2uiz>
 800ddae:	2801      	cmp	r0, #1
 800ddb0:	bf38      	it	cc
 800ddb2:	2001      	movcc	r0, #1
 800ddb4:	f7f2 fbce 	bl	8000554 <__aeabi_ui2d>
 800ddb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ddba:	4606      	mov	r6, r0
 800ddbc:	460f      	mov	r7, r1
 800ddbe:	b9fb      	cbnz	r3, 800de00 <_strtod_l+0xb80>
 800ddc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ddc4:	9014      	str	r0, [sp, #80]	@ 0x50
 800ddc6:	9315      	str	r3, [sp, #84]	@ 0x54
 800ddc8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800ddcc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800ddd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800ddd2:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800ddd6:	1b5b      	subs	r3, r3, r5
 800ddd8:	9311      	str	r3, [sp, #68]	@ 0x44
 800ddda:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ddde:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800dde2:	f002 f8c1 	bl	800ff68 <__ulp>
 800dde6:	4650      	mov	r0, sl
 800dde8:	ec53 2b10 	vmov	r2, r3, d0
 800ddec:	4659      	mov	r1, fp
 800ddee:	f7f2 fc2b 	bl	8000648 <__aeabi_dmul>
 800ddf2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ddf6:	f7f2 fa71 	bl	80002dc <__adddf3>
 800ddfa:	4682      	mov	sl, r0
 800ddfc:	468b      	mov	fp, r1
 800ddfe:	e770      	b.n	800dce2 <_strtod_l+0xa62>
 800de00:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800de04:	e7e0      	b.n	800ddc8 <_strtod_l+0xb48>
 800de06:	a30e      	add	r3, pc, #56	@ (adr r3, 800de40 <_strtod_l+0xbc0>)
 800de08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de0c:	f7f2 fe8e 	bl	8000b2c <__aeabi_dcmplt>
 800de10:	e798      	b.n	800dd44 <_strtod_l+0xac4>
 800de12:	2300      	movs	r3, #0
 800de14:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de16:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800de18:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800de1a:	6013      	str	r3, [r2, #0]
 800de1c:	f7ff ba6d 	b.w	800d2fa <_strtod_l+0x7a>
 800de20:	2a65      	cmp	r2, #101	@ 0x65
 800de22:	f43f ab66 	beq.w	800d4f2 <_strtod_l+0x272>
 800de26:	2a45      	cmp	r2, #69	@ 0x45
 800de28:	f43f ab63 	beq.w	800d4f2 <_strtod_l+0x272>
 800de2c:	2301      	movs	r3, #1
 800de2e:	f7ff bb9e 	b.w	800d56e <_strtod_l+0x2ee>
 800de32:	bf00      	nop
 800de34:	f3af 8000 	nop.w
 800de38:	ffc00000 	.word	0xffc00000
 800de3c:	41dfffff 	.word	0x41dfffff
 800de40:	94a03595 	.word	0x94a03595
 800de44:	3fcfffff 	.word	0x3fcfffff

0800de48 <_strtod_r>:
 800de48:	4b01      	ldr	r3, [pc, #4]	@ (800de50 <_strtod_r+0x8>)
 800de4a:	f7ff ba19 	b.w	800d280 <_strtod_l>
 800de4e:	bf00      	nop
 800de50:	20000038 	.word	0x20000038

0800de54 <_strtol_l.constprop.0>:
 800de54:	2b24      	cmp	r3, #36	@ 0x24
 800de56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de5a:	4686      	mov	lr, r0
 800de5c:	4690      	mov	r8, r2
 800de5e:	d801      	bhi.n	800de64 <_strtol_l.constprop.0+0x10>
 800de60:	2b01      	cmp	r3, #1
 800de62:	d106      	bne.n	800de72 <_strtol_l.constprop.0+0x1e>
 800de64:	f000 f8be 	bl	800dfe4 <__errno>
 800de68:	2316      	movs	r3, #22
 800de6a:	6003      	str	r3, [r0, #0]
 800de6c:	2000      	movs	r0, #0
 800de6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de72:	4834      	ldr	r0, [pc, #208]	@ (800df44 <_strtol_l.constprop.0+0xf0>)
 800de74:	460d      	mov	r5, r1
 800de76:	462a      	mov	r2, r5
 800de78:	f815 4b01 	ldrb.w	r4, [r5], #1
 800de7c:	5d06      	ldrb	r6, [r0, r4]
 800de7e:	f016 0608 	ands.w	r6, r6, #8
 800de82:	d1f8      	bne.n	800de76 <_strtol_l.constprop.0+0x22>
 800de84:	2c2d      	cmp	r4, #45	@ 0x2d
 800de86:	d12d      	bne.n	800dee4 <_strtol_l.constprop.0+0x90>
 800de88:	782c      	ldrb	r4, [r5, #0]
 800de8a:	2601      	movs	r6, #1
 800de8c:	1c95      	adds	r5, r2, #2
 800de8e:	f033 0210 	bics.w	r2, r3, #16
 800de92:	d109      	bne.n	800dea8 <_strtol_l.constprop.0+0x54>
 800de94:	2c30      	cmp	r4, #48	@ 0x30
 800de96:	d12a      	bne.n	800deee <_strtol_l.constprop.0+0x9a>
 800de98:	782a      	ldrb	r2, [r5, #0]
 800de9a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800de9e:	2a58      	cmp	r2, #88	@ 0x58
 800dea0:	d125      	bne.n	800deee <_strtol_l.constprop.0+0x9a>
 800dea2:	786c      	ldrb	r4, [r5, #1]
 800dea4:	2310      	movs	r3, #16
 800dea6:	3502      	adds	r5, #2
 800dea8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800deac:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800deb0:	2200      	movs	r2, #0
 800deb2:	fbbc f9f3 	udiv	r9, ip, r3
 800deb6:	4610      	mov	r0, r2
 800deb8:	fb03 ca19 	mls	sl, r3, r9, ip
 800debc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800dec0:	2f09      	cmp	r7, #9
 800dec2:	d81b      	bhi.n	800defc <_strtol_l.constprop.0+0xa8>
 800dec4:	463c      	mov	r4, r7
 800dec6:	42a3      	cmp	r3, r4
 800dec8:	dd27      	ble.n	800df1a <_strtol_l.constprop.0+0xc6>
 800deca:	1c57      	adds	r7, r2, #1
 800decc:	d007      	beq.n	800dede <_strtol_l.constprop.0+0x8a>
 800dece:	4581      	cmp	r9, r0
 800ded0:	d320      	bcc.n	800df14 <_strtol_l.constprop.0+0xc0>
 800ded2:	d101      	bne.n	800ded8 <_strtol_l.constprop.0+0x84>
 800ded4:	45a2      	cmp	sl, r4
 800ded6:	db1d      	blt.n	800df14 <_strtol_l.constprop.0+0xc0>
 800ded8:	fb00 4003 	mla	r0, r0, r3, r4
 800dedc:	2201      	movs	r2, #1
 800dede:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dee2:	e7eb      	b.n	800debc <_strtol_l.constprop.0+0x68>
 800dee4:	2c2b      	cmp	r4, #43	@ 0x2b
 800dee6:	bf04      	itt	eq
 800dee8:	782c      	ldrbeq	r4, [r5, #0]
 800deea:	1c95      	addeq	r5, r2, #2
 800deec:	e7cf      	b.n	800de8e <_strtol_l.constprop.0+0x3a>
 800deee:	2b00      	cmp	r3, #0
 800def0:	d1da      	bne.n	800dea8 <_strtol_l.constprop.0+0x54>
 800def2:	2c30      	cmp	r4, #48	@ 0x30
 800def4:	bf0c      	ite	eq
 800def6:	2308      	moveq	r3, #8
 800def8:	230a      	movne	r3, #10
 800defa:	e7d5      	b.n	800dea8 <_strtol_l.constprop.0+0x54>
 800defc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800df00:	2f19      	cmp	r7, #25
 800df02:	d801      	bhi.n	800df08 <_strtol_l.constprop.0+0xb4>
 800df04:	3c37      	subs	r4, #55	@ 0x37
 800df06:	e7de      	b.n	800dec6 <_strtol_l.constprop.0+0x72>
 800df08:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800df0c:	2f19      	cmp	r7, #25
 800df0e:	d804      	bhi.n	800df1a <_strtol_l.constprop.0+0xc6>
 800df10:	3c57      	subs	r4, #87	@ 0x57
 800df12:	e7d8      	b.n	800dec6 <_strtol_l.constprop.0+0x72>
 800df14:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800df18:	e7e1      	b.n	800dede <_strtol_l.constprop.0+0x8a>
 800df1a:	1c53      	adds	r3, r2, #1
 800df1c:	d108      	bne.n	800df30 <_strtol_l.constprop.0+0xdc>
 800df1e:	2322      	movs	r3, #34	@ 0x22
 800df20:	f8ce 3000 	str.w	r3, [lr]
 800df24:	4660      	mov	r0, ip
 800df26:	f1b8 0f00 	cmp.w	r8, #0
 800df2a:	d0a0      	beq.n	800de6e <_strtol_l.constprop.0+0x1a>
 800df2c:	1e69      	subs	r1, r5, #1
 800df2e:	e006      	b.n	800df3e <_strtol_l.constprop.0+0xea>
 800df30:	b106      	cbz	r6, 800df34 <_strtol_l.constprop.0+0xe0>
 800df32:	4240      	negs	r0, r0
 800df34:	f1b8 0f00 	cmp.w	r8, #0
 800df38:	d099      	beq.n	800de6e <_strtol_l.constprop.0+0x1a>
 800df3a:	2a00      	cmp	r2, #0
 800df3c:	d1f6      	bne.n	800df2c <_strtol_l.constprop.0+0xd8>
 800df3e:	f8c8 1000 	str.w	r1, [r8]
 800df42:	e794      	b.n	800de6e <_strtol_l.constprop.0+0x1a>
 800df44:	08010b09 	.word	0x08010b09

0800df48 <_strtol_r>:
 800df48:	f7ff bf84 	b.w	800de54 <_strtol_l.constprop.0>

0800df4c <_fwalk_sglue>:
 800df4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800df50:	4607      	mov	r7, r0
 800df52:	4688      	mov	r8, r1
 800df54:	4614      	mov	r4, r2
 800df56:	2600      	movs	r6, #0
 800df58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800df5c:	f1b9 0901 	subs.w	r9, r9, #1
 800df60:	d505      	bpl.n	800df6e <_fwalk_sglue+0x22>
 800df62:	6824      	ldr	r4, [r4, #0]
 800df64:	2c00      	cmp	r4, #0
 800df66:	d1f7      	bne.n	800df58 <_fwalk_sglue+0xc>
 800df68:	4630      	mov	r0, r6
 800df6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800df6e:	89ab      	ldrh	r3, [r5, #12]
 800df70:	2b01      	cmp	r3, #1
 800df72:	d907      	bls.n	800df84 <_fwalk_sglue+0x38>
 800df74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800df78:	3301      	adds	r3, #1
 800df7a:	d003      	beq.n	800df84 <_fwalk_sglue+0x38>
 800df7c:	4629      	mov	r1, r5
 800df7e:	4638      	mov	r0, r7
 800df80:	47c0      	blx	r8
 800df82:	4306      	orrs	r6, r0
 800df84:	3568      	adds	r5, #104	@ 0x68
 800df86:	e7e9      	b.n	800df5c <_fwalk_sglue+0x10>

0800df88 <strncmp>:
 800df88:	b510      	push	{r4, lr}
 800df8a:	b16a      	cbz	r2, 800dfa8 <strncmp+0x20>
 800df8c:	3901      	subs	r1, #1
 800df8e:	1884      	adds	r4, r0, r2
 800df90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df94:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800df98:	429a      	cmp	r2, r3
 800df9a:	d103      	bne.n	800dfa4 <strncmp+0x1c>
 800df9c:	42a0      	cmp	r0, r4
 800df9e:	d001      	beq.n	800dfa4 <strncmp+0x1c>
 800dfa0:	2a00      	cmp	r2, #0
 800dfa2:	d1f5      	bne.n	800df90 <strncmp+0x8>
 800dfa4:	1ad0      	subs	r0, r2, r3
 800dfa6:	bd10      	pop	{r4, pc}
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	e7fc      	b.n	800dfa6 <strncmp+0x1e>

0800dfac <memset>:
 800dfac:	4402      	add	r2, r0
 800dfae:	4603      	mov	r3, r0
 800dfb0:	4293      	cmp	r3, r2
 800dfb2:	d100      	bne.n	800dfb6 <memset+0xa>
 800dfb4:	4770      	bx	lr
 800dfb6:	f803 1b01 	strb.w	r1, [r3], #1
 800dfba:	e7f9      	b.n	800dfb0 <memset+0x4>

0800dfbc <_localeconv_r>:
 800dfbc:	4800      	ldr	r0, [pc, #0]	@ (800dfc0 <_localeconv_r+0x4>)
 800dfbe:	4770      	bx	lr
 800dfc0:	20000128 	.word	0x20000128

0800dfc4 <_sbrk_r>:
 800dfc4:	b538      	push	{r3, r4, r5, lr}
 800dfc6:	4d06      	ldr	r5, [pc, #24]	@ (800dfe0 <_sbrk_r+0x1c>)
 800dfc8:	2300      	movs	r3, #0
 800dfca:	4604      	mov	r4, r0
 800dfcc:	4608      	mov	r0, r1
 800dfce:	602b      	str	r3, [r5, #0]
 800dfd0:	f7f4 fcd6 	bl	8002980 <_sbrk>
 800dfd4:	1c43      	adds	r3, r0, #1
 800dfd6:	d102      	bne.n	800dfde <_sbrk_r+0x1a>
 800dfd8:	682b      	ldr	r3, [r5, #0]
 800dfda:	b103      	cbz	r3, 800dfde <_sbrk_r+0x1a>
 800dfdc:	6023      	str	r3, [r4, #0]
 800dfde:	bd38      	pop	{r3, r4, r5, pc}
 800dfe0:	2000139c 	.word	0x2000139c

0800dfe4 <__errno>:
 800dfe4:	4b01      	ldr	r3, [pc, #4]	@ (800dfec <__errno+0x8>)
 800dfe6:	6818      	ldr	r0, [r3, #0]
 800dfe8:	4770      	bx	lr
 800dfea:	bf00      	nop
 800dfec:	200001a4 	.word	0x200001a4

0800dff0 <__libc_init_array>:
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	4d0d      	ldr	r5, [pc, #52]	@ (800e028 <__libc_init_array+0x38>)
 800dff4:	4c0d      	ldr	r4, [pc, #52]	@ (800e02c <__libc_init_array+0x3c>)
 800dff6:	1b64      	subs	r4, r4, r5
 800dff8:	10a4      	asrs	r4, r4, #2
 800dffa:	2600      	movs	r6, #0
 800dffc:	42a6      	cmp	r6, r4
 800dffe:	d109      	bne.n	800e014 <__libc_init_array+0x24>
 800e000:	4d0b      	ldr	r5, [pc, #44]	@ (800e030 <__libc_init_array+0x40>)
 800e002:	4c0c      	ldr	r4, [pc, #48]	@ (800e034 <__libc_init_array+0x44>)
 800e004:	f002 fca0 	bl	8010948 <_init>
 800e008:	1b64      	subs	r4, r4, r5
 800e00a:	10a4      	asrs	r4, r4, #2
 800e00c:	2600      	movs	r6, #0
 800e00e:	42a6      	cmp	r6, r4
 800e010:	d105      	bne.n	800e01e <__libc_init_array+0x2e>
 800e012:	bd70      	pop	{r4, r5, r6, pc}
 800e014:	f855 3b04 	ldr.w	r3, [r5], #4
 800e018:	4798      	blx	r3
 800e01a:	3601      	adds	r6, #1
 800e01c:	e7ee      	b.n	800dffc <__libc_init_array+0xc>
 800e01e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e022:	4798      	blx	r3
 800e024:	3601      	adds	r6, #1
 800e026:	e7f2      	b.n	800e00e <__libc_init_array+0x1e>
 800e028:	08010ea0 	.word	0x08010ea0
 800e02c:	08010ea0 	.word	0x08010ea0
 800e030:	08010ea0 	.word	0x08010ea0
 800e034:	08010ea4 	.word	0x08010ea4

0800e038 <__retarget_lock_init_recursive>:
 800e038:	4770      	bx	lr

0800e03a <__retarget_lock_acquire_recursive>:
 800e03a:	4770      	bx	lr

0800e03c <__retarget_lock_release_recursive>:
 800e03c:	4770      	bx	lr

0800e03e <memcpy>:
 800e03e:	440a      	add	r2, r1
 800e040:	4291      	cmp	r1, r2
 800e042:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e046:	d100      	bne.n	800e04a <memcpy+0xc>
 800e048:	4770      	bx	lr
 800e04a:	b510      	push	{r4, lr}
 800e04c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e050:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e054:	4291      	cmp	r1, r2
 800e056:	d1f9      	bne.n	800e04c <memcpy+0xe>
 800e058:	bd10      	pop	{r4, pc}
 800e05a:	0000      	movs	r0, r0
 800e05c:	0000      	movs	r0, r0
	...

0800e060 <nan>:
 800e060:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e068 <nan+0x8>
 800e064:	4770      	bx	lr
 800e066:	bf00      	nop
 800e068:	00000000 	.word	0x00000000
 800e06c:	7ff80000 	.word	0x7ff80000

0800e070 <nanf>:
 800e070:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800e078 <nanf+0x8>
 800e074:	4770      	bx	lr
 800e076:	bf00      	nop
 800e078:	7fc00000 	.word	0x7fc00000

0800e07c <__assert_func>:
 800e07c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e07e:	4614      	mov	r4, r2
 800e080:	461a      	mov	r2, r3
 800e082:	4b09      	ldr	r3, [pc, #36]	@ (800e0a8 <__assert_func+0x2c>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	4605      	mov	r5, r0
 800e088:	68d8      	ldr	r0, [r3, #12]
 800e08a:	b954      	cbnz	r4, 800e0a2 <__assert_func+0x26>
 800e08c:	4b07      	ldr	r3, [pc, #28]	@ (800e0ac <__assert_func+0x30>)
 800e08e:	461c      	mov	r4, r3
 800e090:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e094:	9100      	str	r1, [sp, #0]
 800e096:	462b      	mov	r3, r5
 800e098:	4905      	ldr	r1, [pc, #20]	@ (800e0b0 <__assert_func+0x34>)
 800e09a:	f002 f8e7 	bl	801026c <fiprintf>
 800e09e:	f002 f993 	bl	80103c8 <abort>
 800e0a2:	4b04      	ldr	r3, [pc, #16]	@ (800e0b4 <__assert_func+0x38>)
 800e0a4:	e7f4      	b.n	800e090 <__assert_func+0x14>
 800e0a6:	bf00      	nop
 800e0a8:	200001a4 	.word	0x200001a4
 800e0ac:	08010c44 	.word	0x08010c44
 800e0b0:	08010c16 	.word	0x08010c16
 800e0b4:	08010c09 	.word	0x08010c09

0800e0b8 <quorem>:
 800e0b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0bc:	6903      	ldr	r3, [r0, #16]
 800e0be:	690c      	ldr	r4, [r1, #16]
 800e0c0:	42a3      	cmp	r3, r4
 800e0c2:	4607      	mov	r7, r0
 800e0c4:	db7e      	blt.n	800e1c4 <quorem+0x10c>
 800e0c6:	3c01      	subs	r4, #1
 800e0c8:	f101 0814 	add.w	r8, r1, #20
 800e0cc:	00a3      	lsls	r3, r4, #2
 800e0ce:	f100 0514 	add.w	r5, r0, #20
 800e0d2:	9300      	str	r3, [sp, #0]
 800e0d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0d8:	9301      	str	r3, [sp, #4]
 800e0da:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0e2:	3301      	adds	r3, #1
 800e0e4:	429a      	cmp	r2, r3
 800e0e6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0ea:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0ee:	d32e      	bcc.n	800e14e <quorem+0x96>
 800e0f0:	f04f 0a00 	mov.w	sl, #0
 800e0f4:	46c4      	mov	ip, r8
 800e0f6:	46ae      	mov	lr, r5
 800e0f8:	46d3      	mov	fp, sl
 800e0fa:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e0fe:	b298      	uxth	r0, r3
 800e100:	fb06 a000 	mla	r0, r6, r0, sl
 800e104:	0c02      	lsrs	r2, r0, #16
 800e106:	0c1b      	lsrs	r3, r3, #16
 800e108:	fb06 2303 	mla	r3, r6, r3, r2
 800e10c:	f8de 2000 	ldr.w	r2, [lr]
 800e110:	b280      	uxth	r0, r0
 800e112:	b292      	uxth	r2, r2
 800e114:	1a12      	subs	r2, r2, r0
 800e116:	445a      	add	r2, fp
 800e118:	f8de 0000 	ldr.w	r0, [lr]
 800e11c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e120:	b29b      	uxth	r3, r3
 800e122:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e126:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e12a:	b292      	uxth	r2, r2
 800e12c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e130:	45e1      	cmp	r9, ip
 800e132:	f84e 2b04 	str.w	r2, [lr], #4
 800e136:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e13a:	d2de      	bcs.n	800e0fa <quorem+0x42>
 800e13c:	9b00      	ldr	r3, [sp, #0]
 800e13e:	58eb      	ldr	r3, [r5, r3]
 800e140:	b92b      	cbnz	r3, 800e14e <quorem+0x96>
 800e142:	9b01      	ldr	r3, [sp, #4]
 800e144:	3b04      	subs	r3, #4
 800e146:	429d      	cmp	r5, r3
 800e148:	461a      	mov	r2, r3
 800e14a:	d32f      	bcc.n	800e1ac <quorem+0xf4>
 800e14c:	613c      	str	r4, [r7, #16]
 800e14e:	4638      	mov	r0, r7
 800e150:	f001 fe5a 	bl	800fe08 <__mcmp>
 800e154:	2800      	cmp	r0, #0
 800e156:	db25      	blt.n	800e1a4 <quorem+0xec>
 800e158:	4629      	mov	r1, r5
 800e15a:	2000      	movs	r0, #0
 800e15c:	f858 2b04 	ldr.w	r2, [r8], #4
 800e160:	f8d1 c000 	ldr.w	ip, [r1]
 800e164:	fa1f fe82 	uxth.w	lr, r2
 800e168:	fa1f f38c 	uxth.w	r3, ip
 800e16c:	eba3 030e 	sub.w	r3, r3, lr
 800e170:	4403      	add	r3, r0
 800e172:	0c12      	lsrs	r2, r2, #16
 800e174:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e178:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e17c:	b29b      	uxth	r3, r3
 800e17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e182:	45c1      	cmp	r9, r8
 800e184:	f841 3b04 	str.w	r3, [r1], #4
 800e188:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e18c:	d2e6      	bcs.n	800e15c <quorem+0xa4>
 800e18e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e192:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e196:	b922      	cbnz	r2, 800e1a2 <quorem+0xea>
 800e198:	3b04      	subs	r3, #4
 800e19a:	429d      	cmp	r5, r3
 800e19c:	461a      	mov	r2, r3
 800e19e:	d30b      	bcc.n	800e1b8 <quorem+0x100>
 800e1a0:	613c      	str	r4, [r7, #16]
 800e1a2:	3601      	adds	r6, #1
 800e1a4:	4630      	mov	r0, r6
 800e1a6:	b003      	add	sp, #12
 800e1a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1ac:	6812      	ldr	r2, [r2, #0]
 800e1ae:	3b04      	subs	r3, #4
 800e1b0:	2a00      	cmp	r2, #0
 800e1b2:	d1cb      	bne.n	800e14c <quorem+0x94>
 800e1b4:	3c01      	subs	r4, #1
 800e1b6:	e7c6      	b.n	800e146 <quorem+0x8e>
 800e1b8:	6812      	ldr	r2, [r2, #0]
 800e1ba:	3b04      	subs	r3, #4
 800e1bc:	2a00      	cmp	r2, #0
 800e1be:	d1ef      	bne.n	800e1a0 <quorem+0xe8>
 800e1c0:	3c01      	subs	r4, #1
 800e1c2:	e7ea      	b.n	800e19a <quorem+0xe2>
 800e1c4:	2000      	movs	r0, #0
 800e1c6:	e7ee      	b.n	800e1a6 <quorem+0xee>

0800e1c8 <_dtoa_r>:
 800e1c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1cc:	69c7      	ldr	r7, [r0, #28]
 800e1ce:	b099      	sub	sp, #100	@ 0x64
 800e1d0:	ed8d 0b02 	vstr	d0, [sp, #8]
 800e1d4:	ec55 4b10 	vmov	r4, r5, d0
 800e1d8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800e1da:	9109      	str	r1, [sp, #36]	@ 0x24
 800e1dc:	4683      	mov	fp, r0
 800e1de:	920e      	str	r2, [sp, #56]	@ 0x38
 800e1e0:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e1e2:	b97f      	cbnz	r7, 800e204 <_dtoa_r+0x3c>
 800e1e4:	2010      	movs	r0, #16
 800e1e6:	f7fe fb11 	bl	800c80c <malloc>
 800e1ea:	4602      	mov	r2, r0
 800e1ec:	f8cb 001c 	str.w	r0, [fp, #28]
 800e1f0:	b920      	cbnz	r0, 800e1fc <_dtoa_r+0x34>
 800e1f2:	4ba7      	ldr	r3, [pc, #668]	@ (800e490 <_dtoa_r+0x2c8>)
 800e1f4:	21ef      	movs	r1, #239	@ 0xef
 800e1f6:	48a7      	ldr	r0, [pc, #668]	@ (800e494 <_dtoa_r+0x2cc>)
 800e1f8:	f7ff ff40 	bl	800e07c <__assert_func>
 800e1fc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e200:	6007      	str	r7, [r0, #0]
 800e202:	60c7      	str	r7, [r0, #12]
 800e204:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e208:	6819      	ldr	r1, [r3, #0]
 800e20a:	b159      	cbz	r1, 800e224 <_dtoa_r+0x5c>
 800e20c:	685a      	ldr	r2, [r3, #4]
 800e20e:	604a      	str	r2, [r1, #4]
 800e210:	2301      	movs	r3, #1
 800e212:	4093      	lsls	r3, r2
 800e214:	608b      	str	r3, [r1, #8]
 800e216:	4658      	mov	r0, fp
 800e218:	f001 fb72 	bl	800f900 <_Bfree>
 800e21c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e220:	2200      	movs	r2, #0
 800e222:	601a      	str	r2, [r3, #0]
 800e224:	1e2b      	subs	r3, r5, #0
 800e226:	bfb9      	ittee	lt
 800e228:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e22c:	9303      	strlt	r3, [sp, #12]
 800e22e:	2300      	movge	r3, #0
 800e230:	6033      	strge	r3, [r6, #0]
 800e232:	9f03      	ldr	r7, [sp, #12]
 800e234:	4b98      	ldr	r3, [pc, #608]	@ (800e498 <_dtoa_r+0x2d0>)
 800e236:	bfbc      	itt	lt
 800e238:	2201      	movlt	r2, #1
 800e23a:	6032      	strlt	r2, [r6, #0]
 800e23c:	43bb      	bics	r3, r7
 800e23e:	d112      	bne.n	800e266 <_dtoa_r+0x9e>
 800e240:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e242:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e24c:	4323      	orrs	r3, r4
 800e24e:	f000 854d 	beq.w	800ecec <_dtoa_r+0xb24>
 800e252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e254:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e4ac <_dtoa_r+0x2e4>
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f000 854f 	beq.w	800ecfc <_dtoa_r+0xb34>
 800e25e:	f10a 0303 	add.w	r3, sl, #3
 800e262:	f000 bd49 	b.w	800ecf8 <_dtoa_r+0xb30>
 800e266:	ed9d 7b02 	vldr	d7, [sp, #8]
 800e26a:	2200      	movs	r2, #0
 800e26c:	ec51 0b17 	vmov	r0, r1, d7
 800e270:	2300      	movs	r3, #0
 800e272:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800e276:	f7f2 fc4f 	bl	8000b18 <__aeabi_dcmpeq>
 800e27a:	4680      	mov	r8, r0
 800e27c:	b158      	cbz	r0, 800e296 <_dtoa_r+0xce>
 800e27e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e280:	2301      	movs	r3, #1
 800e282:	6013      	str	r3, [r2, #0]
 800e284:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e286:	b113      	cbz	r3, 800e28e <_dtoa_r+0xc6>
 800e288:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e28a:	4b84      	ldr	r3, [pc, #528]	@ (800e49c <_dtoa_r+0x2d4>)
 800e28c:	6013      	str	r3, [r2, #0]
 800e28e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e4b0 <_dtoa_r+0x2e8>
 800e292:	f000 bd33 	b.w	800ecfc <_dtoa_r+0xb34>
 800e296:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800e29a:	aa16      	add	r2, sp, #88	@ 0x58
 800e29c:	a917      	add	r1, sp, #92	@ 0x5c
 800e29e:	4658      	mov	r0, fp
 800e2a0:	f001 fed2 	bl	8010048 <__d2b>
 800e2a4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e2a8:	4681      	mov	r9, r0
 800e2aa:	2e00      	cmp	r6, #0
 800e2ac:	d077      	beq.n	800e39e <_dtoa_r+0x1d6>
 800e2ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e2b0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800e2b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e2bc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e2c0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e2c4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e2c8:	4619      	mov	r1, r3
 800e2ca:	2200      	movs	r2, #0
 800e2cc:	4b74      	ldr	r3, [pc, #464]	@ (800e4a0 <_dtoa_r+0x2d8>)
 800e2ce:	f7f2 f803 	bl	80002d8 <__aeabi_dsub>
 800e2d2:	a369      	add	r3, pc, #420	@ (adr r3, 800e478 <_dtoa_r+0x2b0>)
 800e2d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d8:	f7f2 f9b6 	bl	8000648 <__aeabi_dmul>
 800e2dc:	a368      	add	r3, pc, #416	@ (adr r3, 800e480 <_dtoa_r+0x2b8>)
 800e2de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e2:	f7f1 fffb 	bl	80002dc <__adddf3>
 800e2e6:	4604      	mov	r4, r0
 800e2e8:	4630      	mov	r0, r6
 800e2ea:	460d      	mov	r5, r1
 800e2ec:	f7f2 f942 	bl	8000574 <__aeabi_i2d>
 800e2f0:	a365      	add	r3, pc, #404	@ (adr r3, 800e488 <_dtoa_r+0x2c0>)
 800e2f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f6:	f7f2 f9a7 	bl	8000648 <__aeabi_dmul>
 800e2fa:	4602      	mov	r2, r0
 800e2fc:	460b      	mov	r3, r1
 800e2fe:	4620      	mov	r0, r4
 800e300:	4629      	mov	r1, r5
 800e302:	f7f1 ffeb 	bl	80002dc <__adddf3>
 800e306:	4604      	mov	r4, r0
 800e308:	460d      	mov	r5, r1
 800e30a:	f7f2 fc4d 	bl	8000ba8 <__aeabi_d2iz>
 800e30e:	2200      	movs	r2, #0
 800e310:	4607      	mov	r7, r0
 800e312:	2300      	movs	r3, #0
 800e314:	4620      	mov	r0, r4
 800e316:	4629      	mov	r1, r5
 800e318:	f7f2 fc08 	bl	8000b2c <__aeabi_dcmplt>
 800e31c:	b140      	cbz	r0, 800e330 <_dtoa_r+0x168>
 800e31e:	4638      	mov	r0, r7
 800e320:	f7f2 f928 	bl	8000574 <__aeabi_i2d>
 800e324:	4622      	mov	r2, r4
 800e326:	462b      	mov	r3, r5
 800e328:	f7f2 fbf6 	bl	8000b18 <__aeabi_dcmpeq>
 800e32c:	b900      	cbnz	r0, 800e330 <_dtoa_r+0x168>
 800e32e:	3f01      	subs	r7, #1
 800e330:	2f16      	cmp	r7, #22
 800e332:	d851      	bhi.n	800e3d8 <_dtoa_r+0x210>
 800e334:	4b5b      	ldr	r3, [pc, #364]	@ (800e4a4 <_dtoa_r+0x2dc>)
 800e336:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e342:	f7f2 fbf3 	bl	8000b2c <__aeabi_dcmplt>
 800e346:	2800      	cmp	r0, #0
 800e348:	d048      	beq.n	800e3dc <_dtoa_r+0x214>
 800e34a:	3f01      	subs	r7, #1
 800e34c:	2300      	movs	r3, #0
 800e34e:	9312      	str	r3, [sp, #72]	@ 0x48
 800e350:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e352:	1b9b      	subs	r3, r3, r6
 800e354:	1e5a      	subs	r2, r3, #1
 800e356:	bf44      	itt	mi
 800e358:	f1c3 0801 	rsbmi	r8, r3, #1
 800e35c:	2300      	movmi	r3, #0
 800e35e:	9208      	str	r2, [sp, #32]
 800e360:	bf54      	ite	pl
 800e362:	f04f 0800 	movpl.w	r8, #0
 800e366:	9308      	strmi	r3, [sp, #32]
 800e368:	2f00      	cmp	r7, #0
 800e36a:	db39      	blt.n	800e3e0 <_dtoa_r+0x218>
 800e36c:	9b08      	ldr	r3, [sp, #32]
 800e36e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800e370:	443b      	add	r3, r7
 800e372:	9308      	str	r3, [sp, #32]
 800e374:	2300      	movs	r3, #0
 800e376:	930a      	str	r3, [sp, #40]	@ 0x28
 800e378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e37a:	2b09      	cmp	r3, #9
 800e37c:	d864      	bhi.n	800e448 <_dtoa_r+0x280>
 800e37e:	2b05      	cmp	r3, #5
 800e380:	bfc4      	itt	gt
 800e382:	3b04      	subgt	r3, #4
 800e384:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800e386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e388:	f1a3 0302 	sub.w	r3, r3, #2
 800e38c:	bfcc      	ite	gt
 800e38e:	2400      	movgt	r4, #0
 800e390:	2401      	movle	r4, #1
 800e392:	2b03      	cmp	r3, #3
 800e394:	d863      	bhi.n	800e45e <_dtoa_r+0x296>
 800e396:	e8df f003 	tbb	[pc, r3]
 800e39a:	372a      	.short	0x372a
 800e39c:	5535      	.short	0x5535
 800e39e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800e3a2:	441e      	add	r6, r3
 800e3a4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e3a8:	2b20      	cmp	r3, #32
 800e3aa:	bfc1      	itttt	gt
 800e3ac:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e3b0:	409f      	lslgt	r7, r3
 800e3b2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e3b6:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e3ba:	bfd6      	itet	le
 800e3bc:	f1c3 0320 	rsble	r3, r3, #32
 800e3c0:	ea47 0003 	orrgt.w	r0, r7, r3
 800e3c4:	fa04 f003 	lslle.w	r0, r4, r3
 800e3c8:	f7f2 f8c4 	bl	8000554 <__aeabi_ui2d>
 800e3cc:	2201      	movs	r2, #1
 800e3ce:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e3d2:	3e01      	subs	r6, #1
 800e3d4:	9214      	str	r2, [sp, #80]	@ 0x50
 800e3d6:	e777      	b.n	800e2c8 <_dtoa_r+0x100>
 800e3d8:	2301      	movs	r3, #1
 800e3da:	e7b8      	b.n	800e34e <_dtoa_r+0x186>
 800e3dc:	9012      	str	r0, [sp, #72]	@ 0x48
 800e3de:	e7b7      	b.n	800e350 <_dtoa_r+0x188>
 800e3e0:	427b      	negs	r3, r7
 800e3e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	eba8 0807 	sub.w	r8, r8, r7
 800e3ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800e3ec:	e7c4      	b.n	800e378 <_dtoa_r+0x1b0>
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e3f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	dc35      	bgt.n	800e464 <_dtoa_r+0x29c>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	9300      	str	r3, [sp, #0]
 800e3fc:	9307      	str	r3, [sp, #28]
 800e3fe:	461a      	mov	r2, r3
 800e400:	920e      	str	r2, [sp, #56]	@ 0x38
 800e402:	e00b      	b.n	800e41c <_dtoa_r+0x254>
 800e404:	2301      	movs	r3, #1
 800e406:	e7f3      	b.n	800e3f0 <_dtoa_r+0x228>
 800e408:	2300      	movs	r3, #0
 800e40a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e40c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e40e:	18fb      	adds	r3, r7, r3
 800e410:	9300      	str	r3, [sp, #0]
 800e412:	3301      	adds	r3, #1
 800e414:	2b01      	cmp	r3, #1
 800e416:	9307      	str	r3, [sp, #28]
 800e418:	bfb8      	it	lt
 800e41a:	2301      	movlt	r3, #1
 800e41c:	f8db 001c 	ldr.w	r0, [fp, #28]
 800e420:	2100      	movs	r1, #0
 800e422:	2204      	movs	r2, #4
 800e424:	f102 0514 	add.w	r5, r2, #20
 800e428:	429d      	cmp	r5, r3
 800e42a:	d91f      	bls.n	800e46c <_dtoa_r+0x2a4>
 800e42c:	6041      	str	r1, [r0, #4]
 800e42e:	4658      	mov	r0, fp
 800e430:	f001 fa26 	bl	800f880 <_Balloc>
 800e434:	4682      	mov	sl, r0
 800e436:	2800      	cmp	r0, #0
 800e438:	d13c      	bne.n	800e4b4 <_dtoa_r+0x2ec>
 800e43a:	4b1b      	ldr	r3, [pc, #108]	@ (800e4a8 <_dtoa_r+0x2e0>)
 800e43c:	4602      	mov	r2, r0
 800e43e:	f240 11af 	movw	r1, #431	@ 0x1af
 800e442:	e6d8      	b.n	800e1f6 <_dtoa_r+0x2e>
 800e444:	2301      	movs	r3, #1
 800e446:	e7e0      	b.n	800e40a <_dtoa_r+0x242>
 800e448:	2401      	movs	r4, #1
 800e44a:	2300      	movs	r3, #0
 800e44c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e44e:	940b      	str	r4, [sp, #44]	@ 0x2c
 800e450:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e454:	9300      	str	r3, [sp, #0]
 800e456:	9307      	str	r3, [sp, #28]
 800e458:	2200      	movs	r2, #0
 800e45a:	2312      	movs	r3, #18
 800e45c:	e7d0      	b.n	800e400 <_dtoa_r+0x238>
 800e45e:	2301      	movs	r3, #1
 800e460:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e462:	e7f5      	b.n	800e450 <_dtoa_r+0x288>
 800e464:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e466:	9300      	str	r3, [sp, #0]
 800e468:	9307      	str	r3, [sp, #28]
 800e46a:	e7d7      	b.n	800e41c <_dtoa_r+0x254>
 800e46c:	3101      	adds	r1, #1
 800e46e:	0052      	lsls	r2, r2, #1
 800e470:	e7d8      	b.n	800e424 <_dtoa_r+0x25c>
 800e472:	bf00      	nop
 800e474:	f3af 8000 	nop.w
 800e478:	636f4361 	.word	0x636f4361
 800e47c:	3fd287a7 	.word	0x3fd287a7
 800e480:	8b60c8b3 	.word	0x8b60c8b3
 800e484:	3fc68a28 	.word	0x3fc68a28
 800e488:	509f79fb 	.word	0x509f79fb
 800e48c:	3fd34413 	.word	0x3fd34413
 800e490:	08010c52 	.word	0x08010c52
 800e494:	08010c69 	.word	0x08010c69
 800e498:	7ff00000 	.word	0x7ff00000
 800e49c:	08010a81 	.word	0x08010a81
 800e4a0:	3ff80000 	.word	0x3ff80000
 800e4a4:	08010dd0 	.word	0x08010dd0
 800e4a8:	08010cc1 	.word	0x08010cc1
 800e4ac:	08010c4e 	.word	0x08010c4e
 800e4b0:	08010a80 	.word	0x08010a80
 800e4b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e4b8:	6018      	str	r0, [r3, #0]
 800e4ba:	9b07      	ldr	r3, [sp, #28]
 800e4bc:	2b0e      	cmp	r3, #14
 800e4be:	f200 80a4 	bhi.w	800e60a <_dtoa_r+0x442>
 800e4c2:	2c00      	cmp	r4, #0
 800e4c4:	f000 80a1 	beq.w	800e60a <_dtoa_r+0x442>
 800e4c8:	2f00      	cmp	r7, #0
 800e4ca:	dd33      	ble.n	800e534 <_dtoa_r+0x36c>
 800e4cc:	4bad      	ldr	r3, [pc, #692]	@ (800e784 <_dtoa_r+0x5bc>)
 800e4ce:	f007 020f 	and.w	r2, r7, #15
 800e4d2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e4d6:	ed93 7b00 	vldr	d7, [r3]
 800e4da:	05f8      	lsls	r0, r7, #23
 800e4dc:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e4e0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e4e4:	d516      	bpl.n	800e514 <_dtoa_r+0x34c>
 800e4e6:	4ba8      	ldr	r3, [pc, #672]	@ (800e788 <_dtoa_r+0x5c0>)
 800e4e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e4ec:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e4f0:	f7f2 f9d4 	bl	800089c <__aeabi_ddiv>
 800e4f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e4f8:	f004 040f 	and.w	r4, r4, #15
 800e4fc:	2603      	movs	r6, #3
 800e4fe:	4da2      	ldr	r5, [pc, #648]	@ (800e788 <_dtoa_r+0x5c0>)
 800e500:	b954      	cbnz	r4, 800e518 <_dtoa_r+0x350>
 800e502:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e506:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e50a:	f7f2 f9c7 	bl	800089c <__aeabi_ddiv>
 800e50e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e512:	e028      	b.n	800e566 <_dtoa_r+0x39e>
 800e514:	2602      	movs	r6, #2
 800e516:	e7f2      	b.n	800e4fe <_dtoa_r+0x336>
 800e518:	07e1      	lsls	r1, r4, #31
 800e51a:	d508      	bpl.n	800e52e <_dtoa_r+0x366>
 800e51c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e520:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e524:	f7f2 f890 	bl	8000648 <__aeabi_dmul>
 800e528:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e52c:	3601      	adds	r6, #1
 800e52e:	1064      	asrs	r4, r4, #1
 800e530:	3508      	adds	r5, #8
 800e532:	e7e5      	b.n	800e500 <_dtoa_r+0x338>
 800e534:	f000 80d2 	beq.w	800e6dc <_dtoa_r+0x514>
 800e538:	427c      	negs	r4, r7
 800e53a:	4b92      	ldr	r3, [pc, #584]	@ (800e784 <_dtoa_r+0x5bc>)
 800e53c:	4d92      	ldr	r5, [pc, #584]	@ (800e788 <_dtoa_r+0x5c0>)
 800e53e:	f004 020f 	and.w	r2, r4, #15
 800e542:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e54a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e54e:	f7f2 f87b 	bl	8000648 <__aeabi_dmul>
 800e552:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e556:	1124      	asrs	r4, r4, #4
 800e558:	2300      	movs	r3, #0
 800e55a:	2602      	movs	r6, #2
 800e55c:	2c00      	cmp	r4, #0
 800e55e:	f040 80b2 	bne.w	800e6c6 <_dtoa_r+0x4fe>
 800e562:	2b00      	cmp	r3, #0
 800e564:	d1d3      	bne.n	800e50e <_dtoa_r+0x346>
 800e566:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e568:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	f000 80b7 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e572:	4b86      	ldr	r3, [pc, #536]	@ (800e78c <_dtoa_r+0x5c4>)
 800e574:	2200      	movs	r2, #0
 800e576:	4620      	mov	r0, r4
 800e578:	4629      	mov	r1, r5
 800e57a:	f7f2 fad7 	bl	8000b2c <__aeabi_dcmplt>
 800e57e:	2800      	cmp	r0, #0
 800e580:	f000 80ae 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e584:	9b07      	ldr	r3, [sp, #28]
 800e586:	2b00      	cmp	r3, #0
 800e588:	f000 80aa 	beq.w	800e6e0 <_dtoa_r+0x518>
 800e58c:	9b00      	ldr	r3, [sp, #0]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	dd37      	ble.n	800e602 <_dtoa_r+0x43a>
 800e592:	1e7b      	subs	r3, r7, #1
 800e594:	9304      	str	r3, [sp, #16]
 800e596:	4620      	mov	r0, r4
 800e598:	4b7d      	ldr	r3, [pc, #500]	@ (800e790 <_dtoa_r+0x5c8>)
 800e59a:	2200      	movs	r2, #0
 800e59c:	4629      	mov	r1, r5
 800e59e:	f7f2 f853 	bl	8000648 <__aeabi_dmul>
 800e5a2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e5a6:	9c00      	ldr	r4, [sp, #0]
 800e5a8:	3601      	adds	r6, #1
 800e5aa:	4630      	mov	r0, r6
 800e5ac:	f7f1 ffe2 	bl	8000574 <__aeabi_i2d>
 800e5b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e5b4:	f7f2 f848 	bl	8000648 <__aeabi_dmul>
 800e5b8:	4b76      	ldr	r3, [pc, #472]	@ (800e794 <_dtoa_r+0x5cc>)
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	f7f1 fe8e 	bl	80002dc <__adddf3>
 800e5c0:	4605      	mov	r5, r0
 800e5c2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e5c6:	2c00      	cmp	r4, #0
 800e5c8:	f040 808d 	bne.w	800e6e6 <_dtoa_r+0x51e>
 800e5cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5d0:	4b71      	ldr	r3, [pc, #452]	@ (800e798 <_dtoa_r+0x5d0>)
 800e5d2:	2200      	movs	r2, #0
 800e5d4:	f7f1 fe80 	bl	80002d8 <__aeabi_dsub>
 800e5d8:	4602      	mov	r2, r0
 800e5da:	460b      	mov	r3, r1
 800e5dc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e5e0:	462a      	mov	r2, r5
 800e5e2:	4633      	mov	r3, r6
 800e5e4:	f7f2 fac0 	bl	8000b68 <__aeabi_dcmpgt>
 800e5e8:	2800      	cmp	r0, #0
 800e5ea:	f040 828b 	bne.w	800eb04 <_dtoa_r+0x93c>
 800e5ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e5f2:	462a      	mov	r2, r5
 800e5f4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e5f8:	f7f2 fa98 	bl	8000b2c <__aeabi_dcmplt>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	f040 8128 	bne.w	800e852 <_dtoa_r+0x68a>
 800e602:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e606:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e60a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f2c0 815a 	blt.w	800e8c6 <_dtoa_r+0x6fe>
 800e612:	2f0e      	cmp	r7, #14
 800e614:	f300 8157 	bgt.w	800e8c6 <_dtoa_r+0x6fe>
 800e618:	4b5a      	ldr	r3, [pc, #360]	@ (800e784 <_dtoa_r+0x5bc>)
 800e61a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e61e:	ed93 7b00 	vldr	d7, [r3]
 800e622:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e624:	2b00      	cmp	r3, #0
 800e626:	ed8d 7b00 	vstr	d7, [sp]
 800e62a:	da03      	bge.n	800e634 <_dtoa_r+0x46c>
 800e62c:	9b07      	ldr	r3, [sp, #28]
 800e62e:	2b00      	cmp	r3, #0
 800e630:	f340 8101 	ble.w	800e836 <_dtoa_r+0x66e>
 800e634:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e638:	4656      	mov	r6, sl
 800e63a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e63e:	4620      	mov	r0, r4
 800e640:	4629      	mov	r1, r5
 800e642:	f7f2 f92b 	bl	800089c <__aeabi_ddiv>
 800e646:	f7f2 faaf 	bl	8000ba8 <__aeabi_d2iz>
 800e64a:	4680      	mov	r8, r0
 800e64c:	f7f1 ff92 	bl	8000574 <__aeabi_i2d>
 800e650:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e654:	f7f1 fff8 	bl	8000648 <__aeabi_dmul>
 800e658:	4602      	mov	r2, r0
 800e65a:	460b      	mov	r3, r1
 800e65c:	4620      	mov	r0, r4
 800e65e:	4629      	mov	r1, r5
 800e660:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e664:	f7f1 fe38 	bl	80002d8 <__aeabi_dsub>
 800e668:	f806 4b01 	strb.w	r4, [r6], #1
 800e66c:	9d07      	ldr	r5, [sp, #28]
 800e66e:	eba6 040a 	sub.w	r4, r6, sl
 800e672:	42a5      	cmp	r5, r4
 800e674:	4602      	mov	r2, r0
 800e676:	460b      	mov	r3, r1
 800e678:	f040 8117 	bne.w	800e8aa <_dtoa_r+0x6e2>
 800e67c:	f7f1 fe2e 	bl	80002dc <__adddf3>
 800e680:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e684:	4604      	mov	r4, r0
 800e686:	460d      	mov	r5, r1
 800e688:	f7f2 fa6e 	bl	8000b68 <__aeabi_dcmpgt>
 800e68c:	2800      	cmp	r0, #0
 800e68e:	f040 80f9 	bne.w	800e884 <_dtoa_r+0x6bc>
 800e692:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e696:	4620      	mov	r0, r4
 800e698:	4629      	mov	r1, r5
 800e69a:	f7f2 fa3d 	bl	8000b18 <__aeabi_dcmpeq>
 800e69e:	b118      	cbz	r0, 800e6a8 <_dtoa_r+0x4e0>
 800e6a0:	f018 0f01 	tst.w	r8, #1
 800e6a4:	f040 80ee 	bne.w	800e884 <_dtoa_r+0x6bc>
 800e6a8:	4649      	mov	r1, r9
 800e6aa:	4658      	mov	r0, fp
 800e6ac:	f001 f928 	bl	800f900 <_Bfree>
 800e6b0:	2300      	movs	r3, #0
 800e6b2:	7033      	strb	r3, [r6, #0]
 800e6b4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e6b6:	3701      	adds	r7, #1
 800e6b8:	601f      	str	r7, [r3, #0]
 800e6ba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	f000 831d 	beq.w	800ecfc <_dtoa_r+0xb34>
 800e6c2:	601e      	str	r6, [r3, #0]
 800e6c4:	e31a      	b.n	800ecfc <_dtoa_r+0xb34>
 800e6c6:	07e2      	lsls	r2, r4, #31
 800e6c8:	d505      	bpl.n	800e6d6 <_dtoa_r+0x50e>
 800e6ca:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e6ce:	f7f1 ffbb 	bl	8000648 <__aeabi_dmul>
 800e6d2:	3601      	adds	r6, #1
 800e6d4:	2301      	movs	r3, #1
 800e6d6:	1064      	asrs	r4, r4, #1
 800e6d8:	3508      	adds	r5, #8
 800e6da:	e73f      	b.n	800e55c <_dtoa_r+0x394>
 800e6dc:	2602      	movs	r6, #2
 800e6de:	e742      	b.n	800e566 <_dtoa_r+0x39e>
 800e6e0:	9c07      	ldr	r4, [sp, #28]
 800e6e2:	9704      	str	r7, [sp, #16]
 800e6e4:	e761      	b.n	800e5aa <_dtoa_r+0x3e2>
 800e6e6:	4b27      	ldr	r3, [pc, #156]	@ (800e784 <_dtoa_r+0x5bc>)
 800e6e8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e6ea:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e6ee:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6f2:	4454      	add	r4, sl
 800e6f4:	2900      	cmp	r1, #0
 800e6f6:	d053      	beq.n	800e7a0 <_dtoa_r+0x5d8>
 800e6f8:	4928      	ldr	r1, [pc, #160]	@ (800e79c <_dtoa_r+0x5d4>)
 800e6fa:	2000      	movs	r0, #0
 800e6fc:	f7f2 f8ce 	bl	800089c <__aeabi_ddiv>
 800e700:	4633      	mov	r3, r6
 800e702:	462a      	mov	r2, r5
 800e704:	f7f1 fde8 	bl	80002d8 <__aeabi_dsub>
 800e708:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e70c:	4656      	mov	r6, sl
 800e70e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e712:	f7f2 fa49 	bl	8000ba8 <__aeabi_d2iz>
 800e716:	4605      	mov	r5, r0
 800e718:	f7f1 ff2c 	bl	8000574 <__aeabi_i2d>
 800e71c:	4602      	mov	r2, r0
 800e71e:	460b      	mov	r3, r1
 800e720:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e724:	f7f1 fdd8 	bl	80002d8 <__aeabi_dsub>
 800e728:	3530      	adds	r5, #48	@ 0x30
 800e72a:	4602      	mov	r2, r0
 800e72c:	460b      	mov	r3, r1
 800e72e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e732:	f806 5b01 	strb.w	r5, [r6], #1
 800e736:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e73a:	f7f2 f9f7 	bl	8000b2c <__aeabi_dcmplt>
 800e73e:	2800      	cmp	r0, #0
 800e740:	d171      	bne.n	800e826 <_dtoa_r+0x65e>
 800e742:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e746:	4911      	ldr	r1, [pc, #68]	@ (800e78c <_dtoa_r+0x5c4>)
 800e748:	2000      	movs	r0, #0
 800e74a:	f7f1 fdc5 	bl	80002d8 <__aeabi_dsub>
 800e74e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e752:	f7f2 f9eb 	bl	8000b2c <__aeabi_dcmplt>
 800e756:	2800      	cmp	r0, #0
 800e758:	f040 8095 	bne.w	800e886 <_dtoa_r+0x6be>
 800e75c:	42a6      	cmp	r6, r4
 800e75e:	f43f af50 	beq.w	800e602 <_dtoa_r+0x43a>
 800e762:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e766:	4b0a      	ldr	r3, [pc, #40]	@ (800e790 <_dtoa_r+0x5c8>)
 800e768:	2200      	movs	r2, #0
 800e76a:	f7f1 ff6d 	bl	8000648 <__aeabi_dmul>
 800e76e:	4b08      	ldr	r3, [pc, #32]	@ (800e790 <_dtoa_r+0x5c8>)
 800e770:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e774:	2200      	movs	r2, #0
 800e776:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e77a:	f7f1 ff65 	bl	8000648 <__aeabi_dmul>
 800e77e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e782:	e7c4      	b.n	800e70e <_dtoa_r+0x546>
 800e784:	08010dd0 	.word	0x08010dd0
 800e788:	08010da8 	.word	0x08010da8
 800e78c:	3ff00000 	.word	0x3ff00000
 800e790:	40240000 	.word	0x40240000
 800e794:	401c0000 	.word	0x401c0000
 800e798:	40140000 	.word	0x40140000
 800e79c:	3fe00000 	.word	0x3fe00000
 800e7a0:	4631      	mov	r1, r6
 800e7a2:	4628      	mov	r0, r5
 800e7a4:	f7f1 ff50 	bl	8000648 <__aeabi_dmul>
 800e7a8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e7ac:	9415      	str	r4, [sp, #84]	@ 0x54
 800e7ae:	4656      	mov	r6, sl
 800e7b0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7b4:	f7f2 f9f8 	bl	8000ba8 <__aeabi_d2iz>
 800e7b8:	4605      	mov	r5, r0
 800e7ba:	f7f1 fedb 	bl	8000574 <__aeabi_i2d>
 800e7be:	4602      	mov	r2, r0
 800e7c0:	460b      	mov	r3, r1
 800e7c2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7c6:	f7f1 fd87 	bl	80002d8 <__aeabi_dsub>
 800e7ca:	3530      	adds	r5, #48	@ 0x30
 800e7cc:	f806 5b01 	strb.w	r5, [r6], #1
 800e7d0:	4602      	mov	r2, r0
 800e7d2:	460b      	mov	r3, r1
 800e7d4:	42a6      	cmp	r6, r4
 800e7d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e7da:	f04f 0200 	mov.w	r2, #0
 800e7de:	d124      	bne.n	800e82a <_dtoa_r+0x662>
 800e7e0:	4bac      	ldr	r3, [pc, #688]	@ (800ea94 <_dtoa_r+0x8cc>)
 800e7e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e7e6:	f7f1 fd79 	bl	80002dc <__adddf3>
 800e7ea:	4602      	mov	r2, r0
 800e7ec:	460b      	mov	r3, r1
 800e7ee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f2:	f7f2 f9b9 	bl	8000b68 <__aeabi_dcmpgt>
 800e7f6:	2800      	cmp	r0, #0
 800e7f8:	d145      	bne.n	800e886 <_dtoa_r+0x6be>
 800e7fa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e7fe:	49a5      	ldr	r1, [pc, #660]	@ (800ea94 <_dtoa_r+0x8cc>)
 800e800:	2000      	movs	r0, #0
 800e802:	f7f1 fd69 	bl	80002d8 <__aeabi_dsub>
 800e806:	4602      	mov	r2, r0
 800e808:	460b      	mov	r3, r1
 800e80a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e80e:	f7f2 f98d 	bl	8000b2c <__aeabi_dcmplt>
 800e812:	2800      	cmp	r0, #0
 800e814:	f43f aef5 	beq.w	800e602 <_dtoa_r+0x43a>
 800e818:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e81a:	1e73      	subs	r3, r6, #1
 800e81c:	9315      	str	r3, [sp, #84]	@ 0x54
 800e81e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e822:	2b30      	cmp	r3, #48	@ 0x30
 800e824:	d0f8      	beq.n	800e818 <_dtoa_r+0x650>
 800e826:	9f04      	ldr	r7, [sp, #16]
 800e828:	e73e      	b.n	800e6a8 <_dtoa_r+0x4e0>
 800e82a:	4b9b      	ldr	r3, [pc, #620]	@ (800ea98 <_dtoa_r+0x8d0>)
 800e82c:	f7f1 ff0c 	bl	8000648 <__aeabi_dmul>
 800e830:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e834:	e7bc      	b.n	800e7b0 <_dtoa_r+0x5e8>
 800e836:	d10c      	bne.n	800e852 <_dtoa_r+0x68a>
 800e838:	4b98      	ldr	r3, [pc, #608]	@ (800ea9c <_dtoa_r+0x8d4>)
 800e83a:	2200      	movs	r2, #0
 800e83c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e840:	f7f1 ff02 	bl	8000648 <__aeabi_dmul>
 800e844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e848:	f7f2 f984 	bl	8000b54 <__aeabi_dcmpge>
 800e84c:	2800      	cmp	r0, #0
 800e84e:	f000 8157 	beq.w	800eb00 <_dtoa_r+0x938>
 800e852:	2400      	movs	r4, #0
 800e854:	4625      	mov	r5, r4
 800e856:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e858:	43db      	mvns	r3, r3
 800e85a:	9304      	str	r3, [sp, #16]
 800e85c:	4656      	mov	r6, sl
 800e85e:	2700      	movs	r7, #0
 800e860:	4621      	mov	r1, r4
 800e862:	4658      	mov	r0, fp
 800e864:	f001 f84c 	bl	800f900 <_Bfree>
 800e868:	2d00      	cmp	r5, #0
 800e86a:	d0dc      	beq.n	800e826 <_dtoa_r+0x65e>
 800e86c:	b12f      	cbz	r7, 800e87a <_dtoa_r+0x6b2>
 800e86e:	42af      	cmp	r7, r5
 800e870:	d003      	beq.n	800e87a <_dtoa_r+0x6b2>
 800e872:	4639      	mov	r1, r7
 800e874:	4658      	mov	r0, fp
 800e876:	f001 f843 	bl	800f900 <_Bfree>
 800e87a:	4629      	mov	r1, r5
 800e87c:	4658      	mov	r0, fp
 800e87e:	f001 f83f 	bl	800f900 <_Bfree>
 800e882:	e7d0      	b.n	800e826 <_dtoa_r+0x65e>
 800e884:	9704      	str	r7, [sp, #16]
 800e886:	4633      	mov	r3, r6
 800e888:	461e      	mov	r6, r3
 800e88a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e88e:	2a39      	cmp	r2, #57	@ 0x39
 800e890:	d107      	bne.n	800e8a2 <_dtoa_r+0x6da>
 800e892:	459a      	cmp	sl, r3
 800e894:	d1f8      	bne.n	800e888 <_dtoa_r+0x6c0>
 800e896:	9a04      	ldr	r2, [sp, #16]
 800e898:	3201      	adds	r2, #1
 800e89a:	9204      	str	r2, [sp, #16]
 800e89c:	2230      	movs	r2, #48	@ 0x30
 800e89e:	f88a 2000 	strb.w	r2, [sl]
 800e8a2:	781a      	ldrb	r2, [r3, #0]
 800e8a4:	3201      	adds	r2, #1
 800e8a6:	701a      	strb	r2, [r3, #0]
 800e8a8:	e7bd      	b.n	800e826 <_dtoa_r+0x65e>
 800e8aa:	4b7b      	ldr	r3, [pc, #492]	@ (800ea98 <_dtoa_r+0x8d0>)
 800e8ac:	2200      	movs	r2, #0
 800e8ae:	f7f1 fecb 	bl	8000648 <__aeabi_dmul>
 800e8b2:	2200      	movs	r2, #0
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	4604      	mov	r4, r0
 800e8b8:	460d      	mov	r5, r1
 800e8ba:	f7f2 f92d 	bl	8000b18 <__aeabi_dcmpeq>
 800e8be:	2800      	cmp	r0, #0
 800e8c0:	f43f aebb 	beq.w	800e63a <_dtoa_r+0x472>
 800e8c4:	e6f0      	b.n	800e6a8 <_dtoa_r+0x4e0>
 800e8c6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e8c8:	2a00      	cmp	r2, #0
 800e8ca:	f000 80db 	beq.w	800ea84 <_dtoa_r+0x8bc>
 800e8ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e8d0:	2a01      	cmp	r2, #1
 800e8d2:	f300 80bf 	bgt.w	800ea54 <_dtoa_r+0x88c>
 800e8d6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e8d8:	2a00      	cmp	r2, #0
 800e8da:	f000 80b7 	beq.w	800ea4c <_dtoa_r+0x884>
 800e8de:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e8e2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e8e4:	4646      	mov	r6, r8
 800e8e6:	9a08      	ldr	r2, [sp, #32]
 800e8e8:	2101      	movs	r1, #1
 800e8ea:	441a      	add	r2, r3
 800e8ec:	4658      	mov	r0, fp
 800e8ee:	4498      	add	r8, r3
 800e8f0:	9208      	str	r2, [sp, #32]
 800e8f2:	f001 f903 	bl	800fafc <__i2b>
 800e8f6:	4605      	mov	r5, r0
 800e8f8:	b15e      	cbz	r6, 800e912 <_dtoa_r+0x74a>
 800e8fa:	9b08      	ldr	r3, [sp, #32]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	dd08      	ble.n	800e912 <_dtoa_r+0x74a>
 800e900:	42b3      	cmp	r3, r6
 800e902:	9a08      	ldr	r2, [sp, #32]
 800e904:	bfa8      	it	ge
 800e906:	4633      	movge	r3, r6
 800e908:	eba8 0803 	sub.w	r8, r8, r3
 800e90c:	1af6      	subs	r6, r6, r3
 800e90e:	1ad3      	subs	r3, r2, r3
 800e910:	9308      	str	r3, [sp, #32]
 800e912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e914:	b1f3      	cbz	r3, 800e954 <_dtoa_r+0x78c>
 800e916:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f000 80b7 	beq.w	800ea8c <_dtoa_r+0x8c4>
 800e91e:	b18c      	cbz	r4, 800e944 <_dtoa_r+0x77c>
 800e920:	4629      	mov	r1, r5
 800e922:	4622      	mov	r2, r4
 800e924:	4658      	mov	r0, fp
 800e926:	f001 f9a9 	bl	800fc7c <__pow5mult>
 800e92a:	464a      	mov	r2, r9
 800e92c:	4601      	mov	r1, r0
 800e92e:	4605      	mov	r5, r0
 800e930:	4658      	mov	r0, fp
 800e932:	f001 f8f9 	bl	800fb28 <__multiply>
 800e936:	4649      	mov	r1, r9
 800e938:	9004      	str	r0, [sp, #16]
 800e93a:	4658      	mov	r0, fp
 800e93c:	f000 ffe0 	bl	800f900 <_Bfree>
 800e940:	9b04      	ldr	r3, [sp, #16]
 800e942:	4699      	mov	r9, r3
 800e944:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e946:	1b1a      	subs	r2, r3, r4
 800e948:	d004      	beq.n	800e954 <_dtoa_r+0x78c>
 800e94a:	4649      	mov	r1, r9
 800e94c:	4658      	mov	r0, fp
 800e94e:	f001 f995 	bl	800fc7c <__pow5mult>
 800e952:	4681      	mov	r9, r0
 800e954:	2101      	movs	r1, #1
 800e956:	4658      	mov	r0, fp
 800e958:	f001 f8d0 	bl	800fafc <__i2b>
 800e95c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e95e:	4604      	mov	r4, r0
 800e960:	2b00      	cmp	r3, #0
 800e962:	f000 81cf 	beq.w	800ed04 <_dtoa_r+0xb3c>
 800e966:	461a      	mov	r2, r3
 800e968:	4601      	mov	r1, r0
 800e96a:	4658      	mov	r0, fp
 800e96c:	f001 f986 	bl	800fc7c <__pow5mult>
 800e970:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e972:	2b01      	cmp	r3, #1
 800e974:	4604      	mov	r4, r0
 800e976:	f300 8095 	bgt.w	800eaa4 <_dtoa_r+0x8dc>
 800e97a:	9b02      	ldr	r3, [sp, #8]
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	f040 8087 	bne.w	800ea90 <_dtoa_r+0x8c8>
 800e982:	9b03      	ldr	r3, [sp, #12]
 800e984:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e988:	2b00      	cmp	r3, #0
 800e98a:	f040 8089 	bne.w	800eaa0 <_dtoa_r+0x8d8>
 800e98e:	9b03      	ldr	r3, [sp, #12]
 800e990:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e994:	0d1b      	lsrs	r3, r3, #20
 800e996:	051b      	lsls	r3, r3, #20
 800e998:	b12b      	cbz	r3, 800e9a6 <_dtoa_r+0x7de>
 800e99a:	9b08      	ldr	r3, [sp, #32]
 800e99c:	3301      	adds	r3, #1
 800e99e:	9308      	str	r3, [sp, #32]
 800e9a0:	f108 0801 	add.w	r8, r8, #1
 800e9a4:	2301      	movs	r3, #1
 800e9a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e9a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 81b0 	beq.w	800ed10 <_dtoa_r+0xb48>
 800e9b0:	6923      	ldr	r3, [r4, #16]
 800e9b2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e9b6:	6918      	ldr	r0, [r3, #16]
 800e9b8:	f001 f854 	bl	800fa64 <__hi0bits>
 800e9bc:	f1c0 0020 	rsb	r0, r0, #32
 800e9c0:	9b08      	ldr	r3, [sp, #32]
 800e9c2:	4418      	add	r0, r3
 800e9c4:	f010 001f 	ands.w	r0, r0, #31
 800e9c8:	d077      	beq.n	800eaba <_dtoa_r+0x8f2>
 800e9ca:	f1c0 0320 	rsb	r3, r0, #32
 800e9ce:	2b04      	cmp	r3, #4
 800e9d0:	dd6b      	ble.n	800eaaa <_dtoa_r+0x8e2>
 800e9d2:	9b08      	ldr	r3, [sp, #32]
 800e9d4:	f1c0 001c 	rsb	r0, r0, #28
 800e9d8:	4403      	add	r3, r0
 800e9da:	4480      	add	r8, r0
 800e9dc:	4406      	add	r6, r0
 800e9de:	9308      	str	r3, [sp, #32]
 800e9e0:	f1b8 0f00 	cmp.w	r8, #0
 800e9e4:	dd05      	ble.n	800e9f2 <_dtoa_r+0x82a>
 800e9e6:	4649      	mov	r1, r9
 800e9e8:	4642      	mov	r2, r8
 800e9ea:	4658      	mov	r0, fp
 800e9ec:	f001 f9a0 	bl	800fd30 <__lshift>
 800e9f0:	4681      	mov	r9, r0
 800e9f2:	9b08      	ldr	r3, [sp, #32]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	dd05      	ble.n	800ea04 <_dtoa_r+0x83c>
 800e9f8:	4621      	mov	r1, r4
 800e9fa:	461a      	mov	r2, r3
 800e9fc:	4658      	mov	r0, fp
 800e9fe:	f001 f997 	bl	800fd30 <__lshift>
 800ea02:	4604      	mov	r4, r0
 800ea04:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d059      	beq.n	800eabe <_dtoa_r+0x8f6>
 800ea0a:	4621      	mov	r1, r4
 800ea0c:	4648      	mov	r0, r9
 800ea0e:	f001 f9fb 	bl	800fe08 <__mcmp>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	da53      	bge.n	800eabe <_dtoa_r+0x8f6>
 800ea16:	1e7b      	subs	r3, r7, #1
 800ea18:	9304      	str	r3, [sp, #16]
 800ea1a:	4649      	mov	r1, r9
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	220a      	movs	r2, #10
 800ea20:	4658      	mov	r0, fp
 800ea22:	f000 ff8f 	bl	800f944 <__multadd>
 800ea26:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea28:	4681      	mov	r9, r0
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	f000 8172 	beq.w	800ed14 <_dtoa_r+0xb4c>
 800ea30:	2300      	movs	r3, #0
 800ea32:	4629      	mov	r1, r5
 800ea34:	220a      	movs	r2, #10
 800ea36:	4658      	mov	r0, fp
 800ea38:	f000 ff84 	bl	800f944 <__multadd>
 800ea3c:	9b00      	ldr	r3, [sp, #0]
 800ea3e:	2b00      	cmp	r3, #0
 800ea40:	4605      	mov	r5, r0
 800ea42:	dc67      	bgt.n	800eb14 <_dtoa_r+0x94c>
 800ea44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea46:	2b02      	cmp	r3, #2
 800ea48:	dc41      	bgt.n	800eace <_dtoa_r+0x906>
 800ea4a:	e063      	b.n	800eb14 <_dtoa_r+0x94c>
 800ea4c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ea4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800ea52:	e746      	b.n	800e8e2 <_dtoa_r+0x71a>
 800ea54:	9b07      	ldr	r3, [sp, #28]
 800ea56:	1e5c      	subs	r4, r3, #1
 800ea58:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea5a:	42a3      	cmp	r3, r4
 800ea5c:	bfbf      	itttt	lt
 800ea5e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800ea60:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800ea62:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800ea64:	1ae3      	sublt	r3, r4, r3
 800ea66:	bfb4      	ite	lt
 800ea68:	18d2      	addlt	r2, r2, r3
 800ea6a:	1b1c      	subge	r4, r3, r4
 800ea6c:	9b07      	ldr	r3, [sp, #28]
 800ea6e:	bfbc      	itt	lt
 800ea70:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800ea72:	2400      	movlt	r4, #0
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	bfb5      	itete	lt
 800ea78:	eba8 0603 	sublt.w	r6, r8, r3
 800ea7c:	9b07      	ldrge	r3, [sp, #28]
 800ea7e:	2300      	movlt	r3, #0
 800ea80:	4646      	movge	r6, r8
 800ea82:	e730      	b.n	800e8e6 <_dtoa_r+0x71e>
 800ea84:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ea86:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800ea88:	4646      	mov	r6, r8
 800ea8a:	e735      	b.n	800e8f8 <_dtoa_r+0x730>
 800ea8c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ea8e:	e75c      	b.n	800e94a <_dtoa_r+0x782>
 800ea90:	2300      	movs	r3, #0
 800ea92:	e788      	b.n	800e9a6 <_dtoa_r+0x7de>
 800ea94:	3fe00000 	.word	0x3fe00000
 800ea98:	40240000 	.word	0x40240000
 800ea9c:	40140000 	.word	0x40140000
 800eaa0:	9b02      	ldr	r3, [sp, #8]
 800eaa2:	e780      	b.n	800e9a6 <_dtoa_r+0x7de>
 800eaa4:	2300      	movs	r3, #0
 800eaa6:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaa8:	e782      	b.n	800e9b0 <_dtoa_r+0x7e8>
 800eaaa:	d099      	beq.n	800e9e0 <_dtoa_r+0x818>
 800eaac:	9a08      	ldr	r2, [sp, #32]
 800eaae:	331c      	adds	r3, #28
 800eab0:	441a      	add	r2, r3
 800eab2:	4498      	add	r8, r3
 800eab4:	441e      	add	r6, r3
 800eab6:	9208      	str	r2, [sp, #32]
 800eab8:	e792      	b.n	800e9e0 <_dtoa_r+0x818>
 800eaba:	4603      	mov	r3, r0
 800eabc:	e7f6      	b.n	800eaac <_dtoa_r+0x8e4>
 800eabe:	9b07      	ldr	r3, [sp, #28]
 800eac0:	9704      	str	r7, [sp, #16]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	dc20      	bgt.n	800eb08 <_dtoa_r+0x940>
 800eac6:	9300      	str	r3, [sp, #0]
 800eac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eaca:	2b02      	cmp	r3, #2
 800eacc:	dd1e      	ble.n	800eb0c <_dtoa_r+0x944>
 800eace:	9b00      	ldr	r3, [sp, #0]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f47f aec0 	bne.w	800e856 <_dtoa_r+0x68e>
 800ead6:	4621      	mov	r1, r4
 800ead8:	2205      	movs	r2, #5
 800eada:	4658      	mov	r0, fp
 800eadc:	f000 ff32 	bl	800f944 <__multadd>
 800eae0:	4601      	mov	r1, r0
 800eae2:	4604      	mov	r4, r0
 800eae4:	4648      	mov	r0, r9
 800eae6:	f001 f98f 	bl	800fe08 <__mcmp>
 800eaea:	2800      	cmp	r0, #0
 800eaec:	f77f aeb3 	ble.w	800e856 <_dtoa_r+0x68e>
 800eaf0:	4656      	mov	r6, sl
 800eaf2:	2331      	movs	r3, #49	@ 0x31
 800eaf4:	f806 3b01 	strb.w	r3, [r6], #1
 800eaf8:	9b04      	ldr	r3, [sp, #16]
 800eafa:	3301      	adds	r3, #1
 800eafc:	9304      	str	r3, [sp, #16]
 800eafe:	e6ae      	b.n	800e85e <_dtoa_r+0x696>
 800eb00:	9c07      	ldr	r4, [sp, #28]
 800eb02:	9704      	str	r7, [sp, #16]
 800eb04:	4625      	mov	r5, r4
 800eb06:	e7f3      	b.n	800eaf0 <_dtoa_r+0x928>
 800eb08:	9b07      	ldr	r3, [sp, #28]
 800eb0a:	9300      	str	r3, [sp, #0]
 800eb0c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 8104 	beq.w	800ed1c <_dtoa_r+0xb54>
 800eb14:	2e00      	cmp	r6, #0
 800eb16:	dd05      	ble.n	800eb24 <_dtoa_r+0x95c>
 800eb18:	4629      	mov	r1, r5
 800eb1a:	4632      	mov	r2, r6
 800eb1c:	4658      	mov	r0, fp
 800eb1e:	f001 f907 	bl	800fd30 <__lshift>
 800eb22:	4605      	mov	r5, r0
 800eb24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	d05a      	beq.n	800ebe0 <_dtoa_r+0xa18>
 800eb2a:	6869      	ldr	r1, [r5, #4]
 800eb2c:	4658      	mov	r0, fp
 800eb2e:	f000 fea7 	bl	800f880 <_Balloc>
 800eb32:	4606      	mov	r6, r0
 800eb34:	b928      	cbnz	r0, 800eb42 <_dtoa_r+0x97a>
 800eb36:	4b84      	ldr	r3, [pc, #528]	@ (800ed48 <_dtoa_r+0xb80>)
 800eb38:	4602      	mov	r2, r0
 800eb3a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800eb3e:	f7ff bb5a 	b.w	800e1f6 <_dtoa_r+0x2e>
 800eb42:	692a      	ldr	r2, [r5, #16]
 800eb44:	3202      	adds	r2, #2
 800eb46:	0092      	lsls	r2, r2, #2
 800eb48:	f105 010c 	add.w	r1, r5, #12
 800eb4c:	300c      	adds	r0, #12
 800eb4e:	f7ff fa76 	bl	800e03e <memcpy>
 800eb52:	2201      	movs	r2, #1
 800eb54:	4631      	mov	r1, r6
 800eb56:	4658      	mov	r0, fp
 800eb58:	f001 f8ea 	bl	800fd30 <__lshift>
 800eb5c:	f10a 0301 	add.w	r3, sl, #1
 800eb60:	9307      	str	r3, [sp, #28]
 800eb62:	9b00      	ldr	r3, [sp, #0]
 800eb64:	4453      	add	r3, sl
 800eb66:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eb68:	9b02      	ldr	r3, [sp, #8]
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	462f      	mov	r7, r5
 800eb70:	930a      	str	r3, [sp, #40]	@ 0x28
 800eb72:	4605      	mov	r5, r0
 800eb74:	9b07      	ldr	r3, [sp, #28]
 800eb76:	4621      	mov	r1, r4
 800eb78:	3b01      	subs	r3, #1
 800eb7a:	4648      	mov	r0, r9
 800eb7c:	9300      	str	r3, [sp, #0]
 800eb7e:	f7ff fa9b 	bl	800e0b8 <quorem>
 800eb82:	4639      	mov	r1, r7
 800eb84:	9002      	str	r0, [sp, #8]
 800eb86:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800eb8a:	4648      	mov	r0, r9
 800eb8c:	f001 f93c 	bl	800fe08 <__mcmp>
 800eb90:	462a      	mov	r2, r5
 800eb92:	9008      	str	r0, [sp, #32]
 800eb94:	4621      	mov	r1, r4
 800eb96:	4658      	mov	r0, fp
 800eb98:	f001 f952 	bl	800fe40 <__mdiff>
 800eb9c:	68c2      	ldr	r2, [r0, #12]
 800eb9e:	4606      	mov	r6, r0
 800eba0:	bb02      	cbnz	r2, 800ebe4 <_dtoa_r+0xa1c>
 800eba2:	4601      	mov	r1, r0
 800eba4:	4648      	mov	r0, r9
 800eba6:	f001 f92f 	bl	800fe08 <__mcmp>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	4631      	mov	r1, r6
 800ebae:	4658      	mov	r0, fp
 800ebb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800ebb2:	f000 fea5 	bl	800f900 <_Bfree>
 800ebb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebb8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ebba:	9e07      	ldr	r6, [sp, #28]
 800ebbc:	ea43 0102 	orr.w	r1, r3, r2
 800ebc0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ebc2:	4319      	orrs	r1, r3
 800ebc4:	d110      	bne.n	800ebe8 <_dtoa_r+0xa20>
 800ebc6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ebca:	d029      	beq.n	800ec20 <_dtoa_r+0xa58>
 800ebcc:	9b08      	ldr	r3, [sp, #32]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	dd02      	ble.n	800ebd8 <_dtoa_r+0xa10>
 800ebd2:	9b02      	ldr	r3, [sp, #8]
 800ebd4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800ebd8:	9b00      	ldr	r3, [sp, #0]
 800ebda:	f883 8000 	strb.w	r8, [r3]
 800ebde:	e63f      	b.n	800e860 <_dtoa_r+0x698>
 800ebe0:	4628      	mov	r0, r5
 800ebe2:	e7bb      	b.n	800eb5c <_dtoa_r+0x994>
 800ebe4:	2201      	movs	r2, #1
 800ebe6:	e7e1      	b.n	800ebac <_dtoa_r+0x9e4>
 800ebe8:	9b08      	ldr	r3, [sp, #32]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	db04      	blt.n	800ebf8 <_dtoa_r+0xa30>
 800ebee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ebf0:	430b      	orrs	r3, r1
 800ebf2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ebf4:	430b      	orrs	r3, r1
 800ebf6:	d120      	bne.n	800ec3a <_dtoa_r+0xa72>
 800ebf8:	2a00      	cmp	r2, #0
 800ebfa:	dded      	ble.n	800ebd8 <_dtoa_r+0xa10>
 800ebfc:	4649      	mov	r1, r9
 800ebfe:	2201      	movs	r2, #1
 800ec00:	4658      	mov	r0, fp
 800ec02:	f001 f895 	bl	800fd30 <__lshift>
 800ec06:	4621      	mov	r1, r4
 800ec08:	4681      	mov	r9, r0
 800ec0a:	f001 f8fd 	bl	800fe08 <__mcmp>
 800ec0e:	2800      	cmp	r0, #0
 800ec10:	dc03      	bgt.n	800ec1a <_dtoa_r+0xa52>
 800ec12:	d1e1      	bne.n	800ebd8 <_dtoa_r+0xa10>
 800ec14:	f018 0f01 	tst.w	r8, #1
 800ec18:	d0de      	beq.n	800ebd8 <_dtoa_r+0xa10>
 800ec1a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec1e:	d1d8      	bne.n	800ebd2 <_dtoa_r+0xa0a>
 800ec20:	9a00      	ldr	r2, [sp, #0]
 800ec22:	2339      	movs	r3, #57	@ 0x39
 800ec24:	7013      	strb	r3, [r2, #0]
 800ec26:	4633      	mov	r3, r6
 800ec28:	461e      	mov	r6, r3
 800ec2a:	3b01      	subs	r3, #1
 800ec2c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ec30:	2a39      	cmp	r2, #57	@ 0x39
 800ec32:	d052      	beq.n	800ecda <_dtoa_r+0xb12>
 800ec34:	3201      	adds	r2, #1
 800ec36:	701a      	strb	r2, [r3, #0]
 800ec38:	e612      	b.n	800e860 <_dtoa_r+0x698>
 800ec3a:	2a00      	cmp	r2, #0
 800ec3c:	dd07      	ble.n	800ec4e <_dtoa_r+0xa86>
 800ec3e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800ec42:	d0ed      	beq.n	800ec20 <_dtoa_r+0xa58>
 800ec44:	9a00      	ldr	r2, [sp, #0]
 800ec46:	f108 0301 	add.w	r3, r8, #1
 800ec4a:	7013      	strb	r3, [r2, #0]
 800ec4c:	e608      	b.n	800e860 <_dtoa_r+0x698>
 800ec4e:	9b07      	ldr	r3, [sp, #28]
 800ec50:	9a07      	ldr	r2, [sp, #28]
 800ec52:	f803 8c01 	strb.w	r8, [r3, #-1]
 800ec56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ec58:	4293      	cmp	r3, r2
 800ec5a:	d028      	beq.n	800ecae <_dtoa_r+0xae6>
 800ec5c:	4649      	mov	r1, r9
 800ec5e:	2300      	movs	r3, #0
 800ec60:	220a      	movs	r2, #10
 800ec62:	4658      	mov	r0, fp
 800ec64:	f000 fe6e 	bl	800f944 <__multadd>
 800ec68:	42af      	cmp	r7, r5
 800ec6a:	4681      	mov	r9, r0
 800ec6c:	f04f 0300 	mov.w	r3, #0
 800ec70:	f04f 020a 	mov.w	r2, #10
 800ec74:	4639      	mov	r1, r7
 800ec76:	4658      	mov	r0, fp
 800ec78:	d107      	bne.n	800ec8a <_dtoa_r+0xac2>
 800ec7a:	f000 fe63 	bl	800f944 <__multadd>
 800ec7e:	4607      	mov	r7, r0
 800ec80:	4605      	mov	r5, r0
 800ec82:	9b07      	ldr	r3, [sp, #28]
 800ec84:	3301      	adds	r3, #1
 800ec86:	9307      	str	r3, [sp, #28]
 800ec88:	e774      	b.n	800eb74 <_dtoa_r+0x9ac>
 800ec8a:	f000 fe5b 	bl	800f944 <__multadd>
 800ec8e:	4629      	mov	r1, r5
 800ec90:	4607      	mov	r7, r0
 800ec92:	2300      	movs	r3, #0
 800ec94:	220a      	movs	r2, #10
 800ec96:	4658      	mov	r0, fp
 800ec98:	f000 fe54 	bl	800f944 <__multadd>
 800ec9c:	4605      	mov	r5, r0
 800ec9e:	e7f0      	b.n	800ec82 <_dtoa_r+0xaba>
 800eca0:	9b00      	ldr	r3, [sp, #0]
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	bfcc      	ite	gt
 800eca6:	461e      	movgt	r6, r3
 800eca8:	2601      	movle	r6, #1
 800ecaa:	4456      	add	r6, sl
 800ecac:	2700      	movs	r7, #0
 800ecae:	4649      	mov	r1, r9
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	4658      	mov	r0, fp
 800ecb4:	f001 f83c 	bl	800fd30 <__lshift>
 800ecb8:	4621      	mov	r1, r4
 800ecba:	4681      	mov	r9, r0
 800ecbc:	f001 f8a4 	bl	800fe08 <__mcmp>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	dcb0      	bgt.n	800ec26 <_dtoa_r+0xa5e>
 800ecc4:	d102      	bne.n	800eccc <_dtoa_r+0xb04>
 800ecc6:	f018 0f01 	tst.w	r8, #1
 800ecca:	d1ac      	bne.n	800ec26 <_dtoa_r+0xa5e>
 800eccc:	4633      	mov	r3, r6
 800ecce:	461e      	mov	r6, r3
 800ecd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecd4:	2a30      	cmp	r2, #48	@ 0x30
 800ecd6:	d0fa      	beq.n	800ecce <_dtoa_r+0xb06>
 800ecd8:	e5c2      	b.n	800e860 <_dtoa_r+0x698>
 800ecda:	459a      	cmp	sl, r3
 800ecdc:	d1a4      	bne.n	800ec28 <_dtoa_r+0xa60>
 800ecde:	9b04      	ldr	r3, [sp, #16]
 800ece0:	3301      	adds	r3, #1
 800ece2:	9304      	str	r3, [sp, #16]
 800ece4:	2331      	movs	r3, #49	@ 0x31
 800ece6:	f88a 3000 	strb.w	r3, [sl]
 800ecea:	e5b9      	b.n	800e860 <_dtoa_r+0x698>
 800ecec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ecee:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800ed4c <_dtoa_r+0xb84>
 800ecf2:	b11b      	cbz	r3, 800ecfc <_dtoa_r+0xb34>
 800ecf4:	f10a 0308 	add.w	r3, sl, #8
 800ecf8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ecfa:	6013      	str	r3, [r2, #0]
 800ecfc:	4650      	mov	r0, sl
 800ecfe:	b019      	add	sp, #100	@ 0x64
 800ed00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	f77f ae37 	ble.w	800e97a <_dtoa_r+0x7b2>
 800ed0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ed10:	2001      	movs	r0, #1
 800ed12:	e655      	b.n	800e9c0 <_dtoa_r+0x7f8>
 800ed14:	9b00      	ldr	r3, [sp, #0]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	f77f aed6 	ble.w	800eac8 <_dtoa_r+0x900>
 800ed1c:	4656      	mov	r6, sl
 800ed1e:	4621      	mov	r1, r4
 800ed20:	4648      	mov	r0, r9
 800ed22:	f7ff f9c9 	bl	800e0b8 <quorem>
 800ed26:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800ed2a:	f806 8b01 	strb.w	r8, [r6], #1
 800ed2e:	9b00      	ldr	r3, [sp, #0]
 800ed30:	eba6 020a 	sub.w	r2, r6, sl
 800ed34:	4293      	cmp	r3, r2
 800ed36:	ddb3      	ble.n	800eca0 <_dtoa_r+0xad8>
 800ed38:	4649      	mov	r1, r9
 800ed3a:	2300      	movs	r3, #0
 800ed3c:	220a      	movs	r2, #10
 800ed3e:	4658      	mov	r0, fp
 800ed40:	f000 fe00 	bl	800f944 <__multadd>
 800ed44:	4681      	mov	r9, r0
 800ed46:	e7ea      	b.n	800ed1e <_dtoa_r+0xb56>
 800ed48:	08010cc1 	.word	0x08010cc1
 800ed4c:	08010c45 	.word	0x08010c45

0800ed50 <_free_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	4605      	mov	r5, r0
 800ed54:	2900      	cmp	r1, #0
 800ed56:	d041      	beq.n	800eddc <_free_r+0x8c>
 800ed58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed5c:	1f0c      	subs	r4, r1, #4
 800ed5e:	2b00      	cmp	r3, #0
 800ed60:	bfb8      	it	lt
 800ed62:	18e4      	addlt	r4, r4, r3
 800ed64:	f7fe f99e 	bl	800d0a4 <__malloc_lock>
 800ed68:	4a1d      	ldr	r2, [pc, #116]	@ (800ede0 <_free_r+0x90>)
 800ed6a:	6813      	ldr	r3, [r2, #0]
 800ed6c:	b933      	cbnz	r3, 800ed7c <_free_r+0x2c>
 800ed6e:	6063      	str	r3, [r4, #4]
 800ed70:	6014      	str	r4, [r2, #0]
 800ed72:	4628      	mov	r0, r5
 800ed74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed78:	f7fe b99a 	b.w	800d0b0 <__malloc_unlock>
 800ed7c:	42a3      	cmp	r3, r4
 800ed7e:	d908      	bls.n	800ed92 <_free_r+0x42>
 800ed80:	6820      	ldr	r0, [r4, #0]
 800ed82:	1821      	adds	r1, r4, r0
 800ed84:	428b      	cmp	r3, r1
 800ed86:	bf01      	itttt	eq
 800ed88:	6819      	ldreq	r1, [r3, #0]
 800ed8a:	685b      	ldreq	r3, [r3, #4]
 800ed8c:	1809      	addeq	r1, r1, r0
 800ed8e:	6021      	streq	r1, [r4, #0]
 800ed90:	e7ed      	b.n	800ed6e <_free_r+0x1e>
 800ed92:	461a      	mov	r2, r3
 800ed94:	685b      	ldr	r3, [r3, #4]
 800ed96:	b10b      	cbz	r3, 800ed9c <_free_r+0x4c>
 800ed98:	42a3      	cmp	r3, r4
 800ed9a:	d9fa      	bls.n	800ed92 <_free_r+0x42>
 800ed9c:	6811      	ldr	r1, [r2, #0]
 800ed9e:	1850      	adds	r0, r2, r1
 800eda0:	42a0      	cmp	r0, r4
 800eda2:	d10b      	bne.n	800edbc <_free_r+0x6c>
 800eda4:	6820      	ldr	r0, [r4, #0]
 800eda6:	4401      	add	r1, r0
 800eda8:	1850      	adds	r0, r2, r1
 800edaa:	4283      	cmp	r3, r0
 800edac:	6011      	str	r1, [r2, #0]
 800edae:	d1e0      	bne.n	800ed72 <_free_r+0x22>
 800edb0:	6818      	ldr	r0, [r3, #0]
 800edb2:	685b      	ldr	r3, [r3, #4]
 800edb4:	6053      	str	r3, [r2, #4]
 800edb6:	4408      	add	r0, r1
 800edb8:	6010      	str	r0, [r2, #0]
 800edba:	e7da      	b.n	800ed72 <_free_r+0x22>
 800edbc:	d902      	bls.n	800edc4 <_free_r+0x74>
 800edbe:	230c      	movs	r3, #12
 800edc0:	602b      	str	r3, [r5, #0]
 800edc2:	e7d6      	b.n	800ed72 <_free_r+0x22>
 800edc4:	6820      	ldr	r0, [r4, #0]
 800edc6:	1821      	adds	r1, r4, r0
 800edc8:	428b      	cmp	r3, r1
 800edca:	bf04      	itt	eq
 800edcc:	6819      	ldreq	r1, [r3, #0]
 800edce:	685b      	ldreq	r3, [r3, #4]
 800edd0:	6063      	str	r3, [r4, #4]
 800edd2:	bf04      	itt	eq
 800edd4:	1809      	addeq	r1, r1, r0
 800edd6:	6021      	streq	r1, [r4, #0]
 800edd8:	6054      	str	r4, [r2, #4]
 800edda:	e7ca      	b.n	800ed72 <_free_r+0x22>
 800eddc:	bd38      	pop	{r3, r4, r5, pc}
 800edde:	bf00      	nop
 800ede0:	20001258 	.word	0x20001258

0800ede4 <rshift>:
 800ede4:	6903      	ldr	r3, [r0, #16]
 800ede6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800edea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edee:	ea4f 1261 	mov.w	r2, r1, asr #5
 800edf2:	f100 0414 	add.w	r4, r0, #20
 800edf6:	dd45      	ble.n	800ee84 <rshift+0xa0>
 800edf8:	f011 011f 	ands.w	r1, r1, #31
 800edfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ee00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ee04:	d10c      	bne.n	800ee20 <rshift+0x3c>
 800ee06:	f100 0710 	add.w	r7, r0, #16
 800ee0a:	4629      	mov	r1, r5
 800ee0c:	42b1      	cmp	r1, r6
 800ee0e:	d334      	bcc.n	800ee7a <rshift+0x96>
 800ee10:	1a9b      	subs	r3, r3, r2
 800ee12:	009b      	lsls	r3, r3, #2
 800ee14:	1eea      	subs	r2, r5, #3
 800ee16:	4296      	cmp	r6, r2
 800ee18:	bf38      	it	cc
 800ee1a:	2300      	movcc	r3, #0
 800ee1c:	4423      	add	r3, r4
 800ee1e:	e015      	b.n	800ee4c <rshift+0x68>
 800ee20:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ee24:	f1c1 0820 	rsb	r8, r1, #32
 800ee28:	40cf      	lsrs	r7, r1
 800ee2a:	f105 0e04 	add.w	lr, r5, #4
 800ee2e:	46a1      	mov	r9, r4
 800ee30:	4576      	cmp	r6, lr
 800ee32:	46f4      	mov	ip, lr
 800ee34:	d815      	bhi.n	800ee62 <rshift+0x7e>
 800ee36:	1a9a      	subs	r2, r3, r2
 800ee38:	0092      	lsls	r2, r2, #2
 800ee3a:	3a04      	subs	r2, #4
 800ee3c:	3501      	adds	r5, #1
 800ee3e:	42ae      	cmp	r6, r5
 800ee40:	bf38      	it	cc
 800ee42:	2200      	movcc	r2, #0
 800ee44:	18a3      	adds	r3, r4, r2
 800ee46:	50a7      	str	r7, [r4, r2]
 800ee48:	b107      	cbz	r7, 800ee4c <rshift+0x68>
 800ee4a:	3304      	adds	r3, #4
 800ee4c:	1b1a      	subs	r2, r3, r4
 800ee4e:	42a3      	cmp	r3, r4
 800ee50:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ee54:	bf08      	it	eq
 800ee56:	2300      	moveq	r3, #0
 800ee58:	6102      	str	r2, [r0, #16]
 800ee5a:	bf08      	it	eq
 800ee5c:	6143      	streq	r3, [r0, #20]
 800ee5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee62:	f8dc c000 	ldr.w	ip, [ip]
 800ee66:	fa0c fc08 	lsl.w	ip, ip, r8
 800ee6a:	ea4c 0707 	orr.w	r7, ip, r7
 800ee6e:	f849 7b04 	str.w	r7, [r9], #4
 800ee72:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee76:	40cf      	lsrs	r7, r1
 800ee78:	e7da      	b.n	800ee30 <rshift+0x4c>
 800ee7a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee7e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee82:	e7c3      	b.n	800ee0c <rshift+0x28>
 800ee84:	4623      	mov	r3, r4
 800ee86:	e7e1      	b.n	800ee4c <rshift+0x68>

0800ee88 <__hexdig_fun>:
 800ee88:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ee8c:	2b09      	cmp	r3, #9
 800ee8e:	d802      	bhi.n	800ee96 <__hexdig_fun+0xe>
 800ee90:	3820      	subs	r0, #32
 800ee92:	b2c0      	uxtb	r0, r0
 800ee94:	4770      	bx	lr
 800ee96:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ee9a:	2b05      	cmp	r3, #5
 800ee9c:	d801      	bhi.n	800eea2 <__hexdig_fun+0x1a>
 800ee9e:	3847      	subs	r0, #71	@ 0x47
 800eea0:	e7f7      	b.n	800ee92 <__hexdig_fun+0xa>
 800eea2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800eea6:	2b05      	cmp	r3, #5
 800eea8:	d801      	bhi.n	800eeae <__hexdig_fun+0x26>
 800eeaa:	3827      	subs	r0, #39	@ 0x27
 800eeac:	e7f1      	b.n	800ee92 <__hexdig_fun+0xa>
 800eeae:	2000      	movs	r0, #0
 800eeb0:	4770      	bx	lr
	...

0800eeb4 <__gethex>:
 800eeb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eeb8:	b085      	sub	sp, #20
 800eeba:	468a      	mov	sl, r1
 800eebc:	9302      	str	r3, [sp, #8]
 800eebe:	680b      	ldr	r3, [r1, #0]
 800eec0:	9001      	str	r0, [sp, #4]
 800eec2:	4690      	mov	r8, r2
 800eec4:	1c9c      	adds	r4, r3, #2
 800eec6:	46a1      	mov	r9, r4
 800eec8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800eecc:	2830      	cmp	r0, #48	@ 0x30
 800eece:	d0fa      	beq.n	800eec6 <__gethex+0x12>
 800eed0:	eba9 0303 	sub.w	r3, r9, r3
 800eed4:	f1a3 0b02 	sub.w	fp, r3, #2
 800eed8:	f7ff ffd6 	bl	800ee88 <__hexdig_fun>
 800eedc:	4605      	mov	r5, r0
 800eede:	2800      	cmp	r0, #0
 800eee0:	d168      	bne.n	800efb4 <__gethex+0x100>
 800eee2:	49a0      	ldr	r1, [pc, #640]	@ (800f164 <__gethex+0x2b0>)
 800eee4:	2201      	movs	r2, #1
 800eee6:	4648      	mov	r0, r9
 800eee8:	f7ff f84e 	bl	800df88 <strncmp>
 800eeec:	4607      	mov	r7, r0
 800eeee:	2800      	cmp	r0, #0
 800eef0:	d167      	bne.n	800efc2 <__gethex+0x10e>
 800eef2:	f899 0001 	ldrb.w	r0, [r9, #1]
 800eef6:	4626      	mov	r6, r4
 800eef8:	f7ff ffc6 	bl	800ee88 <__hexdig_fun>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d062      	beq.n	800efc6 <__gethex+0x112>
 800ef00:	4623      	mov	r3, r4
 800ef02:	7818      	ldrb	r0, [r3, #0]
 800ef04:	2830      	cmp	r0, #48	@ 0x30
 800ef06:	4699      	mov	r9, r3
 800ef08:	f103 0301 	add.w	r3, r3, #1
 800ef0c:	d0f9      	beq.n	800ef02 <__gethex+0x4e>
 800ef0e:	f7ff ffbb 	bl	800ee88 <__hexdig_fun>
 800ef12:	fab0 f580 	clz	r5, r0
 800ef16:	096d      	lsrs	r5, r5, #5
 800ef18:	f04f 0b01 	mov.w	fp, #1
 800ef1c:	464a      	mov	r2, r9
 800ef1e:	4616      	mov	r6, r2
 800ef20:	3201      	adds	r2, #1
 800ef22:	7830      	ldrb	r0, [r6, #0]
 800ef24:	f7ff ffb0 	bl	800ee88 <__hexdig_fun>
 800ef28:	2800      	cmp	r0, #0
 800ef2a:	d1f8      	bne.n	800ef1e <__gethex+0x6a>
 800ef2c:	498d      	ldr	r1, [pc, #564]	@ (800f164 <__gethex+0x2b0>)
 800ef2e:	2201      	movs	r2, #1
 800ef30:	4630      	mov	r0, r6
 800ef32:	f7ff f829 	bl	800df88 <strncmp>
 800ef36:	2800      	cmp	r0, #0
 800ef38:	d13f      	bne.n	800efba <__gethex+0x106>
 800ef3a:	b944      	cbnz	r4, 800ef4e <__gethex+0x9a>
 800ef3c:	1c74      	adds	r4, r6, #1
 800ef3e:	4622      	mov	r2, r4
 800ef40:	4616      	mov	r6, r2
 800ef42:	3201      	adds	r2, #1
 800ef44:	7830      	ldrb	r0, [r6, #0]
 800ef46:	f7ff ff9f 	bl	800ee88 <__hexdig_fun>
 800ef4a:	2800      	cmp	r0, #0
 800ef4c:	d1f8      	bne.n	800ef40 <__gethex+0x8c>
 800ef4e:	1ba4      	subs	r4, r4, r6
 800ef50:	00a7      	lsls	r7, r4, #2
 800ef52:	7833      	ldrb	r3, [r6, #0]
 800ef54:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800ef58:	2b50      	cmp	r3, #80	@ 0x50
 800ef5a:	d13e      	bne.n	800efda <__gethex+0x126>
 800ef5c:	7873      	ldrb	r3, [r6, #1]
 800ef5e:	2b2b      	cmp	r3, #43	@ 0x2b
 800ef60:	d033      	beq.n	800efca <__gethex+0x116>
 800ef62:	2b2d      	cmp	r3, #45	@ 0x2d
 800ef64:	d034      	beq.n	800efd0 <__gethex+0x11c>
 800ef66:	1c71      	adds	r1, r6, #1
 800ef68:	2400      	movs	r4, #0
 800ef6a:	7808      	ldrb	r0, [r1, #0]
 800ef6c:	f7ff ff8c 	bl	800ee88 <__hexdig_fun>
 800ef70:	1e43      	subs	r3, r0, #1
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b18      	cmp	r3, #24
 800ef76:	d830      	bhi.n	800efda <__gethex+0x126>
 800ef78:	f1a0 0210 	sub.w	r2, r0, #16
 800ef7c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef80:	f7ff ff82 	bl	800ee88 <__hexdig_fun>
 800ef84:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 800ef88:	fa5f fc8c 	uxtb.w	ip, ip
 800ef8c:	f1bc 0f18 	cmp.w	ip, #24
 800ef90:	f04f 030a 	mov.w	r3, #10
 800ef94:	d91e      	bls.n	800efd4 <__gethex+0x120>
 800ef96:	b104      	cbz	r4, 800ef9a <__gethex+0xe6>
 800ef98:	4252      	negs	r2, r2
 800ef9a:	4417      	add	r7, r2
 800ef9c:	f8ca 1000 	str.w	r1, [sl]
 800efa0:	b1ed      	cbz	r5, 800efde <__gethex+0x12a>
 800efa2:	f1bb 0f00 	cmp.w	fp, #0
 800efa6:	bf0c      	ite	eq
 800efa8:	2506      	moveq	r5, #6
 800efaa:	2500      	movne	r5, #0
 800efac:	4628      	mov	r0, r5
 800efae:	b005      	add	sp, #20
 800efb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efb4:	2500      	movs	r5, #0
 800efb6:	462c      	mov	r4, r5
 800efb8:	e7b0      	b.n	800ef1c <__gethex+0x68>
 800efba:	2c00      	cmp	r4, #0
 800efbc:	d1c7      	bne.n	800ef4e <__gethex+0x9a>
 800efbe:	4627      	mov	r7, r4
 800efc0:	e7c7      	b.n	800ef52 <__gethex+0x9e>
 800efc2:	464e      	mov	r6, r9
 800efc4:	462f      	mov	r7, r5
 800efc6:	2501      	movs	r5, #1
 800efc8:	e7c3      	b.n	800ef52 <__gethex+0x9e>
 800efca:	2400      	movs	r4, #0
 800efcc:	1cb1      	adds	r1, r6, #2
 800efce:	e7cc      	b.n	800ef6a <__gethex+0xb6>
 800efd0:	2401      	movs	r4, #1
 800efd2:	e7fb      	b.n	800efcc <__gethex+0x118>
 800efd4:	fb03 0002 	mla	r0, r3, r2, r0
 800efd8:	e7ce      	b.n	800ef78 <__gethex+0xc4>
 800efda:	4631      	mov	r1, r6
 800efdc:	e7de      	b.n	800ef9c <__gethex+0xe8>
 800efde:	eba6 0309 	sub.w	r3, r6, r9
 800efe2:	3b01      	subs	r3, #1
 800efe4:	4629      	mov	r1, r5
 800efe6:	2b07      	cmp	r3, #7
 800efe8:	dc0a      	bgt.n	800f000 <__gethex+0x14c>
 800efea:	9801      	ldr	r0, [sp, #4]
 800efec:	f000 fc48 	bl	800f880 <_Balloc>
 800eff0:	4604      	mov	r4, r0
 800eff2:	b940      	cbnz	r0, 800f006 <__gethex+0x152>
 800eff4:	4b5c      	ldr	r3, [pc, #368]	@ (800f168 <__gethex+0x2b4>)
 800eff6:	4602      	mov	r2, r0
 800eff8:	21e4      	movs	r1, #228	@ 0xe4
 800effa:	485c      	ldr	r0, [pc, #368]	@ (800f16c <__gethex+0x2b8>)
 800effc:	f7ff f83e 	bl	800e07c <__assert_func>
 800f000:	3101      	adds	r1, #1
 800f002:	105b      	asrs	r3, r3, #1
 800f004:	e7ef      	b.n	800efe6 <__gethex+0x132>
 800f006:	f100 0a14 	add.w	sl, r0, #20
 800f00a:	2300      	movs	r3, #0
 800f00c:	4655      	mov	r5, sl
 800f00e:	469b      	mov	fp, r3
 800f010:	45b1      	cmp	r9, r6
 800f012:	d337      	bcc.n	800f084 <__gethex+0x1d0>
 800f014:	f845 bb04 	str.w	fp, [r5], #4
 800f018:	eba5 050a 	sub.w	r5, r5, sl
 800f01c:	10ad      	asrs	r5, r5, #2
 800f01e:	6125      	str	r5, [r4, #16]
 800f020:	4658      	mov	r0, fp
 800f022:	f000 fd1f 	bl	800fa64 <__hi0bits>
 800f026:	016d      	lsls	r5, r5, #5
 800f028:	f8d8 6000 	ldr.w	r6, [r8]
 800f02c:	1a2d      	subs	r5, r5, r0
 800f02e:	42b5      	cmp	r5, r6
 800f030:	dd54      	ble.n	800f0dc <__gethex+0x228>
 800f032:	1bad      	subs	r5, r5, r6
 800f034:	4629      	mov	r1, r5
 800f036:	4620      	mov	r0, r4
 800f038:	f001 f8b3 	bl	80101a2 <__any_on>
 800f03c:	4681      	mov	r9, r0
 800f03e:	b178      	cbz	r0, 800f060 <__gethex+0x1ac>
 800f040:	1e6b      	subs	r3, r5, #1
 800f042:	1159      	asrs	r1, r3, #5
 800f044:	f003 021f 	and.w	r2, r3, #31
 800f048:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f04c:	f04f 0901 	mov.w	r9, #1
 800f050:	fa09 f202 	lsl.w	r2, r9, r2
 800f054:	420a      	tst	r2, r1
 800f056:	d003      	beq.n	800f060 <__gethex+0x1ac>
 800f058:	454b      	cmp	r3, r9
 800f05a:	dc36      	bgt.n	800f0ca <__gethex+0x216>
 800f05c:	f04f 0902 	mov.w	r9, #2
 800f060:	4629      	mov	r1, r5
 800f062:	4620      	mov	r0, r4
 800f064:	f7ff febe 	bl	800ede4 <rshift>
 800f068:	442f      	add	r7, r5
 800f06a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f06e:	42bb      	cmp	r3, r7
 800f070:	da42      	bge.n	800f0f8 <__gethex+0x244>
 800f072:	9801      	ldr	r0, [sp, #4]
 800f074:	4621      	mov	r1, r4
 800f076:	f000 fc43 	bl	800f900 <_Bfree>
 800f07a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f07c:	2300      	movs	r3, #0
 800f07e:	6013      	str	r3, [r2, #0]
 800f080:	25a3      	movs	r5, #163	@ 0xa3
 800f082:	e793      	b.n	800efac <__gethex+0xf8>
 800f084:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f088:	2a2e      	cmp	r2, #46	@ 0x2e
 800f08a:	d012      	beq.n	800f0b2 <__gethex+0x1fe>
 800f08c:	2b20      	cmp	r3, #32
 800f08e:	d104      	bne.n	800f09a <__gethex+0x1e6>
 800f090:	f845 bb04 	str.w	fp, [r5], #4
 800f094:	f04f 0b00 	mov.w	fp, #0
 800f098:	465b      	mov	r3, fp
 800f09a:	7830      	ldrb	r0, [r6, #0]
 800f09c:	9303      	str	r3, [sp, #12]
 800f09e:	f7ff fef3 	bl	800ee88 <__hexdig_fun>
 800f0a2:	9b03      	ldr	r3, [sp, #12]
 800f0a4:	f000 000f 	and.w	r0, r0, #15
 800f0a8:	4098      	lsls	r0, r3
 800f0aa:	ea4b 0b00 	orr.w	fp, fp, r0
 800f0ae:	3304      	adds	r3, #4
 800f0b0:	e7ae      	b.n	800f010 <__gethex+0x15c>
 800f0b2:	45b1      	cmp	r9, r6
 800f0b4:	d8ea      	bhi.n	800f08c <__gethex+0x1d8>
 800f0b6:	492b      	ldr	r1, [pc, #172]	@ (800f164 <__gethex+0x2b0>)
 800f0b8:	9303      	str	r3, [sp, #12]
 800f0ba:	2201      	movs	r2, #1
 800f0bc:	4630      	mov	r0, r6
 800f0be:	f7fe ff63 	bl	800df88 <strncmp>
 800f0c2:	9b03      	ldr	r3, [sp, #12]
 800f0c4:	2800      	cmp	r0, #0
 800f0c6:	d1e1      	bne.n	800f08c <__gethex+0x1d8>
 800f0c8:	e7a2      	b.n	800f010 <__gethex+0x15c>
 800f0ca:	1ea9      	subs	r1, r5, #2
 800f0cc:	4620      	mov	r0, r4
 800f0ce:	f001 f868 	bl	80101a2 <__any_on>
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	d0c2      	beq.n	800f05c <__gethex+0x1a8>
 800f0d6:	f04f 0903 	mov.w	r9, #3
 800f0da:	e7c1      	b.n	800f060 <__gethex+0x1ac>
 800f0dc:	da09      	bge.n	800f0f2 <__gethex+0x23e>
 800f0de:	1b75      	subs	r5, r6, r5
 800f0e0:	4621      	mov	r1, r4
 800f0e2:	9801      	ldr	r0, [sp, #4]
 800f0e4:	462a      	mov	r2, r5
 800f0e6:	f000 fe23 	bl	800fd30 <__lshift>
 800f0ea:	1b7f      	subs	r7, r7, r5
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	f100 0a14 	add.w	sl, r0, #20
 800f0f2:	f04f 0900 	mov.w	r9, #0
 800f0f6:	e7b8      	b.n	800f06a <__gethex+0x1b6>
 800f0f8:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f0fc:	42bd      	cmp	r5, r7
 800f0fe:	dd6f      	ble.n	800f1e0 <__gethex+0x32c>
 800f100:	1bed      	subs	r5, r5, r7
 800f102:	42ae      	cmp	r6, r5
 800f104:	dc34      	bgt.n	800f170 <__gethex+0x2bc>
 800f106:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	d022      	beq.n	800f154 <__gethex+0x2a0>
 800f10e:	2b03      	cmp	r3, #3
 800f110:	d024      	beq.n	800f15c <__gethex+0x2a8>
 800f112:	2b01      	cmp	r3, #1
 800f114:	d115      	bne.n	800f142 <__gethex+0x28e>
 800f116:	42ae      	cmp	r6, r5
 800f118:	d113      	bne.n	800f142 <__gethex+0x28e>
 800f11a:	2e01      	cmp	r6, #1
 800f11c:	d10b      	bne.n	800f136 <__gethex+0x282>
 800f11e:	9a02      	ldr	r2, [sp, #8]
 800f120:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f124:	6013      	str	r3, [r2, #0]
 800f126:	2301      	movs	r3, #1
 800f128:	6123      	str	r3, [r4, #16]
 800f12a:	f8ca 3000 	str.w	r3, [sl]
 800f12e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f130:	2562      	movs	r5, #98	@ 0x62
 800f132:	601c      	str	r4, [r3, #0]
 800f134:	e73a      	b.n	800efac <__gethex+0xf8>
 800f136:	1e71      	subs	r1, r6, #1
 800f138:	4620      	mov	r0, r4
 800f13a:	f001 f832 	bl	80101a2 <__any_on>
 800f13e:	2800      	cmp	r0, #0
 800f140:	d1ed      	bne.n	800f11e <__gethex+0x26a>
 800f142:	9801      	ldr	r0, [sp, #4]
 800f144:	4621      	mov	r1, r4
 800f146:	f000 fbdb 	bl	800f900 <_Bfree>
 800f14a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f14c:	2300      	movs	r3, #0
 800f14e:	6013      	str	r3, [r2, #0]
 800f150:	2550      	movs	r5, #80	@ 0x50
 800f152:	e72b      	b.n	800efac <__gethex+0xf8>
 800f154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f156:	2b00      	cmp	r3, #0
 800f158:	d1f3      	bne.n	800f142 <__gethex+0x28e>
 800f15a:	e7e0      	b.n	800f11e <__gethex+0x26a>
 800f15c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d1dd      	bne.n	800f11e <__gethex+0x26a>
 800f162:	e7ee      	b.n	800f142 <__gethex+0x28e>
 800f164:	08010aa9 	.word	0x08010aa9
 800f168:	08010cc1 	.word	0x08010cc1
 800f16c:	08010cd2 	.word	0x08010cd2
 800f170:	1e6f      	subs	r7, r5, #1
 800f172:	f1b9 0f00 	cmp.w	r9, #0
 800f176:	d130      	bne.n	800f1da <__gethex+0x326>
 800f178:	b127      	cbz	r7, 800f184 <__gethex+0x2d0>
 800f17a:	4639      	mov	r1, r7
 800f17c:	4620      	mov	r0, r4
 800f17e:	f001 f810 	bl	80101a2 <__any_on>
 800f182:	4681      	mov	r9, r0
 800f184:	117a      	asrs	r2, r7, #5
 800f186:	2301      	movs	r3, #1
 800f188:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f18c:	f007 071f 	and.w	r7, r7, #31
 800f190:	40bb      	lsls	r3, r7
 800f192:	4213      	tst	r3, r2
 800f194:	4629      	mov	r1, r5
 800f196:	4620      	mov	r0, r4
 800f198:	bf18      	it	ne
 800f19a:	f049 0902 	orrne.w	r9, r9, #2
 800f19e:	f7ff fe21 	bl	800ede4 <rshift>
 800f1a2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f1a6:	1b76      	subs	r6, r6, r5
 800f1a8:	2502      	movs	r5, #2
 800f1aa:	f1b9 0f00 	cmp.w	r9, #0
 800f1ae:	d047      	beq.n	800f240 <__gethex+0x38c>
 800f1b0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f1b4:	2b02      	cmp	r3, #2
 800f1b6:	d015      	beq.n	800f1e4 <__gethex+0x330>
 800f1b8:	2b03      	cmp	r3, #3
 800f1ba:	d017      	beq.n	800f1ec <__gethex+0x338>
 800f1bc:	2b01      	cmp	r3, #1
 800f1be:	d109      	bne.n	800f1d4 <__gethex+0x320>
 800f1c0:	f019 0f02 	tst.w	r9, #2
 800f1c4:	d006      	beq.n	800f1d4 <__gethex+0x320>
 800f1c6:	f8da 3000 	ldr.w	r3, [sl]
 800f1ca:	ea49 0903 	orr.w	r9, r9, r3
 800f1ce:	f019 0f01 	tst.w	r9, #1
 800f1d2:	d10e      	bne.n	800f1f2 <__gethex+0x33e>
 800f1d4:	f045 0510 	orr.w	r5, r5, #16
 800f1d8:	e032      	b.n	800f240 <__gethex+0x38c>
 800f1da:	f04f 0901 	mov.w	r9, #1
 800f1de:	e7d1      	b.n	800f184 <__gethex+0x2d0>
 800f1e0:	2501      	movs	r5, #1
 800f1e2:	e7e2      	b.n	800f1aa <__gethex+0x2f6>
 800f1e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1e6:	f1c3 0301 	rsb	r3, r3, #1
 800f1ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f1ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f1ee:	2b00      	cmp	r3, #0
 800f1f0:	d0f0      	beq.n	800f1d4 <__gethex+0x320>
 800f1f2:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f1f6:	f104 0314 	add.w	r3, r4, #20
 800f1fa:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f1fe:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f202:	f04f 0c00 	mov.w	ip, #0
 800f206:	4618      	mov	r0, r3
 800f208:	f853 2b04 	ldr.w	r2, [r3], #4
 800f20c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 800f210:	d01b      	beq.n	800f24a <__gethex+0x396>
 800f212:	3201      	adds	r2, #1
 800f214:	6002      	str	r2, [r0, #0]
 800f216:	2d02      	cmp	r5, #2
 800f218:	f104 0314 	add.w	r3, r4, #20
 800f21c:	d13c      	bne.n	800f298 <__gethex+0x3e4>
 800f21e:	f8d8 2000 	ldr.w	r2, [r8]
 800f222:	3a01      	subs	r2, #1
 800f224:	42b2      	cmp	r2, r6
 800f226:	d109      	bne.n	800f23c <__gethex+0x388>
 800f228:	1171      	asrs	r1, r6, #5
 800f22a:	2201      	movs	r2, #1
 800f22c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f230:	f006 061f 	and.w	r6, r6, #31
 800f234:	fa02 f606 	lsl.w	r6, r2, r6
 800f238:	421e      	tst	r6, r3
 800f23a:	d13a      	bne.n	800f2b2 <__gethex+0x3fe>
 800f23c:	f045 0520 	orr.w	r5, r5, #32
 800f240:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f242:	601c      	str	r4, [r3, #0]
 800f244:	9b02      	ldr	r3, [sp, #8]
 800f246:	601f      	str	r7, [r3, #0]
 800f248:	e6b0      	b.n	800efac <__gethex+0xf8>
 800f24a:	4299      	cmp	r1, r3
 800f24c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f250:	d8d9      	bhi.n	800f206 <__gethex+0x352>
 800f252:	68a3      	ldr	r3, [r4, #8]
 800f254:	459b      	cmp	fp, r3
 800f256:	db17      	blt.n	800f288 <__gethex+0x3d4>
 800f258:	6861      	ldr	r1, [r4, #4]
 800f25a:	9801      	ldr	r0, [sp, #4]
 800f25c:	3101      	adds	r1, #1
 800f25e:	f000 fb0f 	bl	800f880 <_Balloc>
 800f262:	4681      	mov	r9, r0
 800f264:	b918      	cbnz	r0, 800f26e <__gethex+0x3ba>
 800f266:	4b1a      	ldr	r3, [pc, #104]	@ (800f2d0 <__gethex+0x41c>)
 800f268:	4602      	mov	r2, r0
 800f26a:	2184      	movs	r1, #132	@ 0x84
 800f26c:	e6c5      	b.n	800effa <__gethex+0x146>
 800f26e:	6922      	ldr	r2, [r4, #16]
 800f270:	3202      	adds	r2, #2
 800f272:	f104 010c 	add.w	r1, r4, #12
 800f276:	0092      	lsls	r2, r2, #2
 800f278:	300c      	adds	r0, #12
 800f27a:	f7fe fee0 	bl	800e03e <memcpy>
 800f27e:	4621      	mov	r1, r4
 800f280:	9801      	ldr	r0, [sp, #4]
 800f282:	f000 fb3d 	bl	800f900 <_Bfree>
 800f286:	464c      	mov	r4, r9
 800f288:	6923      	ldr	r3, [r4, #16]
 800f28a:	1c5a      	adds	r2, r3, #1
 800f28c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f290:	6122      	str	r2, [r4, #16]
 800f292:	2201      	movs	r2, #1
 800f294:	615a      	str	r2, [r3, #20]
 800f296:	e7be      	b.n	800f216 <__gethex+0x362>
 800f298:	6922      	ldr	r2, [r4, #16]
 800f29a:	455a      	cmp	r2, fp
 800f29c:	dd0b      	ble.n	800f2b6 <__gethex+0x402>
 800f29e:	2101      	movs	r1, #1
 800f2a0:	4620      	mov	r0, r4
 800f2a2:	f7ff fd9f 	bl	800ede4 <rshift>
 800f2a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f2aa:	3701      	adds	r7, #1
 800f2ac:	42bb      	cmp	r3, r7
 800f2ae:	f6ff aee0 	blt.w	800f072 <__gethex+0x1be>
 800f2b2:	2501      	movs	r5, #1
 800f2b4:	e7c2      	b.n	800f23c <__gethex+0x388>
 800f2b6:	f016 061f 	ands.w	r6, r6, #31
 800f2ba:	d0fa      	beq.n	800f2b2 <__gethex+0x3fe>
 800f2bc:	4453      	add	r3, sl
 800f2be:	f1c6 0620 	rsb	r6, r6, #32
 800f2c2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f2c6:	f000 fbcd 	bl	800fa64 <__hi0bits>
 800f2ca:	42b0      	cmp	r0, r6
 800f2cc:	dbe7      	blt.n	800f29e <__gethex+0x3ea>
 800f2ce:	e7f0      	b.n	800f2b2 <__gethex+0x3fe>
 800f2d0:	08010cc1 	.word	0x08010cc1

0800f2d4 <L_shift>:
 800f2d4:	f1c2 0208 	rsb	r2, r2, #8
 800f2d8:	0092      	lsls	r2, r2, #2
 800f2da:	b570      	push	{r4, r5, r6, lr}
 800f2dc:	f1c2 0620 	rsb	r6, r2, #32
 800f2e0:	6843      	ldr	r3, [r0, #4]
 800f2e2:	6804      	ldr	r4, [r0, #0]
 800f2e4:	fa03 f506 	lsl.w	r5, r3, r6
 800f2e8:	432c      	orrs	r4, r5
 800f2ea:	40d3      	lsrs	r3, r2
 800f2ec:	6004      	str	r4, [r0, #0]
 800f2ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800f2f2:	4288      	cmp	r0, r1
 800f2f4:	d3f4      	bcc.n	800f2e0 <L_shift+0xc>
 800f2f6:	bd70      	pop	{r4, r5, r6, pc}

0800f2f8 <__match>:
 800f2f8:	b530      	push	{r4, r5, lr}
 800f2fa:	6803      	ldr	r3, [r0, #0]
 800f2fc:	3301      	adds	r3, #1
 800f2fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f302:	b914      	cbnz	r4, 800f30a <__match+0x12>
 800f304:	6003      	str	r3, [r0, #0]
 800f306:	2001      	movs	r0, #1
 800f308:	bd30      	pop	{r4, r5, pc}
 800f30a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f30e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f312:	2d19      	cmp	r5, #25
 800f314:	bf98      	it	ls
 800f316:	3220      	addls	r2, #32
 800f318:	42a2      	cmp	r2, r4
 800f31a:	d0f0      	beq.n	800f2fe <__match+0x6>
 800f31c:	2000      	movs	r0, #0
 800f31e:	e7f3      	b.n	800f308 <__match+0x10>

0800f320 <__hexnan>:
 800f320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f324:	680b      	ldr	r3, [r1, #0]
 800f326:	6801      	ldr	r1, [r0, #0]
 800f328:	115e      	asrs	r6, r3, #5
 800f32a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f32e:	f013 031f 	ands.w	r3, r3, #31
 800f332:	b087      	sub	sp, #28
 800f334:	bf18      	it	ne
 800f336:	3604      	addne	r6, #4
 800f338:	2500      	movs	r5, #0
 800f33a:	1f37      	subs	r7, r6, #4
 800f33c:	4682      	mov	sl, r0
 800f33e:	4690      	mov	r8, r2
 800f340:	9301      	str	r3, [sp, #4]
 800f342:	f846 5c04 	str.w	r5, [r6, #-4]
 800f346:	46b9      	mov	r9, r7
 800f348:	463c      	mov	r4, r7
 800f34a:	9502      	str	r5, [sp, #8]
 800f34c:	46ab      	mov	fp, r5
 800f34e:	784a      	ldrb	r2, [r1, #1]
 800f350:	1c4b      	adds	r3, r1, #1
 800f352:	9303      	str	r3, [sp, #12]
 800f354:	b342      	cbz	r2, 800f3a8 <__hexnan+0x88>
 800f356:	4610      	mov	r0, r2
 800f358:	9105      	str	r1, [sp, #20]
 800f35a:	9204      	str	r2, [sp, #16]
 800f35c:	f7ff fd94 	bl	800ee88 <__hexdig_fun>
 800f360:	2800      	cmp	r0, #0
 800f362:	d151      	bne.n	800f408 <__hexnan+0xe8>
 800f364:	9a04      	ldr	r2, [sp, #16]
 800f366:	9905      	ldr	r1, [sp, #20]
 800f368:	2a20      	cmp	r2, #32
 800f36a:	d818      	bhi.n	800f39e <__hexnan+0x7e>
 800f36c:	9b02      	ldr	r3, [sp, #8]
 800f36e:	459b      	cmp	fp, r3
 800f370:	dd13      	ble.n	800f39a <__hexnan+0x7a>
 800f372:	454c      	cmp	r4, r9
 800f374:	d206      	bcs.n	800f384 <__hexnan+0x64>
 800f376:	2d07      	cmp	r5, #7
 800f378:	dc04      	bgt.n	800f384 <__hexnan+0x64>
 800f37a:	462a      	mov	r2, r5
 800f37c:	4649      	mov	r1, r9
 800f37e:	4620      	mov	r0, r4
 800f380:	f7ff ffa8 	bl	800f2d4 <L_shift>
 800f384:	4544      	cmp	r4, r8
 800f386:	d952      	bls.n	800f42e <__hexnan+0x10e>
 800f388:	2300      	movs	r3, #0
 800f38a:	f1a4 0904 	sub.w	r9, r4, #4
 800f38e:	f844 3c04 	str.w	r3, [r4, #-4]
 800f392:	f8cd b008 	str.w	fp, [sp, #8]
 800f396:	464c      	mov	r4, r9
 800f398:	461d      	mov	r5, r3
 800f39a:	9903      	ldr	r1, [sp, #12]
 800f39c:	e7d7      	b.n	800f34e <__hexnan+0x2e>
 800f39e:	2a29      	cmp	r2, #41	@ 0x29
 800f3a0:	d157      	bne.n	800f452 <__hexnan+0x132>
 800f3a2:	3102      	adds	r1, #2
 800f3a4:	f8ca 1000 	str.w	r1, [sl]
 800f3a8:	f1bb 0f00 	cmp.w	fp, #0
 800f3ac:	d051      	beq.n	800f452 <__hexnan+0x132>
 800f3ae:	454c      	cmp	r4, r9
 800f3b0:	d206      	bcs.n	800f3c0 <__hexnan+0xa0>
 800f3b2:	2d07      	cmp	r5, #7
 800f3b4:	dc04      	bgt.n	800f3c0 <__hexnan+0xa0>
 800f3b6:	462a      	mov	r2, r5
 800f3b8:	4649      	mov	r1, r9
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	f7ff ff8a 	bl	800f2d4 <L_shift>
 800f3c0:	4544      	cmp	r4, r8
 800f3c2:	d936      	bls.n	800f432 <__hexnan+0x112>
 800f3c4:	f1a8 0204 	sub.w	r2, r8, #4
 800f3c8:	4623      	mov	r3, r4
 800f3ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800f3ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800f3d2:	429f      	cmp	r7, r3
 800f3d4:	d2f9      	bcs.n	800f3ca <__hexnan+0xaa>
 800f3d6:	1b3b      	subs	r3, r7, r4
 800f3d8:	f023 0303 	bic.w	r3, r3, #3
 800f3dc:	3304      	adds	r3, #4
 800f3de:	3401      	adds	r4, #1
 800f3e0:	3e03      	subs	r6, #3
 800f3e2:	42b4      	cmp	r4, r6
 800f3e4:	bf88      	it	hi
 800f3e6:	2304      	movhi	r3, #4
 800f3e8:	4443      	add	r3, r8
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	f843 2b04 	str.w	r2, [r3], #4
 800f3f0:	429f      	cmp	r7, r3
 800f3f2:	d2fb      	bcs.n	800f3ec <__hexnan+0xcc>
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	b91b      	cbnz	r3, 800f400 <__hexnan+0xe0>
 800f3f8:	4547      	cmp	r7, r8
 800f3fa:	d128      	bne.n	800f44e <__hexnan+0x12e>
 800f3fc:	2301      	movs	r3, #1
 800f3fe:	603b      	str	r3, [r7, #0]
 800f400:	2005      	movs	r0, #5
 800f402:	b007      	add	sp, #28
 800f404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f408:	3501      	adds	r5, #1
 800f40a:	2d08      	cmp	r5, #8
 800f40c:	f10b 0b01 	add.w	fp, fp, #1
 800f410:	dd06      	ble.n	800f420 <__hexnan+0x100>
 800f412:	4544      	cmp	r4, r8
 800f414:	d9c1      	bls.n	800f39a <__hexnan+0x7a>
 800f416:	2300      	movs	r3, #0
 800f418:	f844 3c04 	str.w	r3, [r4, #-4]
 800f41c:	2501      	movs	r5, #1
 800f41e:	3c04      	subs	r4, #4
 800f420:	6822      	ldr	r2, [r4, #0]
 800f422:	f000 000f 	and.w	r0, r0, #15
 800f426:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f42a:	6020      	str	r0, [r4, #0]
 800f42c:	e7b5      	b.n	800f39a <__hexnan+0x7a>
 800f42e:	2508      	movs	r5, #8
 800f430:	e7b3      	b.n	800f39a <__hexnan+0x7a>
 800f432:	9b01      	ldr	r3, [sp, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d0dd      	beq.n	800f3f4 <__hexnan+0xd4>
 800f438:	f1c3 0320 	rsb	r3, r3, #32
 800f43c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f440:	40da      	lsrs	r2, r3
 800f442:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f446:	4013      	ands	r3, r2
 800f448:	f846 3c04 	str.w	r3, [r6, #-4]
 800f44c:	e7d2      	b.n	800f3f4 <__hexnan+0xd4>
 800f44e:	3f04      	subs	r7, #4
 800f450:	e7d0      	b.n	800f3f4 <__hexnan+0xd4>
 800f452:	2004      	movs	r0, #4
 800f454:	e7d5      	b.n	800f402 <__hexnan+0xe2>

0800f456 <__ssputs_r>:
 800f456:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f45a:	688e      	ldr	r6, [r1, #8]
 800f45c:	461f      	mov	r7, r3
 800f45e:	42be      	cmp	r6, r7
 800f460:	680b      	ldr	r3, [r1, #0]
 800f462:	4682      	mov	sl, r0
 800f464:	460c      	mov	r4, r1
 800f466:	4690      	mov	r8, r2
 800f468:	d82d      	bhi.n	800f4c6 <__ssputs_r+0x70>
 800f46a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f46e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f472:	d026      	beq.n	800f4c2 <__ssputs_r+0x6c>
 800f474:	6965      	ldr	r5, [r4, #20]
 800f476:	6909      	ldr	r1, [r1, #16]
 800f478:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f47c:	eba3 0901 	sub.w	r9, r3, r1
 800f480:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f484:	1c7b      	adds	r3, r7, #1
 800f486:	444b      	add	r3, r9
 800f488:	106d      	asrs	r5, r5, #1
 800f48a:	429d      	cmp	r5, r3
 800f48c:	bf38      	it	cc
 800f48e:	461d      	movcc	r5, r3
 800f490:	0553      	lsls	r3, r2, #21
 800f492:	d527      	bpl.n	800f4e4 <__ssputs_r+0x8e>
 800f494:	4629      	mov	r1, r5
 800f496:	f7fd f9e3 	bl	800c860 <_malloc_r>
 800f49a:	4606      	mov	r6, r0
 800f49c:	b360      	cbz	r0, 800f4f8 <__ssputs_r+0xa2>
 800f49e:	6921      	ldr	r1, [r4, #16]
 800f4a0:	464a      	mov	r2, r9
 800f4a2:	f7fe fdcc 	bl	800e03e <memcpy>
 800f4a6:	89a3      	ldrh	r3, [r4, #12]
 800f4a8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f4ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f4b0:	81a3      	strh	r3, [r4, #12]
 800f4b2:	6126      	str	r6, [r4, #16]
 800f4b4:	6165      	str	r5, [r4, #20]
 800f4b6:	444e      	add	r6, r9
 800f4b8:	eba5 0509 	sub.w	r5, r5, r9
 800f4bc:	6026      	str	r6, [r4, #0]
 800f4be:	60a5      	str	r5, [r4, #8]
 800f4c0:	463e      	mov	r6, r7
 800f4c2:	42be      	cmp	r6, r7
 800f4c4:	d900      	bls.n	800f4c8 <__ssputs_r+0x72>
 800f4c6:	463e      	mov	r6, r7
 800f4c8:	6820      	ldr	r0, [r4, #0]
 800f4ca:	4632      	mov	r2, r6
 800f4cc:	4641      	mov	r1, r8
 800f4ce:	f000 ff1a 	bl	8010306 <memmove>
 800f4d2:	68a3      	ldr	r3, [r4, #8]
 800f4d4:	1b9b      	subs	r3, r3, r6
 800f4d6:	60a3      	str	r3, [r4, #8]
 800f4d8:	6823      	ldr	r3, [r4, #0]
 800f4da:	4433      	add	r3, r6
 800f4dc:	6023      	str	r3, [r4, #0]
 800f4de:	2000      	movs	r0, #0
 800f4e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4e4:	462a      	mov	r2, r5
 800f4e6:	f000 fed3 	bl	8010290 <_realloc_r>
 800f4ea:	4606      	mov	r6, r0
 800f4ec:	2800      	cmp	r0, #0
 800f4ee:	d1e0      	bne.n	800f4b2 <__ssputs_r+0x5c>
 800f4f0:	6921      	ldr	r1, [r4, #16]
 800f4f2:	4650      	mov	r0, sl
 800f4f4:	f7ff fc2c 	bl	800ed50 <_free_r>
 800f4f8:	230c      	movs	r3, #12
 800f4fa:	f8ca 3000 	str.w	r3, [sl]
 800f4fe:	89a3      	ldrh	r3, [r4, #12]
 800f500:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f504:	81a3      	strh	r3, [r4, #12]
 800f506:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f50a:	e7e9      	b.n	800f4e0 <__ssputs_r+0x8a>

0800f50c <_svfiprintf_r>:
 800f50c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f510:	4698      	mov	r8, r3
 800f512:	898b      	ldrh	r3, [r1, #12]
 800f514:	061b      	lsls	r3, r3, #24
 800f516:	b09d      	sub	sp, #116	@ 0x74
 800f518:	4607      	mov	r7, r0
 800f51a:	460d      	mov	r5, r1
 800f51c:	4614      	mov	r4, r2
 800f51e:	d510      	bpl.n	800f542 <_svfiprintf_r+0x36>
 800f520:	690b      	ldr	r3, [r1, #16]
 800f522:	b973      	cbnz	r3, 800f542 <_svfiprintf_r+0x36>
 800f524:	2140      	movs	r1, #64	@ 0x40
 800f526:	f7fd f99b 	bl	800c860 <_malloc_r>
 800f52a:	6028      	str	r0, [r5, #0]
 800f52c:	6128      	str	r0, [r5, #16]
 800f52e:	b930      	cbnz	r0, 800f53e <_svfiprintf_r+0x32>
 800f530:	230c      	movs	r3, #12
 800f532:	603b      	str	r3, [r7, #0]
 800f534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f538:	b01d      	add	sp, #116	@ 0x74
 800f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53e:	2340      	movs	r3, #64	@ 0x40
 800f540:	616b      	str	r3, [r5, #20]
 800f542:	2300      	movs	r3, #0
 800f544:	9309      	str	r3, [sp, #36]	@ 0x24
 800f546:	2320      	movs	r3, #32
 800f548:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f54c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f550:	2330      	movs	r3, #48	@ 0x30
 800f552:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f6f0 <_svfiprintf_r+0x1e4>
 800f556:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f55a:	f04f 0901 	mov.w	r9, #1
 800f55e:	4623      	mov	r3, r4
 800f560:	469a      	mov	sl, r3
 800f562:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f566:	b10a      	cbz	r2, 800f56c <_svfiprintf_r+0x60>
 800f568:	2a25      	cmp	r2, #37	@ 0x25
 800f56a:	d1f9      	bne.n	800f560 <_svfiprintf_r+0x54>
 800f56c:	ebba 0b04 	subs.w	fp, sl, r4
 800f570:	d00b      	beq.n	800f58a <_svfiprintf_r+0x7e>
 800f572:	465b      	mov	r3, fp
 800f574:	4622      	mov	r2, r4
 800f576:	4629      	mov	r1, r5
 800f578:	4638      	mov	r0, r7
 800f57a:	f7ff ff6c 	bl	800f456 <__ssputs_r>
 800f57e:	3001      	adds	r0, #1
 800f580:	f000 80a7 	beq.w	800f6d2 <_svfiprintf_r+0x1c6>
 800f584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f586:	445a      	add	r2, fp
 800f588:	9209      	str	r2, [sp, #36]	@ 0x24
 800f58a:	f89a 3000 	ldrb.w	r3, [sl]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	f000 809f 	beq.w	800f6d2 <_svfiprintf_r+0x1c6>
 800f594:	2300      	movs	r3, #0
 800f596:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f59a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f59e:	f10a 0a01 	add.w	sl, sl, #1
 800f5a2:	9304      	str	r3, [sp, #16]
 800f5a4:	9307      	str	r3, [sp, #28]
 800f5a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5ac:	4654      	mov	r4, sl
 800f5ae:	2205      	movs	r2, #5
 800f5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5b4:	484e      	ldr	r0, [pc, #312]	@ (800f6f0 <_svfiprintf_r+0x1e4>)
 800f5b6:	f7f0 fe33 	bl	8000220 <memchr>
 800f5ba:	9a04      	ldr	r2, [sp, #16]
 800f5bc:	b9d8      	cbnz	r0, 800f5f6 <_svfiprintf_r+0xea>
 800f5be:	06d0      	lsls	r0, r2, #27
 800f5c0:	bf44      	itt	mi
 800f5c2:	2320      	movmi	r3, #32
 800f5c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5c8:	0711      	lsls	r1, r2, #28
 800f5ca:	bf44      	itt	mi
 800f5cc:	232b      	movmi	r3, #43	@ 0x2b
 800f5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5d2:	f89a 3000 	ldrb.w	r3, [sl]
 800f5d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5d8:	d015      	beq.n	800f606 <_svfiprintf_r+0xfa>
 800f5da:	9a07      	ldr	r2, [sp, #28]
 800f5dc:	4654      	mov	r4, sl
 800f5de:	2000      	movs	r0, #0
 800f5e0:	f04f 0c0a 	mov.w	ip, #10
 800f5e4:	4621      	mov	r1, r4
 800f5e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5ea:	3b30      	subs	r3, #48	@ 0x30
 800f5ec:	2b09      	cmp	r3, #9
 800f5ee:	d94b      	bls.n	800f688 <_svfiprintf_r+0x17c>
 800f5f0:	b1b0      	cbz	r0, 800f620 <_svfiprintf_r+0x114>
 800f5f2:	9207      	str	r2, [sp, #28]
 800f5f4:	e014      	b.n	800f620 <_svfiprintf_r+0x114>
 800f5f6:	eba0 0308 	sub.w	r3, r0, r8
 800f5fa:	fa09 f303 	lsl.w	r3, r9, r3
 800f5fe:	4313      	orrs	r3, r2
 800f600:	9304      	str	r3, [sp, #16]
 800f602:	46a2      	mov	sl, r4
 800f604:	e7d2      	b.n	800f5ac <_svfiprintf_r+0xa0>
 800f606:	9b03      	ldr	r3, [sp, #12]
 800f608:	1d19      	adds	r1, r3, #4
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	9103      	str	r1, [sp, #12]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	bfbb      	ittet	lt
 800f612:	425b      	neglt	r3, r3
 800f614:	f042 0202 	orrlt.w	r2, r2, #2
 800f618:	9307      	strge	r3, [sp, #28]
 800f61a:	9307      	strlt	r3, [sp, #28]
 800f61c:	bfb8      	it	lt
 800f61e:	9204      	strlt	r2, [sp, #16]
 800f620:	7823      	ldrb	r3, [r4, #0]
 800f622:	2b2e      	cmp	r3, #46	@ 0x2e
 800f624:	d10a      	bne.n	800f63c <_svfiprintf_r+0x130>
 800f626:	7863      	ldrb	r3, [r4, #1]
 800f628:	2b2a      	cmp	r3, #42	@ 0x2a
 800f62a:	d132      	bne.n	800f692 <_svfiprintf_r+0x186>
 800f62c:	9b03      	ldr	r3, [sp, #12]
 800f62e:	1d1a      	adds	r2, r3, #4
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	9203      	str	r2, [sp, #12]
 800f634:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f638:	3402      	adds	r4, #2
 800f63a:	9305      	str	r3, [sp, #20]
 800f63c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f700 <_svfiprintf_r+0x1f4>
 800f640:	7821      	ldrb	r1, [r4, #0]
 800f642:	2203      	movs	r2, #3
 800f644:	4650      	mov	r0, sl
 800f646:	f7f0 fdeb 	bl	8000220 <memchr>
 800f64a:	b138      	cbz	r0, 800f65c <_svfiprintf_r+0x150>
 800f64c:	9b04      	ldr	r3, [sp, #16]
 800f64e:	eba0 000a 	sub.w	r0, r0, sl
 800f652:	2240      	movs	r2, #64	@ 0x40
 800f654:	4082      	lsls	r2, r0
 800f656:	4313      	orrs	r3, r2
 800f658:	3401      	adds	r4, #1
 800f65a:	9304      	str	r3, [sp, #16]
 800f65c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f660:	4824      	ldr	r0, [pc, #144]	@ (800f6f4 <_svfiprintf_r+0x1e8>)
 800f662:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f666:	2206      	movs	r2, #6
 800f668:	f7f0 fdda 	bl	8000220 <memchr>
 800f66c:	2800      	cmp	r0, #0
 800f66e:	d036      	beq.n	800f6de <_svfiprintf_r+0x1d2>
 800f670:	4b21      	ldr	r3, [pc, #132]	@ (800f6f8 <_svfiprintf_r+0x1ec>)
 800f672:	bb1b      	cbnz	r3, 800f6bc <_svfiprintf_r+0x1b0>
 800f674:	9b03      	ldr	r3, [sp, #12]
 800f676:	3307      	adds	r3, #7
 800f678:	f023 0307 	bic.w	r3, r3, #7
 800f67c:	3308      	adds	r3, #8
 800f67e:	9303      	str	r3, [sp, #12]
 800f680:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f682:	4433      	add	r3, r6
 800f684:	9309      	str	r3, [sp, #36]	@ 0x24
 800f686:	e76a      	b.n	800f55e <_svfiprintf_r+0x52>
 800f688:	fb0c 3202 	mla	r2, ip, r2, r3
 800f68c:	460c      	mov	r4, r1
 800f68e:	2001      	movs	r0, #1
 800f690:	e7a8      	b.n	800f5e4 <_svfiprintf_r+0xd8>
 800f692:	2300      	movs	r3, #0
 800f694:	3401      	adds	r4, #1
 800f696:	9305      	str	r3, [sp, #20]
 800f698:	4619      	mov	r1, r3
 800f69a:	f04f 0c0a 	mov.w	ip, #10
 800f69e:	4620      	mov	r0, r4
 800f6a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6a4:	3a30      	subs	r2, #48	@ 0x30
 800f6a6:	2a09      	cmp	r2, #9
 800f6a8:	d903      	bls.n	800f6b2 <_svfiprintf_r+0x1a6>
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d0c6      	beq.n	800f63c <_svfiprintf_r+0x130>
 800f6ae:	9105      	str	r1, [sp, #20]
 800f6b0:	e7c4      	b.n	800f63c <_svfiprintf_r+0x130>
 800f6b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	2301      	movs	r3, #1
 800f6ba:	e7f0      	b.n	800f69e <_svfiprintf_r+0x192>
 800f6bc:	ab03      	add	r3, sp, #12
 800f6be:	9300      	str	r3, [sp, #0]
 800f6c0:	462a      	mov	r2, r5
 800f6c2:	4b0e      	ldr	r3, [pc, #56]	@ (800f6fc <_svfiprintf_r+0x1f0>)
 800f6c4:	a904      	add	r1, sp, #16
 800f6c6:	4638      	mov	r0, r7
 800f6c8:	f7fc fe76 	bl	800c3b8 <_printf_float>
 800f6cc:	1c42      	adds	r2, r0, #1
 800f6ce:	4606      	mov	r6, r0
 800f6d0:	d1d6      	bne.n	800f680 <_svfiprintf_r+0x174>
 800f6d2:	89ab      	ldrh	r3, [r5, #12]
 800f6d4:	065b      	lsls	r3, r3, #25
 800f6d6:	f53f af2d 	bmi.w	800f534 <_svfiprintf_r+0x28>
 800f6da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6dc:	e72c      	b.n	800f538 <_svfiprintf_r+0x2c>
 800f6de:	ab03      	add	r3, sp, #12
 800f6e0:	9300      	str	r3, [sp, #0]
 800f6e2:	462a      	mov	r2, r5
 800f6e4:	4b05      	ldr	r3, [pc, #20]	@ (800f6fc <_svfiprintf_r+0x1f0>)
 800f6e6:	a904      	add	r1, sp, #16
 800f6e8:	4638      	mov	r0, r7
 800f6ea:	f7fd f9a7 	bl	800ca3c <_printf_i>
 800f6ee:	e7ed      	b.n	800f6cc <_svfiprintf_r+0x1c0>
 800f6f0:	08010d32 	.word	0x08010d32
 800f6f4:	08010d3c 	.word	0x08010d3c
 800f6f8:	0800c3b9 	.word	0x0800c3b9
 800f6fc:	0800f457 	.word	0x0800f457
 800f700:	08010d38 	.word	0x08010d38

0800f704 <__ascii_mbtowc>:
 800f704:	b082      	sub	sp, #8
 800f706:	b901      	cbnz	r1, 800f70a <__ascii_mbtowc+0x6>
 800f708:	a901      	add	r1, sp, #4
 800f70a:	b142      	cbz	r2, 800f71e <__ascii_mbtowc+0x1a>
 800f70c:	b14b      	cbz	r3, 800f722 <__ascii_mbtowc+0x1e>
 800f70e:	7813      	ldrb	r3, [r2, #0]
 800f710:	600b      	str	r3, [r1, #0]
 800f712:	7812      	ldrb	r2, [r2, #0]
 800f714:	1e10      	subs	r0, r2, #0
 800f716:	bf18      	it	ne
 800f718:	2001      	movne	r0, #1
 800f71a:	b002      	add	sp, #8
 800f71c:	4770      	bx	lr
 800f71e:	4610      	mov	r0, r2
 800f720:	e7fb      	b.n	800f71a <__ascii_mbtowc+0x16>
 800f722:	f06f 0001 	mvn.w	r0, #1
 800f726:	e7f8      	b.n	800f71a <__ascii_mbtowc+0x16>

0800f728 <__sflush_r>:
 800f728:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f72c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f730:	0716      	lsls	r6, r2, #28
 800f732:	4605      	mov	r5, r0
 800f734:	460c      	mov	r4, r1
 800f736:	d454      	bmi.n	800f7e2 <__sflush_r+0xba>
 800f738:	684b      	ldr	r3, [r1, #4]
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	dc02      	bgt.n	800f744 <__sflush_r+0x1c>
 800f73e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f740:	2b00      	cmp	r3, #0
 800f742:	dd48      	ble.n	800f7d6 <__sflush_r+0xae>
 800f744:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f746:	2e00      	cmp	r6, #0
 800f748:	d045      	beq.n	800f7d6 <__sflush_r+0xae>
 800f74a:	2300      	movs	r3, #0
 800f74c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f750:	682f      	ldr	r7, [r5, #0]
 800f752:	6a21      	ldr	r1, [r4, #32]
 800f754:	602b      	str	r3, [r5, #0]
 800f756:	d030      	beq.n	800f7ba <__sflush_r+0x92>
 800f758:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f75a:	89a3      	ldrh	r3, [r4, #12]
 800f75c:	0759      	lsls	r1, r3, #29
 800f75e:	d505      	bpl.n	800f76c <__sflush_r+0x44>
 800f760:	6863      	ldr	r3, [r4, #4]
 800f762:	1ad2      	subs	r2, r2, r3
 800f764:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f766:	b10b      	cbz	r3, 800f76c <__sflush_r+0x44>
 800f768:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f76a:	1ad2      	subs	r2, r2, r3
 800f76c:	2300      	movs	r3, #0
 800f76e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f770:	6a21      	ldr	r1, [r4, #32]
 800f772:	4628      	mov	r0, r5
 800f774:	47b0      	blx	r6
 800f776:	1c43      	adds	r3, r0, #1
 800f778:	89a3      	ldrh	r3, [r4, #12]
 800f77a:	d106      	bne.n	800f78a <__sflush_r+0x62>
 800f77c:	6829      	ldr	r1, [r5, #0]
 800f77e:	291d      	cmp	r1, #29
 800f780:	d82b      	bhi.n	800f7da <__sflush_r+0xb2>
 800f782:	4a2a      	ldr	r2, [pc, #168]	@ (800f82c <__sflush_r+0x104>)
 800f784:	410a      	asrs	r2, r1
 800f786:	07d6      	lsls	r6, r2, #31
 800f788:	d427      	bmi.n	800f7da <__sflush_r+0xb2>
 800f78a:	2200      	movs	r2, #0
 800f78c:	6062      	str	r2, [r4, #4]
 800f78e:	04d9      	lsls	r1, r3, #19
 800f790:	6922      	ldr	r2, [r4, #16]
 800f792:	6022      	str	r2, [r4, #0]
 800f794:	d504      	bpl.n	800f7a0 <__sflush_r+0x78>
 800f796:	1c42      	adds	r2, r0, #1
 800f798:	d101      	bne.n	800f79e <__sflush_r+0x76>
 800f79a:	682b      	ldr	r3, [r5, #0]
 800f79c:	b903      	cbnz	r3, 800f7a0 <__sflush_r+0x78>
 800f79e:	6560      	str	r0, [r4, #84]	@ 0x54
 800f7a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f7a2:	602f      	str	r7, [r5, #0]
 800f7a4:	b1b9      	cbz	r1, 800f7d6 <__sflush_r+0xae>
 800f7a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7aa:	4299      	cmp	r1, r3
 800f7ac:	d002      	beq.n	800f7b4 <__sflush_r+0x8c>
 800f7ae:	4628      	mov	r0, r5
 800f7b0:	f7ff face 	bl	800ed50 <_free_r>
 800f7b4:	2300      	movs	r3, #0
 800f7b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800f7b8:	e00d      	b.n	800f7d6 <__sflush_r+0xae>
 800f7ba:	2301      	movs	r3, #1
 800f7bc:	4628      	mov	r0, r5
 800f7be:	47b0      	blx	r6
 800f7c0:	4602      	mov	r2, r0
 800f7c2:	1c50      	adds	r0, r2, #1
 800f7c4:	d1c9      	bne.n	800f75a <__sflush_r+0x32>
 800f7c6:	682b      	ldr	r3, [r5, #0]
 800f7c8:	2b00      	cmp	r3, #0
 800f7ca:	d0c6      	beq.n	800f75a <__sflush_r+0x32>
 800f7cc:	2b1d      	cmp	r3, #29
 800f7ce:	d001      	beq.n	800f7d4 <__sflush_r+0xac>
 800f7d0:	2b16      	cmp	r3, #22
 800f7d2:	d11e      	bne.n	800f812 <__sflush_r+0xea>
 800f7d4:	602f      	str	r7, [r5, #0]
 800f7d6:	2000      	movs	r0, #0
 800f7d8:	e022      	b.n	800f820 <__sflush_r+0xf8>
 800f7da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7de:	b21b      	sxth	r3, r3
 800f7e0:	e01b      	b.n	800f81a <__sflush_r+0xf2>
 800f7e2:	690f      	ldr	r7, [r1, #16]
 800f7e4:	2f00      	cmp	r7, #0
 800f7e6:	d0f6      	beq.n	800f7d6 <__sflush_r+0xae>
 800f7e8:	0793      	lsls	r3, r2, #30
 800f7ea:	680e      	ldr	r6, [r1, #0]
 800f7ec:	bf08      	it	eq
 800f7ee:	694b      	ldreq	r3, [r1, #20]
 800f7f0:	600f      	str	r7, [r1, #0]
 800f7f2:	bf18      	it	ne
 800f7f4:	2300      	movne	r3, #0
 800f7f6:	eba6 0807 	sub.w	r8, r6, r7
 800f7fa:	608b      	str	r3, [r1, #8]
 800f7fc:	f1b8 0f00 	cmp.w	r8, #0
 800f800:	dde9      	ble.n	800f7d6 <__sflush_r+0xae>
 800f802:	6a21      	ldr	r1, [r4, #32]
 800f804:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f806:	4643      	mov	r3, r8
 800f808:	463a      	mov	r2, r7
 800f80a:	4628      	mov	r0, r5
 800f80c:	47b0      	blx	r6
 800f80e:	2800      	cmp	r0, #0
 800f810:	dc08      	bgt.n	800f824 <__sflush_r+0xfc>
 800f812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f816:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f81a:	81a3      	strh	r3, [r4, #12]
 800f81c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f824:	4407      	add	r7, r0
 800f826:	eba8 0800 	sub.w	r8, r8, r0
 800f82a:	e7e7      	b.n	800f7fc <__sflush_r+0xd4>
 800f82c:	dfbffffe 	.word	0xdfbffffe

0800f830 <_fflush_r>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	690b      	ldr	r3, [r1, #16]
 800f834:	4605      	mov	r5, r0
 800f836:	460c      	mov	r4, r1
 800f838:	b913      	cbnz	r3, 800f840 <_fflush_r+0x10>
 800f83a:	2500      	movs	r5, #0
 800f83c:	4628      	mov	r0, r5
 800f83e:	bd38      	pop	{r3, r4, r5, pc}
 800f840:	b118      	cbz	r0, 800f84a <_fflush_r+0x1a>
 800f842:	6a03      	ldr	r3, [r0, #32]
 800f844:	b90b      	cbnz	r3, 800f84a <_fflush_r+0x1a>
 800f846:	f7fd fce5 	bl	800d214 <__sinit>
 800f84a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d0f3      	beq.n	800f83a <_fflush_r+0xa>
 800f852:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f854:	07d0      	lsls	r0, r2, #31
 800f856:	d404      	bmi.n	800f862 <_fflush_r+0x32>
 800f858:	0599      	lsls	r1, r3, #22
 800f85a:	d402      	bmi.n	800f862 <_fflush_r+0x32>
 800f85c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f85e:	f7fe fbec 	bl	800e03a <__retarget_lock_acquire_recursive>
 800f862:	4628      	mov	r0, r5
 800f864:	4621      	mov	r1, r4
 800f866:	f7ff ff5f 	bl	800f728 <__sflush_r>
 800f86a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f86c:	07da      	lsls	r2, r3, #31
 800f86e:	4605      	mov	r5, r0
 800f870:	d4e4      	bmi.n	800f83c <_fflush_r+0xc>
 800f872:	89a3      	ldrh	r3, [r4, #12]
 800f874:	059b      	lsls	r3, r3, #22
 800f876:	d4e1      	bmi.n	800f83c <_fflush_r+0xc>
 800f878:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f87a:	f7fe fbdf 	bl	800e03c <__retarget_lock_release_recursive>
 800f87e:	e7dd      	b.n	800f83c <_fflush_r+0xc>

0800f880 <_Balloc>:
 800f880:	b570      	push	{r4, r5, r6, lr}
 800f882:	69c6      	ldr	r6, [r0, #28]
 800f884:	4604      	mov	r4, r0
 800f886:	460d      	mov	r5, r1
 800f888:	b976      	cbnz	r6, 800f8a8 <_Balloc+0x28>
 800f88a:	2010      	movs	r0, #16
 800f88c:	f7fc ffbe 	bl	800c80c <malloc>
 800f890:	4602      	mov	r2, r0
 800f892:	61e0      	str	r0, [r4, #28]
 800f894:	b920      	cbnz	r0, 800f8a0 <_Balloc+0x20>
 800f896:	4b18      	ldr	r3, [pc, #96]	@ (800f8f8 <_Balloc+0x78>)
 800f898:	4818      	ldr	r0, [pc, #96]	@ (800f8fc <_Balloc+0x7c>)
 800f89a:	216b      	movs	r1, #107	@ 0x6b
 800f89c:	f7fe fbee 	bl	800e07c <__assert_func>
 800f8a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f8a4:	6006      	str	r6, [r0, #0]
 800f8a6:	60c6      	str	r6, [r0, #12]
 800f8a8:	69e6      	ldr	r6, [r4, #28]
 800f8aa:	68f3      	ldr	r3, [r6, #12]
 800f8ac:	b183      	cbz	r3, 800f8d0 <_Balloc+0x50>
 800f8ae:	69e3      	ldr	r3, [r4, #28]
 800f8b0:	68db      	ldr	r3, [r3, #12]
 800f8b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f8b6:	b9b8      	cbnz	r0, 800f8e8 <_Balloc+0x68>
 800f8b8:	2101      	movs	r1, #1
 800f8ba:	fa01 f605 	lsl.w	r6, r1, r5
 800f8be:	1d72      	adds	r2, r6, #5
 800f8c0:	0092      	lsls	r2, r2, #2
 800f8c2:	4620      	mov	r0, r4
 800f8c4:	f000 fd87 	bl	80103d6 <_calloc_r>
 800f8c8:	b160      	cbz	r0, 800f8e4 <_Balloc+0x64>
 800f8ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f8ce:	e00e      	b.n	800f8ee <_Balloc+0x6e>
 800f8d0:	2221      	movs	r2, #33	@ 0x21
 800f8d2:	2104      	movs	r1, #4
 800f8d4:	4620      	mov	r0, r4
 800f8d6:	f000 fd7e 	bl	80103d6 <_calloc_r>
 800f8da:	69e3      	ldr	r3, [r4, #28]
 800f8dc:	60f0      	str	r0, [r6, #12]
 800f8de:	68db      	ldr	r3, [r3, #12]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d1e4      	bne.n	800f8ae <_Balloc+0x2e>
 800f8e4:	2000      	movs	r0, #0
 800f8e6:	bd70      	pop	{r4, r5, r6, pc}
 800f8e8:	6802      	ldr	r2, [r0, #0]
 800f8ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f8ee:	2300      	movs	r3, #0
 800f8f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f8f4:	e7f7      	b.n	800f8e6 <_Balloc+0x66>
 800f8f6:	bf00      	nop
 800f8f8:	08010c52 	.word	0x08010c52
 800f8fc:	08010d43 	.word	0x08010d43

0800f900 <_Bfree>:
 800f900:	b570      	push	{r4, r5, r6, lr}
 800f902:	69c6      	ldr	r6, [r0, #28]
 800f904:	4605      	mov	r5, r0
 800f906:	460c      	mov	r4, r1
 800f908:	b976      	cbnz	r6, 800f928 <_Bfree+0x28>
 800f90a:	2010      	movs	r0, #16
 800f90c:	f7fc ff7e 	bl	800c80c <malloc>
 800f910:	4602      	mov	r2, r0
 800f912:	61e8      	str	r0, [r5, #28]
 800f914:	b920      	cbnz	r0, 800f920 <_Bfree+0x20>
 800f916:	4b09      	ldr	r3, [pc, #36]	@ (800f93c <_Bfree+0x3c>)
 800f918:	4809      	ldr	r0, [pc, #36]	@ (800f940 <_Bfree+0x40>)
 800f91a:	218f      	movs	r1, #143	@ 0x8f
 800f91c:	f7fe fbae 	bl	800e07c <__assert_func>
 800f920:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f924:	6006      	str	r6, [r0, #0]
 800f926:	60c6      	str	r6, [r0, #12]
 800f928:	b13c      	cbz	r4, 800f93a <_Bfree+0x3a>
 800f92a:	69eb      	ldr	r3, [r5, #28]
 800f92c:	6862      	ldr	r2, [r4, #4]
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f934:	6021      	str	r1, [r4, #0]
 800f936:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f93a:	bd70      	pop	{r4, r5, r6, pc}
 800f93c:	08010c52 	.word	0x08010c52
 800f940:	08010d43 	.word	0x08010d43

0800f944 <__multadd>:
 800f944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f948:	690d      	ldr	r5, [r1, #16]
 800f94a:	4607      	mov	r7, r0
 800f94c:	460c      	mov	r4, r1
 800f94e:	461e      	mov	r6, r3
 800f950:	f101 0c14 	add.w	ip, r1, #20
 800f954:	2000      	movs	r0, #0
 800f956:	f8dc 3000 	ldr.w	r3, [ip]
 800f95a:	b299      	uxth	r1, r3
 800f95c:	fb02 6101 	mla	r1, r2, r1, r6
 800f960:	0c1e      	lsrs	r6, r3, #16
 800f962:	0c0b      	lsrs	r3, r1, #16
 800f964:	fb02 3306 	mla	r3, r2, r6, r3
 800f968:	b289      	uxth	r1, r1
 800f96a:	3001      	adds	r0, #1
 800f96c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f970:	4285      	cmp	r5, r0
 800f972:	f84c 1b04 	str.w	r1, [ip], #4
 800f976:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f97a:	dcec      	bgt.n	800f956 <__multadd+0x12>
 800f97c:	b30e      	cbz	r6, 800f9c2 <__multadd+0x7e>
 800f97e:	68a3      	ldr	r3, [r4, #8]
 800f980:	42ab      	cmp	r3, r5
 800f982:	dc19      	bgt.n	800f9b8 <__multadd+0x74>
 800f984:	6861      	ldr	r1, [r4, #4]
 800f986:	4638      	mov	r0, r7
 800f988:	3101      	adds	r1, #1
 800f98a:	f7ff ff79 	bl	800f880 <_Balloc>
 800f98e:	4680      	mov	r8, r0
 800f990:	b928      	cbnz	r0, 800f99e <__multadd+0x5a>
 800f992:	4602      	mov	r2, r0
 800f994:	4b0c      	ldr	r3, [pc, #48]	@ (800f9c8 <__multadd+0x84>)
 800f996:	480d      	ldr	r0, [pc, #52]	@ (800f9cc <__multadd+0x88>)
 800f998:	21ba      	movs	r1, #186	@ 0xba
 800f99a:	f7fe fb6f 	bl	800e07c <__assert_func>
 800f99e:	6922      	ldr	r2, [r4, #16]
 800f9a0:	3202      	adds	r2, #2
 800f9a2:	f104 010c 	add.w	r1, r4, #12
 800f9a6:	0092      	lsls	r2, r2, #2
 800f9a8:	300c      	adds	r0, #12
 800f9aa:	f7fe fb48 	bl	800e03e <memcpy>
 800f9ae:	4621      	mov	r1, r4
 800f9b0:	4638      	mov	r0, r7
 800f9b2:	f7ff ffa5 	bl	800f900 <_Bfree>
 800f9b6:	4644      	mov	r4, r8
 800f9b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f9bc:	3501      	adds	r5, #1
 800f9be:	615e      	str	r6, [r3, #20]
 800f9c0:	6125      	str	r5, [r4, #16]
 800f9c2:	4620      	mov	r0, r4
 800f9c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f9c8:	08010cc1 	.word	0x08010cc1
 800f9cc:	08010d43 	.word	0x08010d43

0800f9d0 <__s2b>:
 800f9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9d4:	460c      	mov	r4, r1
 800f9d6:	4615      	mov	r5, r2
 800f9d8:	461f      	mov	r7, r3
 800f9da:	2209      	movs	r2, #9
 800f9dc:	3308      	adds	r3, #8
 800f9de:	4606      	mov	r6, r0
 800f9e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f9e4:	2100      	movs	r1, #0
 800f9e6:	2201      	movs	r2, #1
 800f9e8:	429a      	cmp	r2, r3
 800f9ea:	db09      	blt.n	800fa00 <__s2b+0x30>
 800f9ec:	4630      	mov	r0, r6
 800f9ee:	f7ff ff47 	bl	800f880 <_Balloc>
 800f9f2:	b940      	cbnz	r0, 800fa06 <__s2b+0x36>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	4b19      	ldr	r3, [pc, #100]	@ (800fa5c <__s2b+0x8c>)
 800f9f8:	4819      	ldr	r0, [pc, #100]	@ (800fa60 <__s2b+0x90>)
 800f9fa:	21d3      	movs	r1, #211	@ 0xd3
 800f9fc:	f7fe fb3e 	bl	800e07c <__assert_func>
 800fa00:	0052      	lsls	r2, r2, #1
 800fa02:	3101      	adds	r1, #1
 800fa04:	e7f0      	b.n	800f9e8 <__s2b+0x18>
 800fa06:	9b08      	ldr	r3, [sp, #32]
 800fa08:	6143      	str	r3, [r0, #20]
 800fa0a:	2d09      	cmp	r5, #9
 800fa0c:	f04f 0301 	mov.w	r3, #1
 800fa10:	6103      	str	r3, [r0, #16]
 800fa12:	dd16      	ble.n	800fa42 <__s2b+0x72>
 800fa14:	f104 0909 	add.w	r9, r4, #9
 800fa18:	46c8      	mov	r8, r9
 800fa1a:	442c      	add	r4, r5
 800fa1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa20:	4601      	mov	r1, r0
 800fa22:	3b30      	subs	r3, #48	@ 0x30
 800fa24:	220a      	movs	r2, #10
 800fa26:	4630      	mov	r0, r6
 800fa28:	f7ff ff8c 	bl	800f944 <__multadd>
 800fa2c:	45a0      	cmp	r8, r4
 800fa2e:	d1f5      	bne.n	800fa1c <__s2b+0x4c>
 800fa30:	f1a5 0408 	sub.w	r4, r5, #8
 800fa34:	444c      	add	r4, r9
 800fa36:	1b2d      	subs	r5, r5, r4
 800fa38:	1963      	adds	r3, r4, r5
 800fa3a:	42bb      	cmp	r3, r7
 800fa3c:	db04      	blt.n	800fa48 <__s2b+0x78>
 800fa3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa42:	340a      	adds	r4, #10
 800fa44:	2509      	movs	r5, #9
 800fa46:	e7f6      	b.n	800fa36 <__s2b+0x66>
 800fa48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fa4c:	4601      	mov	r1, r0
 800fa4e:	3b30      	subs	r3, #48	@ 0x30
 800fa50:	220a      	movs	r2, #10
 800fa52:	4630      	mov	r0, r6
 800fa54:	f7ff ff76 	bl	800f944 <__multadd>
 800fa58:	e7ee      	b.n	800fa38 <__s2b+0x68>
 800fa5a:	bf00      	nop
 800fa5c:	08010cc1 	.word	0x08010cc1
 800fa60:	08010d43 	.word	0x08010d43

0800fa64 <__hi0bits>:
 800fa64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fa68:	4603      	mov	r3, r0
 800fa6a:	bf36      	itet	cc
 800fa6c:	0403      	lslcc	r3, r0, #16
 800fa6e:	2000      	movcs	r0, #0
 800fa70:	2010      	movcc	r0, #16
 800fa72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fa76:	bf3c      	itt	cc
 800fa78:	021b      	lslcc	r3, r3, #8
 800fa7a:	3008      	addcc	r0, #8
 800fa7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fa80:	bf3c      	itt	cc
 800fa82:	011b      	lslcc	r3, r3, #4
 800fa84:	3004      	addcc	r0, #4
 800fa86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fa8a:	bf3c      	itt	cc
 800fa8c:	009b      	lslcc	r3, r3, #2
 800fa8e:	3002      	addcc	r0, #2
 800fa90:	2b00      	cmp	r3, #0
 800fa92:	db05      	blt.n	800faa0 <__hi0bits+0x3c>
 800fa94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fa98:	f100 0001 	add.w	r0, r0, #1
 800fa9c:	bf08      	it	eq
 800fa9e:	2020      	moveq	r0, #32
 800faa0:	4770      	bx	lr

0800faa2 <__lo0bits>:
 800faa2:	6803      	ldr	r3, [r0, #0]
 800faa4:	4602      	mov	r2, r0
 800faa6:	f013 0007 	ands.w	r0, r3, #7
 800faaa:	d00b      	beq.n	800fac4 <__lo0bits+0x22>
 800faac:	07d9      	lsls	r1, r3, #31
 800faae:	d421      	bmi.n	800faf4 <__lo0bits+0x52>
 800fab0:	0798      	lsls	r0, r3, #30
 800fab2:	bf49      	itett	mi
 800fab4:	085b      	lsrmi	r3, r3, #1
 800fab6:	089b      	lsrpl	r3, r3, #2
 800fab8:	2001      	movmi	r0, #1
 800faba:	6013      	strmi	r3, [r2, #0]
 800fabc:	bf5c      	itt	pl
 800fabe:	6013      	strpl	r3, [r2, #0]
 800fac0:	2002      	movpl	r0, #2
 800fac2:	4770      	bx	lr
 800fac4:	b299      	uxth	r1, r3
 800fac6:	b909      	cbnz	r1, 800facc <__lo0bits+0x2a>
 800fac8:	0c1b      	lsrs	r3, r3, #16
 800faca:	2010      	movs	r0, #16
 800facc:	b2d9      	uxtb	r1, r3
 800face:	b909      	cbnz	r1, 800fad4 <__lo0bits+0x32>
 800fad0:	3008      	adds	r0, #8
 800fad2:	0a1b      	lsrs	r3, r3, #8
 800fad4:	0719      	lsls	r1, r3, #28
 800fad6:	bf04      	itt	eq
 800fad8:	091b      	lsreq	r3, r3, #4
 800fada:	3004      	addeq	r0, #4
 800fadc:	0799      	lsls	r1, r3, #30
 800fade:	bf04      	itt	eq
 800fae0:	089b      	lsreq	r3, r3, #2
 800fae2:	3002      	addeq	r0, #2
 800fae4:	07d9      	lsls	r1, r3, #31
 800fae6:	d403      	bmi.n	800faf0 <__lo0bits+0x4e>
 800fae8:	085b      	lsrs	r3, r3, #1
 800faea:	f100 0001 	add.w	r0, r0, #1
 800faee:	d003      	beq.n	800faf8 <__lo0bits+0x56>
 800faf0:	6013      	str	r3, [r2, #0]
 800faf2:	4770      	bx	lr
 800faf4:	2000      	movs	r0, #0
 800faf6:	4770      	bx	lr
 800faf8:	2020      	movs	r0, #32
 800fafa:	4770      	bx	lr

0800fafc <__i2b>:
 800fafc:	b510      	push	{r4, lr}
 800fafe:	460c      	mov	r4, r1
 800fb00:	2101      	movs	r1, #1
 800fb02:	f7ff febd 	bl	800f880 <_Balloc>
 800fb06:	4602      	mov	r2, r0
 800fb08:	b928      	cbnz	r0, 800fb16 <__i2b+0x1a>
 800fb0a:	4b05      	ldr	r3, [pc, #20]	@ (800fb20 <__i2b+0x24>)
 800fb0c:	4805      	ldr	r0, [pc, #20]	@ (800fb24 <__i2b+0x28>)
 800fb0e:	f240 1145 	movw	r1, #325	@ 0x145
 800fb12:	f7fe fab3 	bl	800e07c <__assert_func>
 800fb16:	2301      	movs	r3, #1
 800fb18:	6144      	str	r4, [r0, #20]
 800fb1a:	6103      	str	r3, [r0, #16]
 800fb1c:	bd10      	pop	{r4, pc}
 800fb1e:	bf00      	nop
 800fb20:	08010cc1 	.word	0x08010cc1
 800fb24:	08010d43 	.word	0x08010d43

0800fb28 <__multiply>:
 800fb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb2c:	4614      	mov	r4, r2
 800fb2e:	690a      	ldr	r2, [r1, #16]
 800fb30:	6923      	ldr	r3, [r4, #16]
 800fb32:	429a      	cmp	r2, r3
 800fb34:	bfa8      	it	ge
 800fb36:	4623      	movge	r3, r4
 800fb38:	460f      	mov	r7, r1
 800fb3a:	bfa4      	itt	ge
 800fb3c:	460c      	movge	r4, r1
 800fb3e:	461f      	movge	r7, r3
 800fb40:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800fb44:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800fb48:	68a3      	ldr	r3, [r4, #8]
 800fb4a:	6861      	ldr	r1, [r4, #4]
 800fb4c:	eb0a 0609 	add.w	r6, sl, r9
 800fb50:	42b3      	cmp	r3, r6
 800fb52:	b085      	sub	sp, #20
 800fb54:	bfb8      	it	lt
 800fb56:	3101      	addlt	r1, #1
 800fb58:	f7ff fe92 	bl	800f880 <_Balloc>
 800fb5c:	b930      	cbnz	r0, 800fb6c <__multiply+0x44>
 800fb5e:	4602      	mov	r2, r0
 800fb60:	4b44      	ldr	r3, [pc, #272]	@ (800fc74 <__multiply+0x14c>)
 800fb62:	4845      	ldr	r0, [pc, #276]	@ (800fc78 <__multiply+0x150>)
 800fb64:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fb68:	f7fe fa88 	bl	800e07c <__assert_func>
 800fb6c:	f100 0514 	add.w	r5, r0, #20
 800fb70:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fb74:	462b      	mov	r3, r5
 800fb76:	2200      	movs	r2, #0
 800fb78:	4543      	cmp	r3, r8
 800fb7a:	d321      	bcc.n	800fbc0 <__multiply+0x98>
 800fb7c:	f107 0114 	add.w	r1, r7, #20
 800fb80:	f104 0214 	add.w	r2, r4, #20
 800fb84:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800fb88:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800fb8c:	9302      	str	r3, [sp, #8]
 800fb8e:	1b13      	subs	r3, r2, r4
 800fb90:	3b15      	subs	r3, #21
 800fb92:	f023 0303 	bic.w	r3, r3, #3
 800fb96:	3304      	adds	r3, #4
 800fb98:	f104 0715 	add.w	r7, r4, #21
 800fb9c:	42ba      	cmp	r2, r7
 800fb9e:	bf38      	it	cc
 800fba0:	2304      	movcc	r3, #4
 800fba2:	9301      	str	r3, [sp, #4]
 800fba4:	9b02      	ldr	r3, [sp, #8]
 800fba6:	9103      	str	r1, [sp, #12]
 800fba8:	428b      	cmp	r3, r1
 800fbaa:	d80c      	bhi.n	800fbc6 <__multiply+0x9e>
 800fbac:	2e00      	cmp	r6, #0
 800fbae:	dd03      	ble.n	800fbb8 <__multiply+0x90>
 800fbb0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fbb4:	2b00      	cmp	r3, #0
 800fbb6:	d05b      	beq.n	800fc70 <__multiply+0x148>
 800fbb8:	6106      	str	r6, [r0, #16]
 800fbba:	b005      	add	sp, #20
 800fbbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbc0:	f843 2b04 	str.w	r2, [r3], #4
 800fbc4:	e7d8      	b.n	800fb78 <__multiply+0x50>
 800fbc6:	f8b1 a000 	ldrh.w	sl, [r1]
 800fbca:	f1ba 0f00 	cmp.w	sl, #0
 800fbce:	d024      	beq.n	800fc1a <__multiply+0xf2>
 800fbd0:	f104 0e14 	add.w	lr, r4, #20
 800fbd4:	46a9      	mov	r9, r5
 800fbd6:	f04f 0c00 	mov.w	ip, #0
 800fbda:	f85e 7b04 	ldr.w	r7, [lr], #4
 800fbde:	f8d9 3000 	ldr.w	r3, [r9]
 800fbe2:	fa1f fb87 	uxth.w	fp, r7
 800fbe6:	b29b      	uxth	r3, r3
 800fbe8:	fb0a 330b 	mla	r3, sl, fp, r3
 800fbec:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800fbf0:	f8d9 7000 	ldr.w	r7, [r9]
 800fbf4:	4463      	add	r3, ip
 800fbf6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fbfa:	fb0a c70b 	mla	r7, sl, fp, ip
 800fbfe:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800fc02:	b29b      	uxth	r3, r3
 800fc04:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fc08:	4572      	cmp	r2, lr
 800fc0a:	f849 3b04 	str.w	r3, [r9], #4
 800fc0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800fc12:	d8e2      	bhi.n	800fbda <__multiply+0xb2>
 800fc14:	9b01      	ldr	r3, [sp, #4]
 800fc16:	f845 c003 	str.w	ip, [r5, r3]
 800fc1a:	9b03      	ldr	r3, [sp, #12]
 800fc1c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800fc20:	3104      	adds	r1, #4
 800fc22:	f1b9 0f00 	cmp.w	r9, #0
 800fc26:	d021      	beq.n	800fc6c <__multiply+0x144>
 800fc28:	682b      	ldr	r3, [r5, #0]
 800fc2a:	f104 0c14 	add.w	ip, r4, #20
 800fc2e:	46ae      	mov	lr, r5
 800fc30:	f04f 0a00 	mov.w	sl, #0
 800fc34:	f8bc b000 	ldrh.w	fp, [ip]
 800fc38:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800fc3c:	fb09 770b 	mla	r7, r9, fp, r7
 800fc40:	4457      	add	r7, sl
 800fc42:	b29b      	uxth	r3, r3
 800fc44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800fc48:	f84e 3b04 	str.w	r3, [lr], #4
 800fc4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fc50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc54:	f8be 3000 	ldrh.w	r3, [lr]
 800fc58:	fb09 330a 	mla	r3, r9, sl, r3
 800fc5c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800fc60:	4562      	cmp	r2, ip
 800fc62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fc66:	d8e5      	bhi.n	800fc34 <__multiply+0x10c>
 800fc68:	9f01      	ldr	r7, [sp, #4]
 800fc6a:	51eb      	str	r3, [r5, r7]
 800fc6c:	3504      	adds	r5, #4
 800fc6e:	e799      	b.n	800fba4 <__multiply+0x7c>
 800fc70:	3e01      	subs	r6, #1
 800fc72:	e79b      	b.n	800fbac <__multiply+0x84>
 800fc74:	08010cc1 	.word	0x08010cc1
 800fc78:	08010d43 	.word	0x08010d43

0800fc7c <__pow5mult>:
 800fc7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fc80:	4615      	mov	r5, r2
 800fc82:	f012 0203 	ands.w	r2, r2, #3
 800fc86:	4607      	mov	r7, r0
 800fc88:	460e      	mov	r6, r1
 800fc8a:	d007      	beq.n	800fc9c <__pow5mult+0x20>
 800fc8c:	4c25      	ldr	r4, [pc, #148]	@ (800fd24 <__pow5mult+0xa8>)
 800fc8e:	3a01      	subs	r2, #1
 800fc90:	2300      	movs	r3, #0
 800fc92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fc96:	f7ff fe55 	bl	800f944 <__multadd>
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	10ad      	asrs	r5, r5, #2
 800fc9e:	d03d      	beq.n	800fd1c <__pow5mult+0xa0>
 800fca0:	69fc      	ldr	r4, [r7, #28]
 800fca2:	b97c      	cbnz	r4, 800fcc4 <__pow5mult+0x48>
 800fca4:	2010      	movs	r0, #16
 800fca6:	f7fc fdb1 	bl	800c80c <malloc>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	61f8      	str	r0, [r7, #28]
 800fcae:	b928      	cbnz	r0, 800fcbc <__pow5mult+0x40>
 800fcb0:	4b1d      	ldr	r3, [pc, #116]	@ (800fd28 <__pow5mult+0xac>)
 800fcb2:	481e      	ldr	r0, [pc, #120]	@ (800fd2c <__pow5mult+0xb0>)
 800fcb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800fcb8:	f7fe f9e0 	bl	800e07c <__assert_func>
 800fcbc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fcc0:	6004      	str	r4, [r0, #0]
 800fcc2:	60c4      	str	r4, [r0, #12]
 800fcc4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800fcc8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fccc:	b94c      	cbnz	r4, 800fce2 <__pow5mult+0x66>
 800fcce:	f240 2171 	movw	r1, #625	@ 0x271
 800fcd2:	4638      	mov	r0, r7
 800fcd4:	f7ff ff12 	bl	800fafc <__i2b>
 800fcd8:	2300      	movs	r3, #0
 800fcda:	f8c8 0008 	str.w	r0, [r8, #8]
 800fcde:	4604      	mov	r4, r0
 800fce0:	6003      	str	r3, [r0, #0]
 800fce2:	f04f 0900 	mov.w	r9, #0
 800fce6:	07eb      	lsls	r3, r5, #31
 800fce8:	d50a      	bpl.n	800fd00 <__pow5mult+0x84>
 800fcea:	4631      	mov	r1, r6
 800fcec:	4622      	mov	r2, r4
 800fcee:	4638      	mov	r0, r7
 800fcf0:	f7ff ff1a 	bl	800fb28 <__multiply>
 800fcf4:	4631      	mov	r1, r6
 800fcf6:	4680      	mov	r8, r0
 800fcf8:	4638      	mov	r0, r7
 800fcfa:	f7ff fe01 	bl	800f900 <_Bfree>
 800fcfe:	4646      	mov	r6, r8
 800fd00:	106d      	asrs	r5, r5, #1
 800fd02:	d00b      	beq.n	800fd1c <__pow5mult+0xa0>
 800fd04:	6820      	ldr	r0, [r4, #0]
 800fd06:	b938      	cbnz	r0, 800fd18 <__pow5mult+0x9c>
 800fd08:	4622      	mov	r2, r4
 800fd0a:	4621      	mov	r1, r4
 800fd0c:	4638      	mov	r0, r7
 800fd0e:	f7ff ff0b 	bl	800fb28 <__multiply>
 800fd12:	6020      	str	r0, [r4, #0]
 800fd14:	f8c0 9000 	str.w	r9, [r0]
 800fd18:	4604      	mov	r4, r0
 800fd1a:	e7e4      	b.n	800fce6 <__pow5mult+0x6a>
 800fd1c:	4630      	mov	r0, r6
 800fd1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd22:	bf00      	nop
 800fd24:	08010d9c 	.word	0x08010d9c
 800fd28:	08010c52 	.word	0x08010c52
 800fd2c:	08010d43 	.word	0x08010d43

0800fd30 <__lshift>:
 800fd30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd34:	460c      	mov	r4, r1
 800fd36:	6849      	ldr	r1, [r1, #4]
 800fd38:	6923      	ldr	r3, [r4, #16]
 800fd3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fd3e:	68a3      	ldr	r3, [r4, #8]
 800fd40:	4607      	mov	r7, r0
 800fd42:	4691      	mov	r9, r2
 800fd44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fd48:	f108 0601 	add.w	r6, r8, #1
 800fd4c:	42b3      	cmp	r3, r6
 800fd4e:	db0b      	blt.n	800fd68 <__lshift+0x38>
 800fd50:	4638      	mov	r0, r7
 800fd52:	f7ff fd95 	bl	800f880 <_Balloc>
 800fd56:	4605      	mov	r5, r0
 800fd58:	b948      	cbnz	r0, 800fd6e <__lshift+0x3e>
 800fd5a:	4602      	mov	r2, r0
 800fd5c:	4b28      	ldr	r3, [pc, #160]	@ (800fe00 <__lshift+0xd0>)
 800fd5e:	4829      	ldr	r0, [pc, #164]	@ (800fe04 <__lshift+0xd4>)
 800fd60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800fd64:	f7fe f98a 	bl	800e07c <__assert_func>
 800fd68:	3101      	adds	r1, #1
 800fd6a:	005b      	lsls	r3, r3, #1
 800fd6c:	e7ee      	b.n	800fd4c <__lshift+0x1c>
 800fd6e:	2300      	movs	r3, #0
 800fd70:	f100 0114 	add.w	r1, r0, #20
 800fd74:	f100 0210 	add.w	r2, r0, #16
 800fd78:	4618      	mov	r0, r3
 800fd7a:	4553      	cmp	r3, sl
 800fd7c:	db33      	blt.n	800fde6 <__lshift+0xb6>
 800fd7e:	6920      	ldr	r0, [r4, #16]
 800fd80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fd84:	f104 0314 	add.w	r3, r4, #20
 800fd88:	f019 091f 	ands.w	r9, r9, #31
 800fd8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fd90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fd94:	d02b      	beq.n	800fdee <__lshift+0xbe>
 800fd96:	f1c9 0e20 	rsb	lr, r9, #32
 800fd9a:	468a      	mov	sl, r1
 800fd9c:	2200      	movs	r2, #0
 800fd9e:	6818      	ldr	r0, [r3, #0]
 800fda0:	fa00 f009 	lsl.w	r0, r0, r9
 800fda4:	4310      	orrs	r0, r2
 800fda6:	f84a 0b04 	str.w	r0, [sl], #4
 800fdaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdae:	459c      	cmp	ip, r3
 800fdb0:	fa22 f20e 	lsr.w	r2, r2, lr
 800fdb4:	d8f3      	bhi.n	800fd9e <__lshift+0x6e>
 800fdb6:	ebac 0304 	sub.w	r3, ip, r4
 800fdba:	3b15      	subs	r3, #21
 800fdbc:	f023 0303 	bic.w	r3, r3, #3
 800fdc0:	3304      	adds	r3, #4
 800fdc2:	f104 0015 	add.w	r0, r4, #21
 800fdc6:	4584      	cmp	ip, r0
 800fdc8:	bf38      	it	cc
 800fdca:	2304      	movcc	r3, #4
 800fdcc:	50ca      	str	r2, [r1, r3]
 800fdce:	b10a      	cbz	r2, 800fdd4 <__lshift+0xa4>
 800fdd0:	f108 0602 	add.w	r6, r8, #2
 800fdd4:	3e01      	subs	r6, #1
 800fdd6:	4638      	mov	r0, r7
 800fdd8:	612e      	str	r6, [r5, #16]
 800fdda:	4621      	mov	r1, r4
 800fddc:	f7ff fd90 	bl	800f900 <_Bfree>
 800fde0:	4628      	mov	r0, r5
 800fde2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fde6:	f842 0f04 	str.w	r0, [r2, #4]!
 800fdea:	3301      	adds	r3, #1
 800fdec:	e7c5      	b.n	800fd7a <__lshift+0x4a>
 800fdee:	3904      	subs	r1, #4
 800fdf0:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdf4:	f841 2f04 	str.w	r2, [r1, #4]!
 800fdf8:	459c      	cmp	ip, r3
 800fdfa:	d8f9      	bhi.n	800fdf0 <__lshift+0xc0>
 800fdfc:	e7ea      	b.n	800fdd4 <__lshift+0xa4>
 800fdfe:	bf00      	nop
 800fe00:	08010cc1 	.word	0x08010cc1
 800fe04:	08010d43 	.word	0x08010d43

0800fe08 <__mcmp>:
 800fe08:	690a      	ldr	r2, [r1, #16]
 800fe0a:	4603      	mov	r3, r0
 800fe0c:	6900      	ldr	r0, [r0, #16]
 800fe0e:	1a80      	subs	r0, r0, r2
 800fe10:	b530      	push	{r4, r5, lr}
 800fe12:	d10e      	bne.n	800fe32 <__mcmp+0x2a>
 800fe14:	3314      	adds	r3, #20
 800fe16:	3114      	adds	r1, #20
 800fe18:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800fe1c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800fe20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fe24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fe28:	4295      	cmp	r5, r2
 800fe2a:	d003      	beq.n	800fe34 <__mcmp+0x2c>
 800fe2c:	d205      	bcs.n	800fe3a <__mcmp+0x32>
 800fe2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe32:	bd30      	pop	{r4, r5, pc}
 800fe34:	42a3      	cmp	r3, r4
 800fe36:	d3f3      	bcc.n	800fe20 <__mcmp+0x18>
 800fe38:	e7fb      	b.n	800fe32 <__mcmp+0x2a>
 800fe3a:	2001      	movs	r0, #1
 800fe3c:	e7f9      	b.n	800fe32 <__mcmp+0x2a>
	...

0800fe40 <__mdiff>:
 800fe40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe44:	4689      	mov	r9, r1
 800fe46:	4606      	mov	r6, r0
 800fe48:	4611      	mov	r1, r2
 800fe4a:	4648      	mov	r0, r9
 800fe4c:	4614      	mov	r4, r2
 800fe4e:	f7ff ffdb 	bl	800fe08 <__mcmp>
 800fe52:	1e05      	subs	r5, r0, #0
 800fe54:	d112      	bne.n	800fe7c <__mdiff+0x3c>
 800fe56:	4629      	mov	r1, r5
 800fe58:	4630      	mov	r0, r6
 800fe5a:	f7ff fd11 	bl	800f880 <_Balloc>
 800fe5e:	4602      	mov	r2, r0
 800fe60:	b928      	cbnz	r0, 800fe6e <__mdiff+0x2e>
 800fe62:	4b3f      	ldr	r3, [pc, #252]	@ (800ff60 <__mdiff+0x120>)
 800fe64:	f240 2137 	movw	r1, #567	@ 0x237
 800fe68:	483e      	ldr	r0, [pc, #248]	@ (800ff64 <__mdiff+0x124>)
 800fe6a:	f7fe f907 	bl	800e07c <__assert_func>
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fe74:	4610      	mov	r0, r2
 800fe76:	b003      	add	sp, #12
 800fe78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe7c:	bfbc      	itt	lt
 800fe7e:	464b      	movlt	r3, r9
 800fe80:	46a1      	movlt	r9, r4
 800fe82:	4630      	mov	r0, r6
 800fe84:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fe88:	bfba      	itte	lt
 800fe8a:	461c      	movlt	r4, r3
 800fe8c:	2501      	movlt	r5, #1
 800fe8e:	2500      	movge	r5, #0
 800fe90:	f7ff fcf6 	bl	800f880 <_Balloc>
 800fe94:	4602      	mov	r2, r0
 800fe96:	b918      	cbnz	r0, 800fea0 <__mdiff+0x60>
 800fe98:	4b31      	ldr	r3, [pc, #196]	@ (800ff60 <__mdiff+0x120>)
 800fe9a:	f240 2145 	movw	r1, #581	@ 0x245
 800fe9e:	e7e3      	b.n	800fe68 <__mdiff+0x28>
 800fea0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fea4:	6926      	ldr	r6, [r4, #16]
 800fea6:	60c5      	str	r5, [r0, #12]
 800fea8:	f109 0310 	add.w	r3, r9, #16
 800feac:	f109 0514 	add.w	r5, r9, #20
 800feb0:	f104 0e14 	add.w	lr, r4, #20
 800feb4:	f100 0b14 	add.w	fp, r0, #20
 800feb8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800febc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fec0:	9301      	str	r3, [sp, #4]
 800fec2:	46d9      	mov	r9, fp
 800fec4:	f04f 0c00 	mov.w	ip, #0
 800fec8:	9b01      	ldr	r3, [sp, #4]
 800feca:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fece:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fed2:	9301      	str	r3, [sp, #4]
 800fed4:	fa1f f38a 	uxth.w	r3, sl
 800fed8:	4619      	mov	r1, r3
 800feda:	b283      	uxth	r3, r0
 800fedc:	1acb      	subs	r3, r1, r3
 800fede:	0c00      	lsrs	r0, r0, #16
 800fee0:	4463      	add	r3, ip
 800fee2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fee6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800feea:	b29b      	uxth	r3, r3
 800feec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fef0:	4576      	cmp	r6, lr
 800fef2:	f849 3b04 	str.w	r3, [r9], #4
 800fef6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fefa:	d8e5      	bhi.n	800fec8 <__mdiff+0x88>
 800fefc:	1b33      	subs	r3, r6, r4
 800fefe:	3b15      	subs	r3, #21
 800ff00:	f023 0303 	bic.w	r3, r3, #3
 800ff04:	3415      	adds	r4, #21
 800ff06:	3304      	adds	r3, #4
 800ff08:	42a6      	cmp	r6, r4
 800ff0a:	bf38      	it	cc
 800ff0c:	2304      	movcc	r3, #4
 800ff0e:	441d      	add	r5, r3
 800ff10:	445b      	add	r3, fp
 800ff12:	461e      	mov	r6, r3
 800ff14:	462c      	mov	r4, r5
 800ff16:	4544      	cmp	r4, r8
 800ff18:	d30e      	bcc.n	800ff38 <__mdiff+0xf8>
 800ff1a:	f108 0103 	add.w	r1, r8, #3
 800ff1e:	1b49      	subs	r1, r1, r5
 800ff20:	f021 0103 	bic.w	r1, r1, #3
 800ff24:	3d03      	subs	r5, #3
 800ff26:	45a8      	cmp	r8, r5
 800ff28:	bf38      	it	cc
 800ff2a:	2100      	movcc	r1, #0
 800ff2c:	440b      	add	r3, r1
 800ff2e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ff32:	b191      	cbz	r1, 800ff5a <__mdiff+0x11a>
 800ff34:	6117      	str	r7, [r2, #16]
 800ff36:	e79d      	b.n	800fe74 <__mdiff+0x34>
 800ff38:	f854 1b04 	ldr.w	r1, [r4], #4
 800ff3c:	46e6      	mov	lr, ip
 800ff3e:	0c08      	lsrs	r0, r1, #16
 800ff40:	fa1c fc81 	uxtah	ip, ip, r1
 800ff44:	4471      	add	r1, lr
 800ff46:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ff4a:	b289      	uxth	r1, r1
 800ff4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ff50:	f846 1b04 	str.w	r1, [r6], #4
 800ff54:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ff58:	e7dd      	b.n	800ff16 <__mdiff+0xd6>
 800ff5a:	3f01      	subs	r7, #1
 800ff5c:	e7e7      	b.n	800ff2e <__mdiff+0xee>
 800ff5e:	bf00      	nop
 800ff60:	08010cc1 	.word	0x08010cc1
 800ff64:	08010d43 	.word	0x08010d43

0800ff68 <__ulp>:
 800ff68:	b082      	sub	sp, #8
 800ff6a:	ed8d 0b00 	vstr	d0, [sp]
 800ff6e:	9a01      	ldr	r2, [sp, #4]
 800ff70:	4b0f      	ldr	r3, [pc, #60]	@ (800ffb0 <__ulp+0x48>)
 800ff72:	4013      	ands	r3, r2
 800ff74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	dc08      	bgt.n	800ff8e <__ulp+0x26>
 800ff7c:	425b      	negs	r3, r3
 800ff7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ff82:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ff86:	da04      	bge.n	800ff92 <__ulp+0x2a>
 800ff88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ff8c:	4113      	asrs	r3, r2
 800ff8e:	2200      	movs	r2, #0
 800ff90:	e008      	b.n	800ffa4 <__ulp+0x3c>
 800ff92:	f1a2 0314 	sub.w	r3, r2, #20
 800ff96:	2b1e      	cmp	r3, #30
 800ff98:	bfda      	itte	le
 800ff9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ff9e:	40da      	lsrle	r2, r3
 800ffa0:	2201      	movgt	r2, #1
 800ffa2:	2300      	movs	r3, #0
 800ffa4:	4619      	mov	r1, r3
 800ffa6:	4610      	mov	r0, r2
 800ffa8:	ec41 0b10 	vmov	d0, r0, r1
 800ffac:	b002      	add	sp, #8
 800ffae:	4770      	bx	lr
 800ffb0:	7ff00000 	.word	0x7ff00000

0800ffb4 <__b2d>:
 800ffb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb8:	6906      	ldr	r6, [r0, #16]
 800ffba:	f100 0814 	add.w	r8, r0, #20
 800ffbe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ffc2:	1f37      	subs	r7, r6, #4
 800ffc4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ffc8:	4610      	mov	r0, r2
 800ffca:	f7ff fd4b 	bl	800fa64 <__hi0bits>
 800ffce:	f1c0 0320 	rsb	r3, r0, #32
 800ffd2:	280a      	cmp	r0, #10
 800ffd4:	600b      	str	r3, [r1, #0]
 800ffd6:	491b      	ldr	r1, [pc, #108]	@ (8010044 <__b2d+0x90>)
 800ffd8:	dc15      	bgt.n	8010006 <__b2d+0x52>
 800ffda:	f1c0 0c0b 	rsb	ip, r0, #11
 800ffde:	fa22 f30c 	lsr.w	r3, r2, ip
 800ffe2:	45b8      	cmp	r8, r7
 800ffe4:	ea43 0501 	orr.w	r5, r3, r1
 800ffe8:	bf34      	ite	cc
 800ffea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ffee:	2300      	movcs	r3, #0
 800fff0:	3015      	adds	r0, #21
 800fff2:	fa02 f000 	lsl.w	r0, r2, r0
 800fff6:	fa23 f30c 	lsr.w	r3, r3, ip
 800fffa:	4303      	orrs	r3, r0
 800fffc:	461c      	mov	r4, r3
 800fffe:	ec45 4b10 	vmov	d0, r4, r5
 8010002:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010006:	45b8      	cmp	r8, r7
 8010008:	bf3a      	itte	cc
 801000a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 801000e:	f1a6 0708 	subcc.w	r7, r6, #8
 8010012:	2300      	movcs	r3, #0
 8010014:	380b      	subs	r0, #11
 8010016:	d012      	beq.n	801003e <__b2d+0x8a>
 8010018:	f1c0 0120 	rsb	r1, r0, #32
 801001c:	fa23 f401 	lsr.w	r4, r3, r1
 8010020:	4082      	lsls	r2, r0
 8010022:	4322      	orrs	r2, r4
 8010024:	4547      	cmp	r7, r8
 8010026:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801002a:	bf8c      	ite	hi
 801002c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010030:	2200      	movls	r2, #0
 8010032:	4083      	lsls	r3, r0
 8010034:	40ca      	lsrs	r2, r1
 8010036:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801003a:	4313      	orrs	r3, r2
 801003c:	e7de      	b.n	800fffc <__b2d+0x48>
 801003e:	ea42 0501 	orr.w	r5, r2, r1
 8010042:	e7db      	b.n	800fffc <__b2d+0x48>
 8010044:	3ff00000 	.word	0x3ff00000

08010048 <__d2b>:
 8010048:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801004c:	460f      	mov	r7, r1
 801004e:	2101      	movs	r1, #1
 8010050:	ec59 8b10 	vmov	r8, r9, d0
 8010054:	4616      	mov	r6, r2
 8010056:	f7ff fc13 	bl	800f880 <_Balloc>
 801005a:	4604      	mov	r4, r0
 801005c:	b930      	cbnz	r0, 801006c <__d2b+0x24>
 801005e:	4602      	mov	r2, r0
 8010060:	4b23      	ldr	r3, [pc, #140]	@ (80100f0 <__d2b+0xa8>)
 8010062:	4824      	ldr	r0, [pc, #144]	@ (80100f4 <__d2b+0xac>)
 8010064:	f240 310f 	movw	r1, #783	@ 0x30f
 8010068:	f7fe f808 	bl	800e07c <__assert_func>
 801006c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010070:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010074:	b10d      	cbz	r5, 801007a <__d2b+0x32>
 8010076:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801007a:	9301      	str	r3, [sp, #4]
 801007c:	f1b8 0300 	subs.w	r3, r8, #0
 8010080:	d023      	beq.n	80100ca <__d2b+0x82>
 8010082:	4668      	mov	r0, sp
 8010084:	9300      	str	r3, [sp, #0]
 8010086:	f7ff fd0c 	bl	800faa2 <__lo0bits>
 801008a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801008e:	b1d0      	cbz	r0, 80100c6 <__d2b+0x7e>
 8010090:	f1c0 0320 	rsb	r3, r0, #32
 8010094:	fa02 f303 	lsl.w	r3, r2, r3
 8010098:	430b      	orrs	r3, r1
 801009a:	40c2      	lsrs	r2, r0
 801009c:	6163      	str	r3, [r4, #20]
 801009e:	9201      	str	r2, [sp, #4]
 80100a0:	9b01      	ldr	r3, [sp, #4]
 80100a2:	61a3      	str	r3, [r4, #24]
 80100a4:	2b00      	cmp	r3, #0
 80100a6:	bf0c      	ite	eq
 80100a8:	2201      	moveq	r2, #1
 80100aa:	2202      	movne	r2, #2
 80100ac:	6122      	str	r2, [r4, #16]
 80100ae:	b1a5      	cbz	r5, 80100da <__d2b+0x92>
 80100b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80100b4:	4405      	add	r5, r0
 80100b6:	603d      	str	r5, [r7, #0]
 80100b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80100bc:	6030      	str	r0, [r6, #0]
 80100be:	4620      	mov	r0, r4
 80100c0:	b003      	add	sp, #12
 80100c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80100c6:	6161      	str	r1, [r4, #20]
 80100c8:	e7ea      	b.n	80100a0 <__d2b+0x58>
 80100ca:	a801      	add	r0, sp, #4
 80100cc:	f7ff fce9 	bl	800faa2 <__lo0bits>
 80100d0:	9b01      	ldr	r3, [sp, #4]
 80100d2:	6163      	str	r3, [r4, #20]
 80100d4:	3020      	adds	r0, #32
 80100d6:	2201      	movs	r2, #1
 80100d8:	e7e8      	b.n	80100ac <__d2b+0x64>
 80100da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80100de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80100e2:	6038      	str	r0, [r7, #0]
 80100e4:	6918      	ldr	r0, [r3, #16]
 80100e6:	f7ff fcbd 	bl	800fa64 <__hi0bits>
 80100ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80100ee:	e7e5      	b.n	80100bc <__d2b+0x74>
 80100f0:	08010cc1 	.word	0x08010cc1
 80100f4:	08010d43 	.word	0x08010d43

080100f8 <__ratio>:
 80100f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100fc:	b085      	sub	sp, #20
 80100fe:	e9cd 1000 	strd	r1, r0, [sp]
 8010102:	a902      	add	r1, sp, #8
 8010104:	f7ff ff56 	bl	800ffb4 <__b2d>
 8010108:	9800      	ldr	r0, [sp, #0]
 801010a:	a903      	add	r1, sp, #12
 801010c:	ec55 4b10 	vmov	r4, r5, d0
 8010110:	f7ff ff50 	bl	800ffb4 <__b2d>
 8010114:	9b01      	ldr	r3, [sp, #4]
 8010116:	6919      	ldr	r1, [r3, #16]
 8010118:	9b00      	ldr	r3, [sp, #0]
 801011a:	691b      	ldr	r3, [r3, #16]
 801011c:	1ac9      	subs	r1, r1, r3
 801011e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010122:	1a9b      	subs	r3, r3, r2
 8010124:	ec5b ab10 	vmov	sl, fp, d0
 8010128:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801012c:	2b00      	cmp	r3, #0
 801012e:	bfce      	itee	gt
 8010130:	462a      	movgt	r2, r5
 8010132:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010136:	465a      	movle	r2, fp
 8010138:	462f      	mov	r7, r5
 801013a:	46d9      	mov	r9, fp
 801013c:	bfcc      	ite	gt
 801013e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010142:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010146:	464b      	mov	r3, r9
 8010148:	4652      	mov	r2, sl
 801014a:	4620      	mov	r0, r4
 801014c:	4639      	mov	r1, r7
 801014e:	f7f0 fba5 	bl	800089c <__aeabi_ddiv>
 8010152:	ec41 0b10 	vmov	d0, r0, r1
 8010156:	b005      	add	sp, #20
 8010158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801015c <__copybits>:
 801015c:	3901      	subs	r1, #1
 801015e:	b570      	push	{r4, r5, r6, lr}
 8010160:	1149      	asrs	r1, r1, #5
 8010162:	6914      	ldr	r4, [r2, #16]
 8010164:	3101      	adds	r1, #1
 8010166:	f102 0314 	add.w	r3, r2, #20
 801016a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801016e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010172:	1f05      	subs	r5, r0, #4
 8010174:	42a3      	cmp	r3, r4
 8010176:	d30c      	bcc.n	8010192 <__copybits+0x36>
 8010178:	1aa3      	subs	r3, r4, r2
 801017a:	3b11      	subs	r3, #17
 801017c:	f023 0303 	bic.w	r3, r3, #3
 8010180:	3211      	adds	r2, #17
 8010182:	42a2      	cmp	r2, r4
 8010184:	bf88      	it	hi
 8010186:	2300      	movhi	r3, #0
 8010188:	4418      	add	r0, r3
 801018a:	2300      	movs	r3, #0
 801018c:	4288      	cmp	r0, r1
 801018e:	d305      	bcc.n	801019c <__copybits+0x40>
 8010190:	bd70      	pop	{r4, r5, r6, pc}
 8010192:	f853 6b04 	ldr.w	r6, [r3], #4
 8010196:	f845 6f04 	str.w	r6, [r5, #4]!
 801019a:	e7eb      	b.n	8010174 <__copybits+0x18>
 801019c:	f840 3b04 	str.w	r3, [r0], #4
 80101a0:	e7f4      	b.n	801018c <__copybits+0x30>

080101a2 <__any_on>:
 80101a2:	f100 0214 	add.w	r2, r0, #20
 80101a6:	6900      	ldr	r0, [r0, #16]
 80101a8:	114b      	asrs	r3, r1, #5
 80101aa:	4298      	cmp	r0, r3
 80101ac:	b510      	push	{r4, lr}
 80101ae:	db11      	blt.n	80101d4 <__any_on+0x32>
 80101b0:	dd0a      	ble.n	80101c8 <__any_on+0x26>
 80101b2:	f011 011f 	ands.w	r1, r1, #31
 80101b6:	d007      	beq.n	80101c8 <__any_on+0x26>
 80101b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80101bc:	fa24 f001 	lsr.w	r0, r4, r1
 80101c0:	fa00 f101 	lsl.w	r1, r0, r1
 80101c4:	428c      	cmp	r4, r1
 80101c6:	d10b      	bne.n	80101e0 <__any_on+0x3e>
 80101c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80101cc:	4293      	cmp	r3, r2
 80101ce:	d803      	bhi.n	80101d8 <__any_on+0x36>
 80101d0:	2000      	movs	r0, #0
 80101d2:	bd10      	pop	{r4, pc}
 80101d4:	4603      	mov	r3, r0
 80101d6:	e7f7      	b.n	80101c8 <__any_on+0x26>
 80101d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80101dc:	2900      	cmp	r1, #0
 80101de:	d0f5      	beq.n	80101cc <__any_on+0x2a>
 80101e0:	2001      	movs	r0, #1
 80101e2:	e7f6      	b.n	80101d2 <__any_on+0x30>

080101e4 <__sread>:
 80101e4:	b510      	push	{r4, lr}
 80101e6:	460c      	mov	r4, r1
 80101e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101ec:	f000 f8c8 	bl	8010380 <_read_r>
 80101f0:	2800      	cmp	r0, #0
 80101f2:	bfab      	itete	ge
 80101f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80101f6:	89a3      	ldrhlt	r3, [r4, #12]
 80101f8:	181b      	addge	r3, r3, r0
 80101fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80101fe:	bfac      	ite	ge
 8010200:	6563      	strge	r3, [r4, #84]	@ 0x54
 8010202:	81a3      	strhlt	r3, [r4, #12]
 8010204:	bd10      	pop	{r4, pc}

08010206 <__swrite>:
 8010206:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801020a:	461f      	mov	r7, r3
 801020c:	898b      	ldrh	r3, [r1, #12]
 801020e:	05db      	lsls	r3, r3, #23
 8010210:	4605      	mov	r5, r0
 8010212:	460c      	mov	r4, r1
 8010214:	4616      	mov	r6, r2
 8010216:	d505      	bpl.n	8010224 <__swrite+0x1e>
 8010218:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801021c:	2302      	movs	r3, #2
 801021e:	2200      	movs	r2, #0
 8010220:	f000 f89c 	bl	801035c <_lseek_r>
 8010224:	89a3      	ldrh	r3, [r4, #12]
 8010226:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801022a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801022e:	81a3      	strh	r3, [r4, #12]
 8010230:	4632      	mov	r2, r6
 8010232:	463b      	mov	r3, r7
 8010234:	4628      	mov	r0, r5
 8010236:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801023a:	f000 b8b3 	b.w	80103a4 <_write_r>

0801023e <__sseek>:
 801023e:	b510      	push	{r4, lr}
 8010240:	460c      	mov	r4, r1
 8010242:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010246:	f000 f889 	bl	801035c <_lseek_r>
 801024a:	1c43      	adds	r3, r0, #1
 801024c:	89a3      	ldrh	r3, [r4, #12]
 801024e:	bf15      	itete	ne
 8010250:	6560      	strne	r0, [r4, #84]	@ 0x54
 8010252:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8010256:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801025a:	81a3      	strheq	r3, [r4, #12]
 801025c:	bf18      	it	ne
 801025e:	81a3      	strhne	r3, [r4, #12]
 8010260:	bd10      	pop	{r4, pc}

08010262 <__sclose>:
 8010262:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010266:	f000 b869 	b.w	801033c <_close_r>
	...

0801026c <fiprintf>:
 801026c:	b40e      	push	{r1, r2, r3}
 801026e:	b503      	push	{r0, r1, lr}
 8010270:	4601      	mov	r1, r0
 8010272:	ab03      	add	r3, sp, #12
 8010274:	4805      	ldr	r0, [pc, #20]	@ (801028c <fiprintf+0x20>)
 8010276:	f853 2b04 	ldr.w	r2, [r3], #4
 801027a:	6800      	ldr	r0, [r0, #0]
 801027c:	9301      	str	r3, [sp, #4]
 801027e:	f000 f8e7 	bl	8010450 <_vfiprintf_r>
 8010282:	b002      	add	sp, #8
 8010284:	f85d eb04 	ldr.w	lr, [sp], #4
 8010288:	b003      	add	sp, #12
 801028a:	4770      	bx	lr
 801028c:	200001a4 	.word	0x200001a4

08010290 <_realloc_r>:
 8010290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010294:	4680      	mov	r8, r0
 8010296:	4615      	mov	r5, r2
 8010298:	460c      	mov	r4, r1
 801029a:	b921      	cbnz	r1, 80102a6 <_realloc_r+0x16>
 801029c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80102a0:	4611      	mov	r1, r2
 80102a2:	f7fc badd 	b.w	800c860 <_malloc_r>
 80102a6:	b92a      	cbnz	r2, 80102b4 <_realloc_r+0x24>
 80102a8:	f7fe fd52 	bl	800ed50 <_free_r>
 80102ac:	2400      	movs	r4, #0
 80102ae:	4620      	mov	r0, r4
 80102b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102b4:	f000 f9e4 	bl	8010680 <_malloc_usable_size_r>
 80102b8:	4285      	cmp	r5, r0
 80102ba:	4606      	mov	r6, r0
 80102bc:	d802      	bhi.n	80102c4 <_realloc_r+0x34>
 80102be:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80102c2:	d8f4      	bhi.n	80102ae <_realloc_r+0x1e>
 80102c4:	4629      	mov	r1, r5
 80102c6:	4640      	mov	r0, r8
 80102c8:	f7fc faca 	bl	800c860 <_malloc_r>
 80102cc:	4607      	mov	r7, r0
 80102ce:	2800      	cmp	r0, #0
 80102d0:	d0ec      	beq.n	80102ac <_realloc_r+0x1c>
 80102d2:	42b5      	cmp	r5, r6
 80102d4:	462a      	mov	r2, r5
 80102d6:	4621      	mov	r1, r4
 80102d8:	bf28      	it	cs
 80102da:	4632      	movcs	r2, r6
 80102dc:	f7fd feaf 	bl	800e03e <memcpy>
 80102e0:	4621      	mov	r1, r4
 80102e2:	4640      	mov	r0, r8
 80102e4:	f7fe fd34 	bl	800ed50 <_free_r>
 80102e8:	463c      	mov	r4, r7
 80102ea:	e7e0      	b.n	80102ae <_realloc_r+0x1e>

080102ec <__ascii_wctomb>:
 80102ec:	4603      	mov	r3, r0
 80102ee:	4608      	mov	r0, r1
 80102f0:	b141      	cbz	r1, 8010304 <__ascii_wctomb+0x18>
 80102f2:	2aff      	cmp	r2, #255	@ 0xff
 80102f4:	d904      	bls.n	8010300 <__ascii_wctomb+0x14>
 80102f6:	228a      	movs	r2, #138	@ 0x8a
 80102f8:	601a      	str	r2, [r3, #0]
 80102fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80102fe:	4770      	bx	lr
 8010300:	700a      	strb	r2, [r1, #0]
 8010302:	2001      	movs	r0, #1
 8010304:	4770      	bx	lr

08010306 <memmove>:
 8010306:	4288      	cmp	r0, r1
 8010308:	b510      	push	{r4, lr}
 801030a:	eb01 0402 	add.w	r4, r1, r2
 801030e:	d902      	bls.n	8010316 <memmove+0x10>
 8010310:	4284      	cmp	r4, r0
 8010312:	4623      	mov	r3, r4
 8010314:	d807      	bhi.n	8010326 <memmove+0x20>
 8010316:	1e43      	subs	r3, r0, #1
 8010318:	42a1      	cmp	r1, r4
 801031a:	d008      	beq.n	801032e <memmove+0x28>
 801031c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010320:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010324:	e7f8      	b.n	8010318 <memmove+0x12>
 8010326:	4402      	add	r2, r0
 8010328:	4601      	mov	r1, r0
 801032a:	428a      	cmp	r2, r1
 801032c:	d100      	bne.n	8010330 <memmove+0x2a>
 801032e:	bd10      	pop	{r4, pc}
 8010330:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010334:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010338:	e7f7      	b.n	801032a <memmove+0x24>
	...

0801033c <_close_r>:
 801033c:	b538      	push	{r3, r4, r5, lr}
 801033e:	4d06      	ldr	r5, [pc, #24]	@ (8010358 <_close_r+0x1c>)
 8010340:	2300      	movs	r3, #0
 8010342:	4604      	mov	r4, r0
 8010344:	4608      	mov	r0, r1
 8010346:	602b      	str	r3, [r5, #0]
 8010348:	f7f2 fae6 	bl	8002918 <_close>
 801034c:	1c43      	adds	r3, r0, #1
 801034e:	d102      	bne.n	8010356 <_close_r+0x1a>
 8010350:	682b      	ldr	r3, [r5, #0]
 8010352:	b103      	cbz	r3, 8010356 <_close_r+0x1a>
 8010354:	6023      	str	r3, [r4, #0]
 8010356:	bd38      	pop	{r3, r4, r5, pc}
 8010358:	2000139c 	.word	0x2000139c

0801035c <_lseek_r>:
 801035c:	b538      	push	{r3, r4, r5, lr}
 801035e:	4d07      	ldr	r5, [pc, #28]	@ (801037c <_lseek_r+0x20>)
 8010360:	4604      	mov	r4, r0
 8010362:	4608      	mov	r0, r1
 8010364:	4611      	mov	r1, r2
 8010366:	2200      	movs	r2, #0
 8010368:	602a      	str	r2, [r5, #0]
 801036a:	461a      	mov	r2, r3
 801036c:	f7f2 fafb 	bl	8002966 <_lseek>
 8010370:	1c43      	adds	r3, r0, #1
 8010372:	d102      	bne.n	801037a <_lseek_r+0x1e>
 8010374:	682b      	ldr	r3, [r5, #0]
 8010376:	b103      	cbz	r3, 801037a <_lseek_r+0x1e>
 8010378:	6023      	str	r3, [r4, #0]
 801037a:	bd38      	pop	{r3, r4, r5, pc}
 801037c:	2000139c 	.word	0x2000139c

08010380 <_read_r>:
 8010380:	b538      	push	{r3, r4, r5, lr}
 8010382:	4d07      	ldr	r5, [pc, #28]	@ (80103a0 <_read_r+0x20>)
 8010384:	4604      	mov	r4, r0
 8010386:	4608      	mov	r0, r1
 8010388:	4611      	mov	r1, r2
 801038a:	2200      	movs	r2, #0
 801038c:	602a      	str	r2, [r5, #0]
 801038e:	461a      	mov	r2, r3
 8010390:	f7f2 fa89 	bl	80028a6 <_read>
 8010394:	1c43      	adds	r3, r0, #1
 8010396:	d102      	bne.n	801039e <_read_r+0x1e>
 8010398:	682b      	ldr	r3, [r5, #0]
 801039a:	b103      	cbz	r3, 801039e <_read_r+0x1e>
 801039c:	6023      	str	r3, [r4, #0]
 801039e:	bd38      	pop	{r3, r4, r5, pc}
 80103a0:	2000139c 	.word	0x2000139c

080103a4 <_write_r>:
 80103a4:	b538      	push	{r3, r4, r5, lr}
 80103a6:	4d07      	ldr	r5, [pc, #28]	@ (80103c4 <_write_r+0x20>)
 80103a8:	4604      	mov	r4, r0
 80103aa:	4608      	mov	r0, r1
 80103ac:	4611      	mov	r1, r2
 80103ae:	2200      	movs	r2, #0
 80103b0:	602a      	str	r2, [r5, #0]
 80103b2:	461a      	mov	r2, r3
 80103b4:	f7f2 fa94 	bl	80028e0 <_write>
 80103b8:	1c43      	adds	r3, r0, #1
 80103ba:	d102      	bne.n	80103c2 <_write_r+0x1e>
 80103bc:	682b      	ldr	r3, [r5, #0]
 80103be:	b103      	cbz	r3, 80103c2 <_write_r+0x1e>
 80103c0:	6023      	str	r3, [r4, #0]
 80103c2:	bd38      	pop	{r3, r4, r5, pc}
 80103c4:	2000139c 	.word	0x2000139c

080103c8 <abort>:
 80103c8:	b508      	push	{r3, lr}
 80103ca:	2006      	movs	r0, #6
 80103cc:	f000 faa0 	bl	8010910 <raise>
 80103d0:	2001      	movs	r0, #1
 80103d2:	f7f2 fa5d 	bl	8002890 <_exit>

080103d6 <_calloc_r>:
 80103d6:	b570      	push	{r4, r5, r6, lr}
 80103d8:	fba1 5402 	umull	r5, r4, r1, r2
 80103dc:	b93c      	cbnz	r4, 80103ee <_calloc_r+0x18>
 80103de:	4629      	mov	r1, r5
 80103e0:	f7fc fa3e 	bl	800c860 <_malloc_r>
 80103e4:	4606      	mov	r6, r0
 80103e6:	b928      	cbnz	r0, 80103f4 <_calloc_r+0x1e>
 80103e8:	2600      	movs	r6, #0
 80103ea:	4630      	mov	r0, r6
 80103ec:	bd70      	pop	{r4, r5, r6, pc}
 80103ee:	220c      	movs	r2, #12
 80103f0:	6002      	str	r2, [r0, #0]
 80103f2:	e7f9      	b.n	80103e8 <_calloc_r+0x12>
 80103f4:	462a      	mov	r2, r5
 80103f6:	4621      	mov	r1, r4
 80103f8:	f7fd fdd8 	bl	800dfac <memset>
 80103fc:	e7f5      	b.n	80103ea <_calloc_r+0x14>

080103fe <__sfputc_r>:
 80103fe:	6893      	ldr	r3, [r2, #8]
 8010400:	3b01      	subs	r3, #1
 8010402:	2b00      	cmp	r3, #0
 8010404:	b410      	push	{r4}
 8010406:	6093      	str	r3, [r2, #8]
 8010408:	da08      	bge.n	801041c <__sfputc_r+0x1e>
 801040a:	6994      	ldr	r4, [r2, #24]
 801040c:	42a3      	cmp	r3, r4
 801040e:	db01      	blt.n	8010414 <__sfputc_r+0x16>
 8010410:	290a      	cmp	r1, #10
 8010412:	d103      	bne.n	801041c <__sfputc_r+0x1e>
 8010414:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010418:	f000 b93a 	b.w	8010690 <__swbuf_r>
 801041c:	6813      	ldr	r3, [r2, #0]
 801041e:	1c58      	adds	r0, r3, #1
 8010420:	6010      	str	r0, [r2, #0]
 8010422:	7019      	strb	r1, [r3, #0]
 8010424:	4608      	mov	r0, r1
 8010426:	f85d 4b04 	ldr.w	r4, [sp], #4
 801042a:	4770      	bx	lr

0801042c <__sfputs_r>:
 801042c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801042e:	4606      	mov	r6, r0
 8010430:	460f      	mov	r7, r1
 8010432:	4614      	mov	r4, r2
 8010434:	18d5      	adds	r5, r2, r3
 8010436:	42ac      	cmp	r4, r5
 8010438:	d101      	bne.n	801043e <__sfputs_r+0x12>
 801043a:	2000      	movs	r0, #0
 801043c:	e007      	b.n	801044e <__sfputs_r+0x22>
 801043e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010442:	463a      	mov	r2, r7
 8010444:	4630      	mov	r0, r6
 8010446:	f7ff ffda 	bl	80103fe <__sfputc_r>
 801044a:	1c43      	adds	r3, r0, #1
 801044c:	d1f3      	bne.n	8010436 <__sfputs_r+0xa>
 801044e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010450 <_vfiprintf_r>:
 8010450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010454:	460d      	mov	r5, r1
 8010456:	b09d      	sub	sp, #116	@ 0x74
 8010458:	4614      	mov	r4, r2
 801045a:	4698      	mov	r8, r3
 801045c:	4606      	mov	r6, r0
 801045e:	b118      	cbz	r0, 8010468 <_vfiprintf_r+0x18>
 8010460:	6a03      	ldr	r3, [r0, #32]
 8010462:	b90b      	cbnz	r3, 8010468 <_vfiprintf_r+0x18>
 8010464:	f7fc fed6 	bl	800d214 <__sinit>
 8010468:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801046a:	07d9      	lsls	r1, r3, #31
 801046c:	d405      	bmi.n	801047a <_vfiprintf_r+0x2a>
 801046e:	89ab      	ldrh	r3, [r5, #12]
 8010470:	059a      	lsls	r2, r3, #22
 8010472:	d402      	bmi.n	801047a <_vfiprintf_r+0x2a>
 8010474:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010476:	f7fd fde0 	bl	800e03a <__retarget_lock_acquire_recursive>
 801047a:	89ab      	ldrh	r3, [r5, #12]
 801047c:	071b      	lsls	r3, r3, #28
 801047e:	d501      	bpl.n	8010484 <_vfiprintf_r+0x34>
 8010480:	692b      	ldr	r3, [r5, #16]
 8010482:	b99b      	cbnz	r3, 80104ac <_vfiprintf_r+0x5c>
 8010484:	4629      	mov	r1, r5
 8010486:	4630      	mov	r0, r6
 8010488:	f000 f940 	bl	801070c <__swsetup_r>
 801048c:	b170      	cbz	r0, 80104ac <_vfiprintf_r+0x5c>
 801048e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010490:	07dc      	lsls	r4, r3, #31
 8010492:	d504      	bpl.n	801049e <_vfiprintf_r+0x4e>
 8010494:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8010498:	b01d      	add	sp, #116	@ 0x74
 801049a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801049e:	89ab      	ldrh	r3, [r5, #12]
 80104a0:	0598      	lsls	r0, r3, #22
 80104a2:	d4f7      	bmi.n	8010494 <_vfiprintf_r+0x44>
 80104a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80104a6:	f7fd fdc9 	bl	800e03c <__retarget_lock_release_recursive>
 80104aa:	e7f3      	b.n	8010494 <_vfiprintf_r+0x44>
 80104ac:	2300      	movs	r3, #0
 80104ae:	9309      	str	r3, [sp, #36]	@ 0x24
 80104b0:	2320      	movs	r3, #32
 80104b2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80104b6:	f8cd 800c 	str.w	r8, [sp, #12]
 80104ba:	2330      	movs	r3, #48	@ 0x30
 80104bc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801066c <_vfiprintf_r+0x21c>
 80104c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80104c4:	f04f 0901 	mov.w	r9, #1
 80104c8:	4623      	mov	r3, r4
 80104ca:	469a      	mov	sl, r3
 80104cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104d0:	b10a      	cbz	r2, 80104d6 <_vfiprintf_r+0x86>
 80104d2:	2a25      	cmp	r2, #37	@ 0x25
 80104d4:	d1f9      	bne.n	80104ca <_vfiprintf_r+0x7a>
 80104d6:	ebba 0b04 	subs.w	fp, sl, r4
 80104da:	d00b      	beq.n	80104f4 <_vfiprintf_r+0xa4>
 80104dc:	465b      	mov	r3, fp
 80104de:	4622      	mov	r2, r4
 80104e0:	4629      	mov	r1, r5
 80104e2:	4630      	mov	r0, r6
 80104e4:	f7ff ffa2 	bl	801042c <__sfputs_r>
 80104e8:	3001      	adds	r0, #1
 80104ea:	f000 80a7 	beq.w	801063c <_vfiprintf_r+0x1ec>
 80104ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80104f0:	445a      	add	r2, fp
 80104f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80104f4:	f89a 3000 	ldrb.w	r3, [sl]
 80104f8:	2b00      	cmp	r3, #0
 80104fa:	f000 809f 	beq.w	801063c <_vfiprintf_r+0x1ec>
 80104fe:	2300      	movs	r3, #0
 8010500:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8010504:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010508:	f10a 0a01 	add.w	sl, sl, #1
 801050c:	9304      	str	r3, [sp, #16]
 801050e:	9307      	str	r3, [sp, #28]
 8010510:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010514:	931a      	str	r3, [sp, #104]	@ 0x68
 8010516:	4654      	mov	r4, sl
 8010518:	2205      	movs	r2, #5
 801051a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801051e:	4853      	ldr	r0, [pc, #332]	@ (801066c <_vfiprintf_r+0x21c>)
 8010520:	f7ef fe7e 	bl	8000220 <memchr>
 8010524:	9a04      	ldr	r2, [sp, #16]
 8010526:	b9d8      	cbnz	r0, 8010560 <_vfiprintf_r+0x110>
 8010528:	06d1      	lsls	r1, r2, #27
 801052a:	bf44      	itt	mi
 801052c:	2320      	movmi	r3, #32
 801052e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010532:	0713      	lsls	r3, r2, #28
 8010534:	bf44      	itt	mi
 8010536:	232b      	movmi	r3, #43	@ 0x2b
 8010538:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801053c:	f89a 3000 	ldrb.w	r3, [sl]
 8010540:	2b2a      	cmp	r3, #42	@ 0x2a
 8010542:	d015      	beq.n	8010570 <_vfiprintf_r+0x120>
 8010544:	9a07      	ldr	r2, [sp, #28]
 8010546:	4654      	mov	r4, sl
 8010548:	2000      	movs	r0, #0
 801054a:	f04f 0c0a 	mov.w	ip, #10
 801054e:	4621      	mov	r1, r4
 8010550:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010554:	3b30      	subs	r3, #48	@ 0x30
 8010556:	2b09      	cmp	r3, #9
 8010558:	d94b      	bls.n	80105f2 <_vfiprintf_r+0x1a2>
 801055a:	b1b0      	cbz	r0, 801058a <_vfiprintf_r+0x13a>
 801055c:	9207      	str	r2, [sp, #28]
 801055e:	e014      	b.n	801058a <_vfiprintf_r+0x13a>
 8010560:	eba0 0308 	sub.w	r3, r0, r8
 8010564:	fa09 f303 	lsl.w	r3, r9, r3
 8010568:	4313      	orrs	r3, r2
 801056a:	9304      	str	r3, [sp, #16]
 801056c:	46a2      	mov	sl, r4
 801056e:	e7d2      	b.n	8010516 <_vfiprintf_r+0xc6>
 8010570:	9b03      	ldr	r3, [sp, #12]
 8010572:	1d19      	adds	r1, r3, #4
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	9103      	str	r1, [sp, #12]
 8010578:	2b00      	cmp	r3, #0
 801057a:	bfbb      	ittet	lt
 801057c:	425b      	neglt	r3, r3
 801057e:	f042 0202 	orrlt.w	r2, r2, #2
 8010582:	9307      	strge	r3, [sp, #28]
 8010584:	9307      	strlt	r3, [sp, #28]
 8010586:	bfb8      	it	lt
 8010588:	9204      	strlt	r2, [sp, #16]
 801058a:	7823      	ldrb	r3, [r4, #0]
 801058c:	2b2e      	cmp	r3, #46	@ 0x2e
 801058e:	d10a      	bne.n	80105a6 <_vfiprintf_r+0x156>
 8010590:	7863      	ldrb	r3, [r4, #1]
 8010592:	2b2a      	cmp	r3, #42	@ 0x2a
 8010594:	d132      	bne.n	80105fc <_vfiprintf_r+0x1ac>
 8010596:	9b03      	ldr	r3, [sp, #12]
 8010598:	1d1a      	adds	r2, r3, #4
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	9203      	str	r2, [sp, #12]
 801059e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80105a2:	3402      	adds	r4, #2
 80105a4:	9305      	str	r3, [sp, #20]
 80105a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801067c <_vfiprintf_r+0x22c>
 80105aa:	7821      	ldrb	r1, [r4, #0]
 80105ac:	2203      	movs	r2, #3
 80105ae:	4650      	mov	r0, sl
 80105b0:	f7ef fe36 	bl	8000220 <memchr>
 80105b4:	b138      	cbz	r0, 80105c6 <_vfiprintf_r+0x176>
 80105b6:	9b04      	ldr	r3, [sp, #16]
 80105b8:	eba0 000a 	sub.w	r0, r0, sl
 80105bc:	2240      	movs	r2, #64	@ 0x40
 80105be:	4082      	lsls	r2, r0
 80105c0:	4313      	orrs	r3, r2
 80105c2:	3401      	adds	r4, #1
 80105c4:	9304      	str	r3, [sp, #16]
 80105c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105ca:	4829      	ldr	r0, [pc, #164]	@ (8010670 <_vfiprintf_r+0x220>)
 80105cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80105d0:	2206      	movs	r2, #6
 80105d2:	f7ef fe25 	bl	8000220 <memchr>
 80105d6:	2800      	cmp	r0, #0
 80105d8:	d03f      	beq.n	801065a <_vfiprintf_r+0x20a>
 80105da:	4b26      	ldr	r3, [pc, #152]	@ (8010674 <_vfiprintf_r+0x224>)
 80105dc:	bb1b      	cbnz	r3, 8010626 <_vfiprintf_r+0x1d6>
 80105de:	9b03      	ldr	r3, [sp, #12]
 80105e0:	3307      	adds	r3, #7
 80105e2:	f023 0307 	bic.w	r3, r3, #7
 80105e6:	3308      	adds	r3, #8
 80105e8:	9303      	str	r3, [sp, #12]
 80105ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105ec:	443b      	add	r3, r7
 80105ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80105f0:	e76a      	b.n	80104c8 <_vfiprintf_r+0x78>
 80105f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80105f6:	460c      	mov	r4, r1
 80105f8:	2001      	movs	r0, #1
 80105fa:	e7a8      	b.n	801054e <_vfiprintf_r+0xfe>
 80105fc:	2300      	movs	r3, #0
 80105fe:	3401      	adds	r4, #1
 8010600:	9305      	str	r3, [sp, #20]
 8010602:	4619      	mov	r1, r3
 8010604:	f04f 0c0a 	mov.w	ip, #10
 8010608:	4620      	mov	r0, r4
 801060a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801060e:	3a30      	subs	r2, #48	@ 0x30
 8010610:	2a09      	cmp	r2, #9
 8010612:	d903      	bls.n	801061c <_vfiprintf_r+0x1cc>
 8010614:	2b00      	cmp	r3, #0
 8010616:	d0c6      	beq.n	80105a6 <_vfiprintf_r+0x156>
 8010618:	9105      	str	r1, [sp, #20]
 801061a:	e7c4      	b.n	80105a6 <_vfiprintf_r+0x156>
 801061c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010620:	4604      	mov	r4, r0
 8010622:	2301      	movs	r3, #1
 8010624:	e7f0      	b.n	8010608 <_vfiprintf_r+0x1b8>
 8010626:	ab03      	add	r3, sp, #12
 8010628:	9300      	str	r3, [sp, #0]
 801062a:	462a      	mov	r2, r5
 801062c:	4b12      	ldr	r3, [pc, #72]	@ (8010678 <_vfiprintf_r+0x228>)
 801062e:	a904      	add	r1, sp, #16
 8010630:	4630      	mov	r0, r6
 8010632:	f7fb fec1 	bl	800c3b8 <_printf_float>
 8010636:	4607      	mov	r7, r0
 8010638:	1c78      	adds	r0, r7, #1
 801063a:	d1d6      	bne.n	80105ea <_vfiprintf_r+0x19a>
 801063c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801063e:	07d9      	lsls	r1, r3, #31
 8010640:	d405      	bmi.n	801064e <_vfiprintf_r+0x1fe>
 8010642:	89ab      	ldrh	r3, [r5, #12]
 8010644:	059a      	lsls	r2, r3, #22
 8010646:	d402      	bmi.n	801064e <_vfiprintf_r+0x1fe>
 8010648:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801064a:	f7fd fcf7 	bl	800e03c <__retarget_lock_release_recursive>
 801064e:	89ab      	ldrh	r3, [r5, #12]
 8010650:	065b      	lsls	r3, r3, #25
 8010652:	f53f af1f 	bmi.w	8010494 <_vfiprintf_r+0x44>
 8010656:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010658:	e71e      	b.n	8010498 <_vfiprintf_r+0x48>
 801065a:	ab03      	add	r3, sp, #12
 801065c:	9300      	str	r3, [sp, #0]
 801065e:	462a      	mov	r2, r5
 8010660:	4b05      	ldr	r3, [pc, #20]	@ (8010678 <_vfiprintf_r+0x228>)
 8010662:	a904      	add	r1, sp, #16
 8010664:	4630      	mov	r0, r6
 8010666:	f7fc f9e9 	bl	800ca3c <_printf_i>
 801066a:	e7e4      	b.n	8010636 <_vfiprintf_r+0x1e6>
 801066c:	08010d32 	.word	0x08010d32
 8010670:	08010d3c 	.word	0x08010d3c
 8010674:	0800c3b9 	.word	0x0800c3b9
 8010678:	0801042d 	.word	0x0801042d
 801067c:	08010d38 	.word	0x08010d38

08010680 <_malloc_usable_size_r>:
 8010680:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010684:	1f18      	subs	r0, r3, #4
 8010686:	2b00      	cmp	r3, #0
 8010688:	bfbc      	itt	lt
 801068a:	580b      	ldrlt	r3, [r1, r0]
 801068c:	18c0      	addlt	r0, r0, r3
 801068e:	4770      	bx	lr

08010690 <__swbuf_r>:
 8010690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010692:	460e      	mov	r6, r1
 8010694:	4614      	mov	r4, r2
 8010696:	4605      	mov	r5, r0
 8010698:	b118      	cbz	r0, 80106a2 <__swbuf_r+0x12>
 801069a:	6a03      	ldr	r3, [r0, #32]
 801069c:	b90b      	cbnz	r3, 80106a2 <__swbuf_r+0x12>
 801069e:	f7fc fdb9 	bl	800d214 <__sinit>
 80106a2:	69a3      	ldr	r3, [r4, #24]
 80106a4:	60a3      	str	r3, [r4, #8]
 80106a6:	89a3      	ldrh	r3, [r4, #12]
 80106a8:	071a      	lsls	r2, r3, #28
 80106aa:	d501      	bpl.n	80106b0 <__swbuf_r+0x20>
 80106ac:	6923      	ldr	r3, [r4, #16]
 80106ae:	b943      	cbnz	r3, 80106c2 <__swbuf_r+0x32>
 80106b0:	4621      	mov	r1, r4
 80106b2:	4628      	mov	r0, r5
 80106b4:	f000 f82a 	bl	801070c <__swsetup_r>
 80106b8:	b118      	cbz	r0, 80106c2 <__swbuf_r+0x32>
 80106ba:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80106be:	4638      	mov	r0, r7
 80106c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80106c2:	6823      	ldr	r3, [r4, #0]
 80106c4:	6922      	ldr	r2, [r4, #16]
 80106c6:	1a98      	subs	r0, r3, r2
 80106c8:	6963      	ldr	r3, [r4, #20]
 80106ca:	b2f6      	uxtb	r6, r6
 80106cc:	4283      	cmp	r3, r0
 80106ce:	4637      	mov	r7, r6
 80106d0:	dc05      	bgt.n	80106de <__swbuf_r+0x4e>
 80106d2:	4621      	mov	r1, r4
 80106d4:	4628      	mov	r0, r5
 80106d6:	f7ff f8ab 	bl	800f830 <_fflush_r>
 80106da:	2800      	cmp	r0, #0
 80106dc:	d1ed      	bne.n	80106ba <__swbuf_r+0x2a>
 80106de:	68a3      	ldr	r3, [r4, #8]
 80106e0:	3b01      	subs	r3, #1
 80106e2:	60a3      	str	r3, [r4, #8]
 80106e4:	6823      	ldr	r3, [r4, #0]
 80106e6:	1c5a      	adds	r2, r3, #1
 80106e8:	6022      	str	r2, [r4, #0]
 80106ea:	701e      	strb	r6, [r3, #0]
 80106ec:	6962      	ldr	r2, [r4, #20]
 80106ee:	1c43      	adds	r3, r0, #1
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d004      	beq.n	80106fe <__swbuf_r+0x6e>
 80106f4:	89a3      	ldrh	r3, [r4, #12]
 80106f6:	07db      	lsls	r3, r3, #31
 80106f8:	d5e1      	bpl.n	80106be <__swbuf_r+0x2e>
 80106fa:	2e0a      	cmp	r6, #10
 80106fc:	d1df      	bne.n	80106be <__swbuf_r+0x2e>
 80106fe:	4621      	mov	r1, r4
 8010700:	4628      	mov	r0, r5
 8010702:	f7ff f895 	bl	800f830 <_fflush_r>
 8010706:	2800      	cmp	r0, #0
 8010708:	d0d9      	beq.n	80106be <__swbuf_r+0x2e>
 801070a:	e7d6      	b.n	80106ba <__swbuf_r+0x2a>

0801070c <__swsetup_r>:
 801070c:	b538      	push	{r3, r4, r5, lr}
 801070e:	4b29      	ldr	r3, [pc, #164]	@ (80107b4 <__swsetup_r+0xa8>)
 8010710:	4605      	mov	r5, r0
 8010712:	6818      	ldr	r0, [r3, #0]
 8010714:	460c      	mov	r4, r1
 8010716:	b118      	cbz	r0, 8010720 <__swsetup_r+0x14>
 8010718:	6a03      	ldr	r3, [r0, #32]
 801071a:	b90b      	cbnz	r3, 8010720 <__swsetup_r+0x14>
 801071c:	f7fc fd7a 	bl	800d214 <__sinit>
 8010720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010724:	0719      	lsls	r1, r3, #28
 8010726:	d422      	bmi.n	801076e <__swsetup_r+0x62>
 8010728:	06da      	lsls	r2, r3, #27
 801072a:	d407      	bmi.n	801073c <__swsetup_r+0x30>
 801072c:	2209      	movs	r2, #9
 801072e:	602a      	str	r2, [r5, #0]
 8010730:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010734:	81a3      	strh	r3, [r4, #12]
 8010736:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801073a:	e033      	b.n	80107a4 <__swsetup_r+0x98>
 801073c:	0758      	lsls	r0, r3, #29
 801073e:	d512      	bpl.n	8010766 <__swsetup_r+0x5a>
 8010740:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010742:	b141      	cbz	r1, 8010756 <__swsetup_r+0x4a>
 8010744:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010748:	4299      	cmp	r1, r3
 801074a:	d002      	beq.n	8010752 <__swsetup_r+0x46>
 801074c:	4628      	mov	r0, r5
 801074e:	f7fe faff 	bl	800ed50 <_free_r>
 8010752:	2300      	movs	r3, #0
 8010754:	6363      	str	r3, [r4, #52]	@ 0x34
 8010756:	89a3      	ldrh	r3, [r4, #12]
 8010758:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801075c:	81a3      	strh	r3, [r4, #12]
 801075e:	2300      	movs	r3, #0
 8010760:	6063      	str	r3, [r4, #4]
 8010762:	6923      	ldr	r3, [r4, #16]
 8010764:	6023      	str	r3, [r4, #0]
 8010766:	89a3      	ldrh	r3, [r4, #12]
 8010768:	f043 0308 	orr.w	r3, r3, #8
 801076c:	81a3      	strh	r3, [r4, #12]
 801076e:	6923      	ldr	r3, [r4, #16]
 8010770:	b94b      	cbnz	r3, 8010786 <__swsetup_r+0x7a>
 8010772:	89a3      	ldrh	r3, [r4, #12]
 8010774:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8010778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801077c:	d003      	beq.n	8010786 <__swsetup_r+0x7a>
 801077e:	4621      	mov	r1, r4
 8010780:	4628      	mov	r0, r5
 8010782:	f000 f83f 	bl	8010804 <__smakebuf_r>
 8010786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801078a:	f013 0201 	ands.w	r2, r3, #1
 801078e:	d00a      	beq.n	80107a6 <__swsetup_r+0x9a>
 8010790:	2200      	movs	r2, #0
 8010792:	60a2      	str	r2, [r4, #8]
 8010794:	6962      	ldr	r2, [r4, #20]
 8010796:	4252      	negs	r2, r2
 8010798:	61a2      	str	r2, [r4, #24]
 801079a:	6922      	ldr	r2, [r4, #16]
 801079c:	b942      	cbnz	r2, 80107b0 <__swsetup_r+0xa4>
 801079e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80107a2:	d1c5      	bne.n	8010730 <__swsetup_r+0x24>
 80107a4:	bd38      	pop	{r3, r4, r5, pc}
 80107a6:	0799      	lsls	r1, r3, #30
 80107a8:	bf58      	it	pl
 80107aa:	6962      	ldrpl	r2, [r4, #20]
 80107ac:	60a2      	str	r2, [r4, #8]
 80107ae:	e7f4      	b.n	801079a <__swsetup_r+0x8e>
 80107b0:	2000      	movs	r0, #0
 80107b2:	e7f7      	b.n	80107a4 <__swsetup_r+0x98>
 80107b4:	200001a4 	.word	0x200001a4

080107b8 <__swhatbuf_r>:
 80107b8:	b570      	push	{r4, r5, r6, lr}
 80107ba:	460c      	mov	r4, r1
 80107bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80107c0:	2900      	cmp	r1, #0
 80107c2:	b096      	sub	sp, #88	@ 0x58
 80107c4:	4615      	mov	r5, r2
 80107c6:	461e      	mov	r6, r3
 80107c8:	da0d      	bge.n	80107e6 <__swhatbuf_r+0x2e>
 80107ca:	89a3      	ldrh	r3, [r4, #12]
 80107cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80107d0:	f04f 0100 	mov.w	r1, #0
 80107d4:	bf14      	ite	ne
 80107d6:	2340      	movne	r3, #64	@ 0x40
 80107d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80107dc:	2000      	movs	r0, #0
 80107de:	6031      	str	r1, [r6, #0]
 80107e0:	602b      	str	r3, [r5, #0]
 80107e2:	b016      	add	sp, #88	@ 0x58
 80107e4:	bd70      	pop	{r4, r5, r6, pc}
 80107e6:	466a      	mov	r2, sp
 80107e8:	f000 f848 	bl	801087c <_fstat_r>
 80107ec:	2800      	cmp	r0, #0
 80107ee:	dbec      	blt.n	80107ca <__swhatbuf_r+0x12>
 80107f0:	9901      	ldr	r1, [sp, #4]
 80107f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80107f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80107fa:	4259      	negs	r1, r3
 80107fc:	4159      	adcs	r1, r3
 80107fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010802:	e7eb      	b.n	80107dc <__swhatbuf_r+0x24>

08010804 <__smakebuf_r>:
 8010804:	898b      	ldrh	r3, [r1, #12]
 8010806:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010808:	079d      	lsls	r5, r3, #30
 801080a:	4606      	mov	r6, r0
 801080c:	460c      	mov	r4, r1
 801080e:	d507      	bpl.n	8010820 <__smakebuf_r+0x1c>
 8010810:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	6123      	str	r3, [r4, #16]
 8010818:	2301      	movs	r3, #1
 801081a:	6163      	str	r3, [r4, #20]
 801081c:	b003      	add	sp, #12
 801081e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010820:	ab01      	add	r3, sp, #4
 8010822:	466a      	mov	r2, sp
 8010824:	f7ff ffc8 	bl	80107b8 <__swhatbuf_r>
 8010828:	9f00      	ldr	r7, [sp, #0]
 801082a:	4605      	mov	r5, r0
 801082c:	4639      	mov	r1, r7
 801082e:	4630      	mov	r0, r6
 8010830:	f7fc f816 	bl	800c860 <_malloc_r>
 8010834:	b948      	cbnz	r0, 801084a <__smakebuf_r+0x46>
 8010836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801083a:	059a      	lsls	r2, r3, #22
 801083c:	d4ee      	bmi.n	801081c <__smakebuf_r+0x18>
 801083e:	f023 0303 	bic.w	r3, r3, #3
 8010842:	f043 0302 	orr.w	r3, r3, #2
 8010846:	81a3      	strh	r3, [r4, #12]
 8010848:	e7e2      	b.n	8010810 <__smakebuf_r+0xc>
 801084a:	89a3      	ldrh	r3, [r4, #12]
 801084c:	6020      	str	r0, [r4, #0]
 801084e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010852:	81a3      	strh	r3, [r4, #12]
 8010854:	9b01      	ldr	r3, [sp, #4]
 8010856:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801085a:	b15b      	cbz	r3, 8010874 <__smakebuf_r+0x70>
 801085c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010860:	4630      	mov	r0, r6
 8010862:	f000 f81d 	bl	80108a0 <_isatty_r>
 8010866:	b128      	cbz	r0, 8010874 <__smakebuf_r+0x70>
 8010868:	89a3      	ldrh	r3, [r4, #12]
 801086a:	f023 0303 	bic.w	r3, r3, #3
 801086e:	f043 0301 	orr.w	r3, r3, #1
 8010872:	81a3      	strh	r3, [r4, #12]
 8010874:	89a3      	ldrh	r3, [r4, #12]
 8010876:	431d      	orrs	r5, r3
 8010878:	81a5      	strh	r5, [r4, #12]
 801087a:	e7cf      	b.n	801081c <__smakebuf_r+0x18>

0801087c <_fstat_r>:
 801087c:	b538      	push	{r3, r4, r5, lr}
 801087e:	4d07      	ldr	r5, [pc, #28]	@ (801089c <_fstat_r+0x20>)
 8010880:	2300      	movs	r3, #0
 8010882:	4604      	mov	r4, r0
 8010884:	4608      	mov	r0, r1
 8010886:	4611      	mov	r1, r2
 8010888:	602b      	str	r3, [r5, #0]
 801088a:	f7f2 f851 	bl	8002930 <_fstat>
 801088e:	1c43      	adds	r3, r0, #1
 8010890:	d102      	bne.n	8010898 <_fstat_r+0x1c>
 8010892:	682b      	ldr	r3, [r5, #0]
 8010894:	b103      	cbz	r3, 8010898 <_fstat_r+0x1c>
 8010896:	6023      	str	r3, [r4, #0]
 8010898:	bd38      	pop	{r3, r4, r5, pc}
 801089a:	bf00      	nop
 801089c:	2000139c 	.word	0x2000139c

080108a0 <_isatty_r>:
 80108a0:	b538      	push	{r3, r4, r5, lr}
 80108a2:	4d06      	ldr	r5, [pc, #24]	@ (80108bc <_isatty_r+0x1c>)
 80108a4:	2300      	movs	r3, #0
 80108a6:	4604      	mov	r4, r0
 80108a8:	4608      	mov	r0, r1
 80108aa:	602b      	str	r3, [r5, #0]
 80108ac:	f7f2 f850 	bl	8002950 <_isatty>
 80108b0:	1c43      	adds	r3, r0, #1
 80108b2:	d102      	bne.n	80108ba <_isatty_r+0x1a>
 80108b4:	682b      	ldr	r3, [r5, #0]
 80108b6:	b103      	cbz	r3, 80108ba <_isatty_r+0x1a>
 80108b8:	6023      	str	r3, [r4, #0]
 80108ba:	bd38      	pop	{r3, r4, r5, pc}
 80108bc:	2000139c 	.word	0x2000139c

080108c0 <_raise_r>:
 80108c0:	291f      	cmp	r1, #31
 80108c2:	b538      	push	{r3, r4, r5, lr}
 80108c4:	4605      	mov	r5, r0
 80108c6:	460c      	mov	r4, r1
 80108c8:	d904      	bls.n	80108d4 <_raise_r+0x14>
 80108ca:	2316      	movs	r3, #22
 80108cc:	6003      	str	r3, [r0, #0]
 80108ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80108d2:	bd38      	pop	{r3, r4, r5, pc}
 80108d4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80108d6:	b112      	cbz	r2, 80108de <_raise_r+0x1e>
 80108d8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80108dc:	b94b      	cbnz	r3, 80108f2 <_raise_r+0x32>
 80108de:	4628      	mov	r0, r5
 80108e0:	f000 f830 	bl	8010944 <_getpid_r>
 80108e4:	4622      	mov	r2, r4
 80108e6:	4601      	mov	r1, r0
 80108e8:	4628      	mov	r0, r5
 80108ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80108ee:	f000 b817 	b.w	8010920 <_kill_r>
 80108f2:	2b01      	cmp	r3, #1
 80108f4:	d00a      	beq.n	801090c <_raise_r+0x4c>
 80108f6:	1c59      	adds	r1, r3, #1
 80108f8:	d103      	bne.n	8010902 <_raise_r+0x42>
 80108fa:	2316      	movs	r3, #22
 80108fc:	6003      	str	r3, [r0, #0]
 80108fe:	2001      	movs	r0, #1
 8010900:	e7e7      	b.n	80108d2 <_raise_r+0x12>
 8010902:	2100      	movs	r1, #0
 8010904:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010908:	4620      	mov	r0, r4
 801090a:	4798      	blx	r3
 801090c:	2000      	movs	r0, #0
 801090e:	e7e0      	b.n	80108d2 <_raise_r+0x12>

08010910 <raise>:
 8010910:	4b02      	ldr	r3, [pc, #8]	@ (801091c <raise+0xc>)
 8010912:	4601      	mov	r1, r0
 8010914:	6818      	ldr	r0, [r3, #0]
 8010916:	f7ff bfd3 	b.w	80108c0 <_raise_r>
 801091a:	bf00      	nop
 801091c:	200001a4 	.word	0x200001a4

08010920 <_kill_r>:
 8010920:	b538      	push	{r3, r4, r5, lr}
 8010922:	4d07      	ldr	r5, [pc, #28]	@ (8010940 <_kill_r+0x20>)
 8010924:	2300      	movs	r3, #0
 8010926:	4604      	mov	r4, r0
 8010928:	4608      	mov	r0, r1
 801092a:	4611      	mov	r1, r2
 801092c:	602b      	str	r3, [r5, #0]
 801092e:	f7f1 ff9f 	bl	8002870 <_kill>
 8010932:	1c43      	adds	r3, r0, #1
 8010934:	d102      	bne.n	801093c <_kill_r+0x1c>
 8010936:	682b      	ldr	r3, [r5, #0]
 8010938:	b103      	cbz	r3, 801093c <_kill_r+0x1c>
 801093a:	6023      	str	r3, [r4, #0]
 801093c:	bd38      	pop	{r3, r4, r5, pc}
 801093e:	bf00      	nop
 8010940:	2000139c 	.word	0x2000139c

08010944 <_getpid_r>:
 8010944:	f7f1 bf8c 	b.w	8002860 <_getpid>

08010948 <_init>:
 8010948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801094a:	bf00      	nop
 801094c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801094e:	bc08      	pop	{r3}
 8010950:	469e      	mov	lr, r3
 8010952:	4770      	bx	lr

08010954 <_fini>:
 8010954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010956:	bf00      	nop
 8010958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801095a:	bc08      	pop	{r3}
 801095c:	469e      	mov	lr, r3
 801095e:	4770      	bx	lr
